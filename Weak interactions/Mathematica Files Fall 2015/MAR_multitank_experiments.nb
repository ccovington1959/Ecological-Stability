(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    363555,       6960]
NotebookOptionsPosition[    362005,       6908]
NotebookOutlinePosition[    362346,       6923]
CellTagsIndexPosition[    362303,       6920]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}]], "Input"],

Cell[BoxData[
 StyleBox[
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "notebook", " ", "goes", " ", "through", " ", "some", " ", 
     "experiments", " ", "to", " ", "compare", " ", "the", " ", 
     "\"\<composite method\>\"", " ", "in", " ", "the", " ", "multivariable", 
     " ", "case"}], ",", " ", 
    RowBox[{
     RowBox[{
     "to", " ", "the", " ", "method", " ", "that", " ", "averages", " ", 
      "estimated", " ", "parameters", " ", "across", " ", "multiple", " ", 
      RowBox[{"tanks", ".", " ", "You"}], " ", "will", " ", "need", " ", "to",
       " ", "make", " ", "sure", " ", "you", " ", "run", " ", "the", " ", 
      "notebook", " ", "\"\<MAR_multitank.nb\>\"", " ", "first", " ", "since",
       " ", "it", " ", "has", " ", "the", " ", "code", " ", "for", " ", "the",
       " ", "built"}], "-", 
     RowBox[{"in", " ", "functions", " ", "to", " ", "do", " ", "the", " ", 
      RowBox[{"estimates", "."}]}]}]}], "*)"}], "Subsection"]], "Input",
 CellChangeTimes->{{3.653923600352579*^9, 3.653923660559783*^9}, {
  3.65392482838562*^9, 3.6539248900885773`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", 
    RowBox[{"This", " ", "generates", " ", "multiple", " ", "datasets", " ", 
     RowBox[{"(", "tanks", ")"}], " ", "where", " ", "the", " ", "noise", " ",
      "terms", " ", "driving", " ", "all", " ", "tanks", " ", "are", " ", 
     RowBox[{"identical", ".", " ", "This"}], " ", "is", " ", "probably", " ",
      "not", " ", 
     RowBox[{"realistic", "."}]}], "*)"}], "Subsubsection"], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"GenerateCorrelatedDatasets", "[", 
     RowBox[{"A_", ",", "B_", ",", "q_", ",", "time_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "a", ",", "b", ",", "p", ",", "noise", ",", "x0", ",", "X0", ",", 
        "X"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"p", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"B", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"a", "=", 
        RowBox[{"A", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"b", "=", 
        RowBox[{"Transpose", "[", "B", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"noise", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomVariate", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", "]"}], ",", "p"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", 
            RowBox[{"time", "+", "1"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"X", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", 
         RowBox[{"j", "\[LessEqual]", "q"}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"x0", "=", 
           RowBox[{"RandomVariate", "[", 
            RowBox[{
             RowBox[{"UniformDistribution", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}], ",", "p"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"X0", "=", 
           RowBox[{"{", "x0", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"t", "=", "1"}], ",", 
            RowBox[{"t", "\[LessEqual]", "time"}], ",", 
            RowBox[{
             RowBox[{"t", "++"}], ";", "\[IndentingNewLine]", 
             RowBox[{"x0", "=", 
              RowBox[{"a", "+", 
               RowBox[{"x0", ".", "b"}], "+", 
               RowBox[{"noise", "[", 
                RowBox[{"[", "t", "]"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"X0", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"X0", ",", 
                RowBox[{"{", "x0", "}"}]}], "]"}]}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"X", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"X", ",", 
             RowBox[{"{", "X0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", "X"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   StyleBox[
    RowBox[{"(*", 
     RowBox[{"This", " ", "generates", " ", "multiple", " ", "datasets", " ", 
      RowBox[{"(", "tanks", ")"}], " ", "where", " ", "the", " ", "noise", 
      " ", "terms", " ", "driving", " ", "all", " ", "tanks", " ", "are", " ", 
      RowBox[{"uncorrelated", ".", " ", "This"}], " ", "is", " ", "probably", 
      " ", "more", " ", 
      RowBox[{"realistic", "."}]}], "*)"}], "Subsubsection"], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GenerateUnCorrelatedDatasets", "[", 
     RowBox[{"A_", ",", "B_", ",", "q_", ",", "time_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "a", ",", "b", ",", "p", ",", "noise", ",", "x0", ",", "X0", ",", 
        "X"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"p", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"B", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"a", "=", 
        RowBox[{"A", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"b", "=", 
        RowBox[{"Transpose", "[", "B", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"X", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", 
         RowBox[{"j", "\[LessEqual]", "q"}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"noise", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"RandomVariate", "[", 
              RowBox[{
               RowBox[{"NormalDistribution", "[", "]"}], ",", "p"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "1", ",", 
               RowBox[{"time", "+", "1"}]}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"x0", "=", 
           RowBox[{"RandomVariate", "[", 
            RowBox[{
             RowBox[{"UniformDistribution", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}], ",", "p"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"X0", "=", 
           RowBox[{"{", "x0", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"t", "=", "1"}], ",", 
            RowBox[{"t", "\[LessEqual]", "time"}], ",", 
            RowBox[{
             RowBox[{"t", "++"}], ";", "\[IndentingNewLine]", 
             RowBox[{"x0", "=", 
              RowBox[{"a", "+", 
               RowBox[{"x0", ".", "b"}], "+", 
               RowBox[{"noise", "[", 
                RowBox[{"[", "t", "]"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"X0", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"X0", ",", 
                RowBox[{"{", "x0", "}"}]}], "]"}]}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"X", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"X", ",", 
             RowBox[{"{", "X0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", "X"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   StyleBox[
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"This", " ", "generates", " ", "multiple", " ", "datasets", " ", 
       RowBox[{"(", "tanks", ")"}], " ", "INCLUDING", " ", "internally", " ", 
       "generated", " ", "covariates"}], ",", " ", 
      RowBox[{
      "where", " ", "the", " ", "noise", " ", "terms", " ", "driving", " ", 
       "all", " ", "tanks", " ", "are", " ", 
       RowBox[{"uncorrelated", "."}]}]}], " ", "*)"}], "Subsubsection"], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GenerateUnCorrelatedDatasetsWithCov", "[", 
     RowBox[{"A_", ",", "B_", ",", "Cc_", ",", "q_", ",", "time_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "a", ",", "b", ",", "c", ",", "u", ",", "p", ",", "noise", ",", "x0", 
        ",", "X0", ",", "X", ",", "cov"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"p", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"B", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"cov", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"Cc", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"a", "=", 
        RowBox[{"A", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"b", "=", 
        RowBox[{"Transpose", "[", "B", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"c", "=", 
        RowBox[{"Transpose", "[", "Cc", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"X", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", 
         RowBox[{"j", "\[LessEqual]", "q"}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"noise", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"RandomVariate", "[", 
              RowBox[{
               RowBox[{"NormalDistribution", "[", "]"}], ",", "p"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "1", ",", 
               RowBox[{"time", "+", "1"}]}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"u", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"RandomVariate", "[", 
              RowBox[{
               RowBox[{"NormalDistribution", "[", "]"}], ",", "cov"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "1", ",", 
               RowBox[{"time", "+", "2"}]}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"x0", "=", 
           RowBox[{"RandomVariate", "[", 
            RowBox[{
             RowBox[{"UniformDistribution", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}], ",", "p"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"X0", "=", 
           RowBox[{"{", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"u", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "x0"}], "]"}], "}"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"t", "=", "1"}], ",", 
            RowBox[{"t", "\[LessEqual]", "time"}], ",", 
            RowBox[{
             RowBox[{"t", "++"}], ";", "\[IndentingNewLine]", 
             RowBox[{"x0", "=", 
              RowBox[{"a", "+", 
               RowBox[{"x0", ".", "b"}], "+", 
               RowBox[{
                RowBox[{"u", "[", 
                 RowBox[{"[", "t", "]"}], "]"}], ".", "c"}], "+", 
               RowBox[{"noise", "[", 
                RowBox[{"[", "t", "]"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"X0", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"X0", ",", 
                RowBox[{"{", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", 
                    RowBox[{"t", "+", "1"}], "]"}], "]"}], ",", "x0"}], "]"}],
                  "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"X", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"X", ",", 
             RowBox[{"{", "X0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", "X"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6539129895252514`*^9, 3.653913027615945*^9}, {
   3.653913083261507*^9, 3.6539131485217047`*^9}, {3.653913202247872*^9, 
   3.653913204154126*^9}, {3.6539132514630346`*^9, 3.6539133339162273`*^9}, {
   3.6539133998703175`*^9, 3.653913442457514*^9}, {3.6539135706383324`*^9, 
   3.6539135913459573`*^9}, {3.6539137162172556`*^9, 
   3.6539137520518208`*^9}, {3.653913813924382*^9, 3.65391382903379*^9}, {
   3.6539138597959642`*^9, 3.653913865014725*^9}, {3.65391389991543*^9, 
   3.6539139136247034`*^9}, {3.6539139625757136`*^9, 
   3.6539139831868486`*^9}, {3.6539140322322545`*^9, 3.653914059185438*^9}, {
   3.653914091776641*^9, 3.653914191729189*^9}, {3.653915180124052*^9, 
   3.6539152218474665`*^9}, {3.6539219829067245`*^9, 
   3.6539219829848504`*^9}, {3.653922390554773*^9, 3.653922435408965*^9}, {
   3.6539236892267275`*^9, 3.653923780989872*^9}, {3.654881736941744*^9, 
   3.6548817491051655`*^9}, {3.654881791354842*^9, 3.6548818509399548`*^9}, {
   3.654881993059614*^9, 3.654882014599256*^9}, {3.6548820459089117`*^9, 
   3.654882076949768*^9}, 3.654882141293885*^9, {3.654882194688382*^9, 
   3.654882195312383*^9}, {3.654882332813236*^9, 3.6548823821655283`*^9}, {
   3.6548824210842*^9, 3.654882428009013*^9}, {3.654882478185503*^9, 
   3.6548824923329306`*^9}, {3.654882538951416*^9, 3.6548825392166166`*^9}, {
   3.6548825709080744`*^9, 3.6548825771776867`*^9}, 3.654882689144092*^9, {
   3.654883840783613*^9, 3.6548838910839033`*^9}, {3.6548842520279665`*^9, 
   3.654884254937572*^9}, {3.6548853032359543`*^9, 3.6548853167671785`*^9}, {
   3.6548854137919607`*^9, 3.6548854163603697`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{"(*", 
    RowBox[{"Experiments", " ", "are", " ", 
     RowBox[{"below", ".", " ", "You"}], " ", "can", " ", "change", " ", 
     "any", " ", "of", " ", "the", " ", "main", " ", "parameters", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"A", ",", " ", "B", ",", " ", 
        RowBox[{"q", " ", "=", " ", 
         RowBox[{"number", " ", "of", " ", "tanks"}]}], ",", 
        RowBox[{"finaltime", " ", "=", " ", 
         RowBox[{"length", " ", "of", " ", "timeseries"}]}]}], ")"}], ".", 
      " ", "Just"}], " ", "try", " ", "to", " ", "be", " ", "sure", " ", 
     "that", " ", "your", " ", "B", " ", "matrix", " ", "is", " ", 
     RowBox[{"stable", ":", " ", 
      RowBox[{
      "all", " ", "eigenvalues", " ", "should", " ", "be", " ", "less", " ", 
       "than", " ", "one", " ", "in", " ", "absolute", " ", 
       RowBox[{"value", "."}]}]}]}], "*)"}], "\[IndentingNewLine]"}], 
  "Subsection"]], "Input",
 CellChangeTimes->{{3.653924669209894*^9, 3.6539247750371904`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", 
    RowBox[{
    "Experiment", " ", "with", " ", "Highly", " ", "Correlated", " ", 
     "datasets"}], "*)"}], "Subsubsection"], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"-", ".2"}], "}"}], ",", 
       RowBox[{"{", "1.0", "}"}], ",", 
       RowBox[{"{", ".5", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{".8", ",", 
         RowBox[{"-", ".2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".5", ",", ".1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0", ",", ".4"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"Length", "[", 
      RowBox[{"B", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"q", "=", "4"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"finaltime", "=", "20"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"datasets", "=", 
     RowBox[{"GenerateCorrelatedDatasets", "[", 
      RowBox[{"A", ",", "B", ",", "q", ",", "finaltime"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CompD", "=", 
     RowBox[{"CompUnConstrainedCov", "[", 
      RowBox[{"datasets", ",", "0"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Mlist", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", "q"}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m0", "=", 
       RowBox[{"CompUnConstrainedCov", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"datasets", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Mlist", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"Mlist", ",", 
         RowBox[{"{", "m0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
    "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"AvgD", "=", 
     RowBox[{"Mean", "[", "Mlist", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Dmatrix = \>\"", 
      RowBox[{"MatrixForm", "[", "A", "]"}]}], ",", 
     RowBox[{"MatrixForm", "[", "B", "]"}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Comp= \>\"", ",", 
     RowBox[{"MatrixForm", "[", "CompD", "]"}], ",", 
     RowBox[{"\"\< Avg = \>\"", 
      RowBox[{"MatrixForm", "[", "AvgD", "]"}]}]}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Eigenvalues = \>\"", ",", 
     RowBox[{"Eigenvalues", "[", "B", "]"}], ",", "\"\< -- \>\"", ",", 
     RowBox[{"Abs", "[", 
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"CompD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], ",", 
     "\"\< -- \>\"", ",", 
     RowBox[{"Abs", "[", 
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"AvgD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Stability = \>\"", ",", 
     RowBox[{
      RowBox[{"Det", "[", "B", "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}], ",", "\"\< -- \>\"", ",", " ", 
     RowBox[{
      RowBox[{"Det", "[", 
       RowBox[{"CompD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}], ",", " ", "\"\< -- \>\"", ",", "  ", 
     RowBox[{
      RowBox[{"Det", "[", 
       RowBox[{"AvgD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.653915233902598*^9, 3.653915242920302*^9}, {
   3.6539152810544586`*^9, 3.653915287116972*^9}, {3.6539155581141586`*^9, 
   3.6539155786298285`*^9}, {3.653915646275171*^9, 3.6539156875095024`*^9}, 
   3.6539157185871935`*^9, {3.6539165270346856`*^9, 3.653916546358732*^9}, {
   3.6539172950086546`*^9, 3.653917343521999*^9}, {3.653917391048114*^9, 
   3.653917391141863*^9}, {3.653917597757635*^9, 3.653917620251558*^9}, {
   3.653917719915208*^9, 3.6539178412473054`*^9}, {3.653917882668425*^9, 
   3.6539179077831335`*^9}, {3.6539179508434*^9, 3.6539179876728163`*^9}, {
   3.6539180558595867`*^9, 3.6539182698614683`*^9}, {3.65391838327116*^9, 
   3.653918391921378*^9}, {3.6539198520689054`*^9, 3.65391985214703*^9}, {
   3.65391993484269*^9, 3.6539199349364414`*^9}, {3.6539224600351562`*^9, 
   3.6539224723730307`*^9}, {3.653922507442996*^9, 3.653922524489394*^9}, {
   3.653923814075712*^9, 3.653923815497591*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"\<\"Dmatrix = \"\>", " ", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "0.2`"}]},
        {"1.`"},
        {"0.5`"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.8`", 
        RowBox[{"-", "0.2`"}], "0"},
       {
        RowBox[{"-", "0.1`"}], "0.5`", "0.1`"},
       {"0.1`", "0", "0.4`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}],
  SequenceForm["Dmatrix = " MatrixForm[{{-0.2}, {1.}, {0.5}}], 
   MatrixForm[{{0.8, -0.2, 0}, {-0.1, 0.5, 0.1}, {0.1, 0, 0.4}}]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.653917360359047*^9, 3.6539173657028084`*^9}, 
   3.6539176231421895`*^9, 3.653917909048762*^9, {3.6539179611907387`*^9, 
   3.653917988391568*^9}, {3.653918228404666*^9, 3.653918272580225*^9}, {
   3.65391830308869*^9, 3.653918322197136*^9}, {3.6539183859838667`*^9, 
   3.6539184358164387`*^9}, {3.653918743776704*^9, 3.6539187656769104`*^9}, {
   3.6539189067840524`*^9, 3.653918912018439*^9}, 3.6539197146679115`*^9, 
   3.6539197660806456`*^9, 3.6539198566077394`*^9, 3.6539199359676933`*^9, {
   3.653920968386397*^9, 3.653920996673869*^9}, {3.6539220174062243`*^9, 
   3.6539220284461975`*^9}, 3.6539221591513863`*^9, {3.6539224815329294`*^9, 
   3.6539224920649333`*^9}, 3.6539225282517333`*^9, 3.653923998106154*^9, 
   3.653924912064619*^9, 3.654881953724143*^9, 3.65488365336347*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Comp= \"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"-", "1.5408341595716017`"}], "0.27920921816769884`", 
        RowBox[{"-", "0.401232964122797`"}], "0.03795032466794804`"},
       {"2.2721550019792547`", "0.17949240425855517`", "0.4555974255223765`", 
        RowBox[{"-", "0.3924252391706818`"}]},
       {"0.7101171934645981`", "0.14303245455449543`", 
        RowBox[{"-", "0.05081371517756503`"}], "0.3891441905390883`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "\[InvisibleSpace]", 
   RowBox[{"\<\" Avg = \"\>", " ", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "1.6170954642937692`"}], "0.2599170957395202`", 
         RowBox[{"-", "0.39909630260217505`"}], "0.03284316875038176`"},
        {"2.298339273875759`", "0.1870306847380158`", "0.45483649362655815`", 
         RowBox[{"-", "0.39172722455665254`"}]},
        {"0.7067211668600883`", "0.14366364418528055`", 
         RowBox[{"-", "0.05012889702851398`"}], "0.38806568371366773`"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}]}],
  SequenceForm["Comp= ", 
   MatrixForm[{{-1.5408341595716017`, 
    0.27920921816769884`, -0.401232964122797, 0.03795032466794804}, {
    2.2721550019792547`, 0.17949240425855517`, 
    0.4555974255223765, -0.3924252391706818}, {0.7101171934645981, 
    0.14303245455449543`, -0.05081371517756503, 0.3891441905390883}}], 
   " Avg = " 
   MatrixForm[{{-1.6170954642937692`, 
     0.2599170957395202, -0.39909630260217505`, 0.03284316875038176}, {
     2.298339273875759, 0.1870306847380158, 
     0.45483649362655815`, -0.39172722455665254`}, {0.7067211668600883, 
     0.14366364418528055`, -0.05012889702851398, 0.38806568371366773`}}]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.653917360359047*^9, 3.6539173657028084`*^9}, 
   3.6539176231421895`*^9, 3.653917909048762*^9, {3.6539179611907387`*^9, 
   3.653917988391568*^9}, {3.653918228404666*^9, 3.653918272580225*^9}, {
   3.65391830308869*^9, 3.653918322197136*^9}, {3.6539183859838667`*^9, 
   3.6539184358164387`*^9}, {3.653918743776704*^9, 3.6539187656769104`*^9}, {
   3.6539189067840524`*^9, 3.653918912018439*^9}, 3.6539197146679115`*^9, 
   3.6539197660806456`*^9, 3.6539198566077394`*^9, 3.6539199359676933`*^9, {
   3.653920968386397*^9, 3.653920996673869*^9}, {3.6539220174062243`*^9, 
   3.6539220284461975`*^9}, 3.6539221591513863`*^9, {3.6539224815329294`*^9, 
   3.6539224920649333`*^9}, 3.6539225282517333`*^9, 3.653923998106154*^9, 
   3.653924912064619*^9, 3.654881953724143*^9, 3.65488365336347*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Eigenvalues = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.8449489742783178`", ",", "0.5`", ",", "0.3550510257216821`"}], 
    "}"}], "\[InvisibleSpace]", "\<\" -- \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.621374789963116`", ",", "0.38407578753758076`", ",", 
     "0.38407578753758076`"}], "}"}], "\[InvisibleSpace]", "\<\" -- \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.6151572321330322`", ",", "0.3819559152815132`", ",", 
     "0.3819559152815132`"}], "}"}]}],
  SequenceForm[
  "Eigenvalues = ", {0.8449489742783178, 0.5, 0.3550510257216821}, " -- ", {
   0.621374789963116, 0.38407578753758076`, 0.38407578753758076`}, " -- ", {
   0.6151572321330322, 0.3819559152815132, 0.3819559152815132}],
  Editable->False]], "Print",
 CellChangeTimes->{{3.653917360359047*^9, 3.6539173657028084`*^9}, 
   3.6539176231421895`*^9, 3.653917909048762*^9, {3.6539179611907387`*^9, 
   3.653917988391568*^9}, {3.653918228404666*^9, 3.653918272580225*^9}, {
   3.65391830308869*^9, 3.653918322197136*^9}, {3.6539183859838667`*^9, 
   3.6539184358164387`*^9}, {3.653918743776704*^9, 3.6539187656769104`*^9}, {
   3.6539189067840524`*^9, 3.653918912018439*^9}, 3.6539197146679115`*^9, 
   3.6539197660806456`*^9, 3.6539198566077394`*^9, 3.6539199359676933`*^9, {
   3.653920968386397*^9, 3.653920996673869*^9}, {3.6539220174062243`*^9, 
   3.6539220284461975`*^9}, 3.6539221591513863`*^9, {3.6539224815329294`*^9, 
   3.6539224920649333`*^9}, 3.6539225282517333`*^9, 3.653923998106154*^9, 
   3.653924912064619*^9, 3.654881953724143*^9, 3.65488365336347*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Stability = \"\>", "\[InvisibleSpace]", "0.2823108086643086`", 
   "\[InvisibleSpace]", "\<\" -- \"\>", "\[InvisibleSpace]", 
   "0.20329420196086634`", "\[InvisibleSpace]", "\<\" -- \"\>", 
   "\[InvisibleSpace]", "0.20045108428761355`"}],
  SequenceForm[
  "Stability = ", 0.2823108086643086, " -- ", 0.20329420196086634`, " -- ", 
   0.20045108428761355`],
  Editable->False]], "Print",
 CellChangeTimes->{{3.653917360359047*^9, 3.6539173657028084`*^9}, 
   3.6539176231421895`*^9, 3.653917909048762*^9, {3.6539179611907387`*^9, 
   3.653917988391568*^9}, {3.653918228404666*^9, 3.653918272580225*^9}, {
   3.65391830308869*^9, 3.653918322197136*^9}, {3.6539183859838667`*^9, 
   3.6539184358164387`*^9}, {3.653918743776704*^9, 3.6539187656769104`*^9}, {
   3.6539189067840524`*^9, 3.653918912018439*^9}, 3.6539197146679115`*^9, 
   3.6539197660806456`*^9, 3.6539198566077394`*^9, 3.6539199359676933`*^9, {
   3.653920968386397*^9, 3.653920996673869*^9}, {3.6539220174062243`*^9, 
   3.6539220284461975`*^9}, 3.6539221591513863`*^9, {3.6539224815329294`*^9, 
   3.6539224920649333`*^9}, 3.6539225282517333`*^9, 3.653923998106154*^9, 
   3.653924912064619*^9, 3.654881953724143*^9, 3.6548836533790703`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", 
    RowBox[{"Experiment", " ", "with", " ", "UNCorrelated", " ", "datasets"}],
     "*)"}], "Subsubsection"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"-", ".2"}], "}"}], ",", 
       RowBox[{"{", "1.0", "}"}], ",", 
       RowBox[{"{", ".5", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{".8", ",", 
         RowBox[{"-", ".2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".5", ",", ".1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0", ",", ".4"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"Length", "[", 
      RowBox[{"B", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"q", "=", "4"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"finaltime", "=", "20"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"datasets", "=", 
     RowBox[{"GenerateUnCorrelatedDatasets", "[", 
      RowBox[{"A", ",", "B", ",", "q", ",", "finaltime"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CompD", "=", 
     RowBox[{"CompUnConstrainedCov", "[", 
      RowBox[{"datasets", ",", "0"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Mlist", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", "q"}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m0", "=", 
       RowBox[{"CompUnConstrainedCov", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"datasets", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Mlist", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"Mlist", ",", 
         RowBox[{"{", "m0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
    "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"AvgD", "=", 
     RowBox[{"Mean", "[", "Mlist", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Dmatrix = \>\"", 
      RowBox[{"MatrixForm", "[", "A", "]"}]}], ",", 
     RowBox[{"MatrixForm", "[", "B", "]"}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Comp= \>\"", ",", 
     RowBox[{"MatrixForm", "[", "CompD", "]"}], ",", 
     RowBox[{"\"\< Avg = \>\"", 
      RowBox[{"MatrixForm", "[", "AvgD", "]"}]}]}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Eigenvalues = \>\"", ",", 
     RowBox[{"Eigenvalues", "[", "B", "]"}], ",", "\"\< -- \>\"", ",", 
     RowBox[{"Abs", "[", 
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"CompD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], ",", 
     "\"\< -- \>\"", ",", 
     RowBox[{"Abs", "[", 
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"AvgD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Stability = \>\"", ",", 
     RowBox[{
      RowBox[{"Det", "[", "B", "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}], ",", "\"\< -- \>\"", ",", " ", 
     RowBox[{
      RowBox[{"Det", "[", 
       RowBox[{"CompD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}], ",", " ", "\"\< -- \>\"", ",", "  ", 
     RowBox[{
      RowBox[{"Det", "[", 
       RowBox[{"AvgD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.65392254629968*^9, 3.6539225519468637`*^9}, {
  3.6539238228204155`*^9, 3.6539238237266674`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"\<\"Dmatrix = \"\>", " ", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "0.2`"}]},
        {"1.`"},
        {"0.5`"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.8`", 
        RowBox[{"-", "0.2`"}], "0"},
       {
        RowBox[{"-", "0.1`"}], "0.5`", "0.1`"},
       {"0.1`", "0", "0.4`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}],
  SequenceForm["Dmatrix = " MatrixForm[{{-0.2}, {1.}, {0.5}}], 
   MatrixForm[{{0.8, -0.2, 0}, {-0.1, 0.5, 0.1}, {0.1, 0, 0.4}}]],
  Editable->False]], "Print",
 CellChangeTimes->{3.653922557728367*^9, 3.6539240022542434`*^9, 
  3.65392491470525*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Comp= \"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"-", "0.37157273035689753`"}], "0.7838383303773415`", 
        RowBox[{"-", "0.22821465632566468`"}], 
        RowBox[{"-", "0.05230213799088623`"}]},
       {"1.2953706040787683`", "0.03125566159232643`", "0.499437248369094`", 
        RowBox[{"-", "0.060020621602902835`"}]},
       {"0.45413728971014966`", "0.10050858385438968`", 
        RowBox[{"-", "0.016566842319984416`"}], "0.3353358443956076`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "\[InvisibleSpace]", 
   RowBox[{"\<\" Avg = \"\>", " ", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "0.6839147704797985`"}], "0.6312925478552793`", 
         RowBox[{"-", "0.33621152235399654`"}], 
         RowBox[{"-", "0.06951008738442759`"}]},
        {"1.5241716848983842`", "0.030965027476778928`", 
         "0.4070405644575084`", 
         RowBox[{"-", "0.034709851380062676`"}]},
        {"0.6518328780993128`", "0.1300028997611364`", 
         RowBox[{"-", "0.008789598443754494`"}], "0.22335615658929592`"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}]}],
  SequenceForm["Comp= ", 
   MatrixForm[{{-0.37157273035689753`, 
    0.7838383303773415, -0.22821465632566468`, -0.05230213799088623}, {
    1.2953706040787683`, 0.03125566159232643, 
    0.499437248369094, -0.060020621602902835`}, {0.45413728971014966`, 
    0.10050858385438968`, -0.016566842319984416`, 0.3353358443956076}}], 
   " Avg = " 
   MatrixForm[{{-0.6839147704797985, 
     0.6312925478552793, -0.33621152235399654`, -0.06951008738442759}, {
     1.5241716848983842`, 0.030965027476778928`, 
     0.4070405644575084, -0.034709851380062676`}, {0.6518328780993128, 
     0.1300028997611364, -0.008789598443754494, 0.22335615658929592`}}]],
  Editable->False]], "Print",
 CellChangeTimes->{3.653922557728367*^9, 3.6539240022542434`*^9, 
  3.65392491470525*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Eigenvalues = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.8449489742783178`", ",", "0.5`", ",", "0.3550510257216821`"}], 
    "}"}], "\[InvisibleSpace]", "\<\" -- \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.7563111784665029`", ",", "0.5008345670639895`", ",", 
     "0.36146567761155113`"}], "}"}], "\[InvisibleSpace]", "\<\" -- \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.567652960871979`", ",", "0.42683901522870504`", ",", 
     "0.26719729280139976`"}], "}"}]}],
  SequenceForm[
  "Eigenvalues = ", {0.8449489742783178, 0.5, 0.3550510257216821}, " -- ", {
   0.7563111784665029, 0.5008345670639895, 0.36146567761155113`}, " -- ", {
   0.567652960871979, 0.42683901522870504`, 0.26719729280139976`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.653922557728367*^9, 3.6539240022542434`*^9, 
  3.65392491470525*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Stability = \"\>", "\[InvisibleSpace]", "0.2823108086643086`", 
   "\[InvisibleSpace]", "\<\" -- \"\>", "\[InvisibleSpace]", 
   "0.2656488380882396`", "\[InvisibleSpace]", "\<\" -- \"\>", 
   "\[InvisibleSpace]", "0.16123254661380867`"}],
  SequenceForm[
  "Stability = ", 0.2823108086643086, " -- ", 0.2656488380882396, " -- ", 
   0.16123254661380867`],
  Editable->False]], "Print",
 CellChangeTimes->{3.653922557728367*^9, 3.6539240022542434`*^9, 
  3.65392491470525*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  StyleBox[
   RowBox[{"(*", 
    RowBox[{
    "Comparison", " ", "of", " ", "methods", " ", "for", " ", "highly", " ", 
     "correlated", " ", 
     RowBox[{"datasets", ".", " ", "You"}], " ", "will", " ", "notice", " ", 
     "that", " ", "in", " ", "this", " ", "case", " ", "both", " ", "methods",
      " ", "give", " ", "nearly", " ", "identical", " ", 
     RowBox[{"results", ".", " ", "This"}], " ", "can", " ", "be", " ", 
     "understood", " ", "by", " ", "virtue", " ", "of", " ", "the", " ", 
     "fact", " ", "that", " ", "in", " ", "this", " ", "highly", " ", 
     "correlated", " ", "case", " ", "all", " ", "tanks", " ", "display", " ",
      "nearly", " ", "identical", " ", "behavior", " ", "and", " ", "so", " ",
      "the", " ", "timeseries", " ", "are", " ", "basically", " ", "the", " ",
      "same", " ", "across", " ", 
     RowBox[{"tanks", "."}]}], "*)"}], "Subsubsection"], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"-", ".2"}], "}"}], ",", 
       RowBox[{"{", "1.0", "}"}], ",", 
       RowBox[{"{", ".5", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{".5", ",", 
         RowBox[{"-", ".2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".5", ",", ".1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0", ",", ".4"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"A", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1.0", "}"}], ",", 
        RowBox[{"{", ".5", "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"B", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{".4", ",", 
          RowBox[{"-", ".2"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".1"}], ",", ".5"}], "}"}]}], "}"}]}], ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"Length", "[", 
      RowBox[{"B", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"q", "=", "10"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"finaltime", "=", "30"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runs", "=", "500"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DetComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"DetAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"VarComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"VarAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"EigenComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"EigenAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"r", "=", "1"}], ",", 
     RowBox[{"r", "\[LessEqual]", "runs"}], ",", 
     RowBox[{"r", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"datasets", "=", 
       RowBox[{"GenerateCorrelatedDatasets", "[", 
        RowBox[{"A", ",", "B", ",", "q", ",", "finaltime"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"CompD", "=", 
       RowBox[{"CompUnConstrainedCov", "[", 
        RowBox[{"datasets", ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"DetComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"DetComp", ",", 
         RowBox[{"{", 
          RowBox[{"Det", "[", 
           RowBox[{"CompD", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", 
              RowBox[{"2", ";;", 
               RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"VarComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"VarComp", ",", 
         RowBox[{"{", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"Eigenvalues", "[", 
                  RowBox[{"CompD", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"2", ";;", 
                    RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], 
                "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EigenComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"EigenComp", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{"CompD", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", 
                RowBox[{"2", ";;", 
                 RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Mlist", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", "q"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"m0", "=", 
          RowBox[{"CompUnConstrainedCov", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"datasets", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", "0"}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"Mlist", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"Mlist", ",", 
            RowBox[{"{", "m0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"AvgD", "=", 
       RowBox[{"Mean", "[", "Mlist", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"DetAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"DetAvg", ",", 
         RowBox[{"{", 
          RowBox[{"Det", "[", 
           RowBox[{"AvgD", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", 
              RowBox[{"2", ";;", 
               RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"VarAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"VarAvg", ",", 
         RowBox[{"{", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"Eigenvalues", "[", 
                  RowBox[{"AvgD", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"2", ";;", 
                    RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], 
                "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EigenAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"EigenAvg", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{"AvgD", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", 
                RowBox[{"2", ";;", 
                 RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"DetComp", "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"DetAvg", "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}]}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Determinant^(2/p)\>\"", "}"}]}]}], "]"}], ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Det", "[", "B", "]"}], "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}], ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"VarComp", ",", "VarAvg"}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Var along dominant eigvector\>\"", "}"}]}]}], "]"}],
      ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Eigenvalues", "[", "B", "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
         ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"EigenComp", ",", "EigenAvg"}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Dominant eigenvalue\>\"", "}"}]}]}], "]"}], ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Eigenvalues", "[", "B", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6539185268033485`*^9, 3.6539185702262917`*^9}, {
   3.6539186121978235`*^9, 3.6539186293159304`*^9}, {3.653918679990329*^9, 
   3.653918709632764*^9}, {3.6539189578787766`*^9, 3.653918982008247*^9}, {
   3.6539190194375925`*^9, 3.653919043961091*^9}, {3.6539193561994295`*^9, 
   3.6539194114934416`*^9}, {3.653919447710757*^9, 3.653919456976403*^9}, {
   3.6539194899939704`*^9, 3.653919512111382*^9}, {3.653919546710938*^9, 
   3.653919654404422*^9}, {3.653919736308115*^9, 3.6539197539140697`*^9}, 
   3.65391991723909*^9, {3.6539199702187853`*^9, 3.6539201307520275`*^9}, {
   3.6539201984307146`*^9, 3.6539202086771684`*^9}, {3.6539204144725456`*^9, 
   3.6539206159459567`*^9}, {3.6539206561744614`*^9, 
   3.6539206917597833`*^9}, {3.6539207764110575`*^9, 3.6539207767704334`*^9}, 
   3.6539208998018136`*^9, {3.653921142604078*^9, 3.6539212077273307`*^9}, 
   3.653921268214641*^9, {3.6539214568614864`*^9, 3.6539214824467497`*^9}, 
   3.6539215137701087`*^9, 3.6539215616708355`*^9, {3.6539216033272533`*^9, 
   3.6539216101287317`*^9}, {3.6539216516525955`*^9, 
   3.6539217333163357`*^9}, {3.6539217671157303`*^9, 3.653921767209481*^9}, {
   3.653921802260651*^9, 3.653921877221724*^9}, {3.6539225869833465`*^9, 
   3.653922645301532*^9}, {3.653922793881508*^9, 3.653922800475272*^9}, 
   3.653922881563177*^9, {3.6539238596772604`*^9, 3.6539239744651155`*^9}, {
   3.6539241325550976`*^9, 3.653924251086238*^9}, {3.6539243758321915`*^9, 
   3.6539244694717073`*^9}, {3.6539245307815647`*^9, 3.653924590759509*^9}, {
   3.6539252264976945`*^9, 3.6539252748661404`*^9}, {3.653925393270623*^9, 
   3.6539254061649647`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
z8WYEabx5VsagSK4LvT0z6okM2oV1SIjVi+CWevI1SNpZhSeLhPx983JOrNH
yWdgRgZsvOc34osgra0guUaWGfH70xX8bCgCzM5pCnt5ZrR9sCszuVQEuTRt
suUKzKjWarq9n64YUiV7ikNuMSO/6WadNtFiYBVRrjk6sTXUCxbrnhSDzQPc
IPFtZnS2Mdqh/EMxPLgo8eTryfqyqDtxXnox9EnnNc+e7Fecbh76taMYxK+O
+mBPznNje3g2bqsYnKpYzsnIMSNl/xu5oWwlEF86+csAMSPmw/PSH0/+exYJ
uR7zy5zwt6JudTUpAY9M39m4Gyf8p7cfOfiXwLX9/KUKiRP+6hMLlgUloCEp
N+0tyoxkGpvsjYdKoMm4m4XohB+lWC6BzmEJpFXQbAtfPeGfHhn84Hwp9N87
6GXhZ0YJbK5cd5RKIfNbyH4+zwl/f9Psm9alQD9KjCXhPuF/eF9SJKIUCo60
LFg5mdGRlQSev7IU0hhrZBdOvnfr9FlN7plSWBemC3jFcMJfnWLuFFkZKFv6
ueKomJF+44YN7ZUyCLqvIjZBcsJfbPSI+GEZ9HmYjlccM6Ht9PqAf45lsGsv
kmC4z4Rq2LLZNxPKwObcx699myf17x+WsdhYBmfectIzrTAhjcN3YlPLZbB0
wNzDvcCEzlg/axygL4fNLnpiwsmT+p9WUW8XK4fLlnxFJYNMqFhddLpetxw6
iMVGZE76w6WRy+q7ezkwTSw6fMGf1L8Y6UFeRjmU/Mb5jmCZEHPG6se0znLQ
ounaWz3pt0m2oVPx2+Ug4Po+ZSaPCWX5Y7+GsX8HqvJz5kXpTOjVYfp1P/Qd
OpeVRZ5/YUIy1iF1bs+/w0XVwY5/kUyIcsbx/puA73AnwpLYIehEX9QNJ14W
fgdMG3P0oBcTSmhUsng2/B3uKryU/s+ZCZmJXdvXOfoOJI/40tReMSGRDHYf
tQsVwMMt/N7aggkdsRGxKCpXwNHtGiMnIybU7P8rWcamAhZmT3faPz7Ro8M+
IdHICjA9SjXUe8CE9K2rai5XVQAH7rWHxB0mxDeTqnJutgKUrOyTSGVO+KsH
jp4mrwTqulOcLSIn/Btfm9FdrYQGlhmeD5eZkK+Y/g6JRiXYE/D9FTx3wj/j
tufB20oY+DJXOnj6hD+7IOPWl0qgqK13czjR00X/U4lLTZWwe+PLfXrSE/6H
x1emf1WC+NKDo9QT/XWxXqwcZKiCM994FES3GJHiTLdSh3gVPOJ9wlH/v3r9
8PtQg14V1Ggz7NydZkSTjUkmFR5VYPGp6mnfICPKEPPbys+sAuKiqWrtDkb0
KsPuQ3pXFWR1CD4bb2BEMuxP6BL+VEH/is4L/QpGRB4gHx/OUQ3ams3EU/mM
qP/w8mV/2WqgYec6rZ/OiBKsmb9/MK2GqRpPq7F4RmQ2c3DbMfDE3+7BlFY4
I7r2cKHfqqgaDIsLlrv8GNFRY4eRyUg1rK7pEt0+ua+axUrXnxxXw5qJfGT5
G0YUmpHgos5TA1HW040XrRiRPrsPtdLdGlBMU8sLfsaI+AKsY8C2Bi602d7e
1GFEm4eP+MSiTvz7tRxU1RhRjTUqFaiuAePIseUvdxiR7wyfwvm5Glh4kci7
eHKfqj9k6GWjwIJs/f0fF0QY0Zmm/af0glgQZMb5aPAzokWx2d+kmlh4v+T9
8PVZRlSY0fru0AkLN98oa3qxnvBnL6LYTsSCGrdyqTv1Cf+A2KhlHBZunCEM
tSBkRIxHHjwzK1h4XJbae3OPAa2Jl45YUNRCkQmT8u5vBtRvk3XWlLMWDOol
/0XMMaDvmQmmRoK1EJO5nXhqhAF9mQ3N1ZOrhU+V8X/edjIgTw6fP9qatXBS
+7UVDQzohcY7aQ2zWuj2v/hlqJwB3Q+09rj/rhaCfRkfd35jQCI441bloFpQ
P0sbH5fMgNiOHzHcTqoFFHkohKIY0JG4irZscS3IaxoslfozoHkb9EUaXwuP
DYRdjlwZUEumyA/x0VrY4ro5ynwy/+TO8l25/rsW5MhNt3dNGVA4B9erq5g6
eJLh1Pb1CQN6q8FQeYmpDhbeV7/lvM+A9ANJCHku1oGNnqipjhwDUsDtK56V
rAMVr7U2PVEGdOn4dzCHSh1k3paR4eFjQLQSs4OsT+ugWaJFNo+dAW3bDHIx
2tUB38Jgyl9qBjSS2fqMxqsOroa81CI9pkc1szXZ5J/rIDR/+n3POj1K5Sja
JMquA9Phr7pPZunRR410yePqOvDNl05I6aNHVoGxbn+76+A6SWNfZiM90sAF
4//M1YG399nGlyX0SPLYg3Zjpw6qb7xvWPtKj85IOGquUNSDS0wii1AkPSK2
tYz7yVkPf9U8RAS96dFSpsHcrGA9vOha+v37NT3qnNXgn5SrB5IwT3hpQo+K
OZRsRzTrYfQXjWauBj2K1rhZ3m9WD4zSQtmF8vTIJVD4uOtdPbRMYw/eXaNH
xjie221B9aClZSFIzU2PlI7ZAnFJ9UD+xu6mCR09uipB219XfLJ/xU9ipn90
iMmWkKMaXw/fx9DL3UE6tJ+5Y1g+Wg+keWsN7wvp0OTsckbR73rgeMVLlBlI
hxo4ptZyMQ2wEcvq4m5GhzI1+sSymBpAR58ug06eDgUF4p2/XmyAM/VdHo+4
6JA9rrIxUbIB7DgIjQx3adHj4zyqOJUGONq4PSrSQ4tAIlU96mkD9Bgx+Yxk
0aLztp+jQ+0agCE1IvWRJy2iyAqYDvRqgLcvvO3K9GjR71k33o+fG0AzVVqN
QJwW9XG8tvLMboCkhx5xN+lp0XeNFyWuNQ0wlMpk83qJBsUH6h049TRAROln
84J6GuSBU5N3mG8As1KX6L+xNOjF8S0/290G+HShEvv4NQ1SlZDqsaRshIoq
T/rhezTouu3V02ZcjbBe+JLbhY8GsWWde2os1Aiqv5u2NQhp0OEsa5q+fCM4
OhCrmoxTozkOqt+PtRqhjEdroayUGrVoHF/XfNEIA4WfQPMTNfoWuOX04H0j
tDa7WN2ypEZhuJ91d4MbwUcnvyXkDjV6ezxGfie5EW7T8VrAeWqkJ9F9X66k
ETQCD+u0j6mQvG1j5M3mRricS8Y3P0aFLmWVT0iMNcIxreX0YjkVopnLuSCy
2gih/ZdiXkZSoS2OJAtBgiaQz2Nsd3xFhUY0Igr5mZvgY46DM/1DKlQd+HGf
h7cJ7hycNZS6RoVScM6IW6oJcDllTf8YqNDHY1sfTtUmCCzbrHy8SYleSjzv
PGXQBF+Ihb9p91Gih7Y6LEz2TdCw+KrvoJgSSWbd06X1boKnEYo5SlGUiGtO
LoUiugk0LjbHyDlRIiJO8WXinCZg3u14sKxHiZY0LgtjsE2A6qm55eUoUUfg
f47/eppA7Zfkzj1eSlSEY8LuzJ/sx/T+Eh0NJYo+JiPd3G0CJZJLGK8tCuQs
caDymxIHc8qmB/mjFMjYdj1skQsHI1aLymH1FEgpa350TggHd/+mhVzOpkBX
5oa5p+RxkAwux47hFIiJs8NsVAsH5P0dBU4uFGhfoy5v4AUOuB7r/Lr6ggJN
BJbsdL/HwbnZi1VhGhSoAZd5sz0YB7tXqObTEAXKPI73xCfjoLVscNPkCgUK
lAhtqy/BgQbbK80Odgpkb+vNWNOMA4a+uwMj5BTocZbT4+9jONCNWvjhs0uO
bs5ZJRav4kCS8rRx3w9ydJ7T+GceAR6Epe70lg2SIwrNR1ezmfEQVOqdKoQn
R78D775O48VDsVQpVqKcHPXhoCpJCg/NGnkUbZnkqOz4OlG8Kh4uGYV1z8SS
o3gJPuXPBngoSpz0fhNEjjxsOT+F2ePhm0MXn/cHcmSaRT8c5I0/0XcXP7LX
5Eh1jvg/v2g8hEt4mf8xI0fXOfdNvHLwsHyBRURJjxyd0vyd44bFwy19boYD
NXJ0GDiz9a4XD0RLDXfJ7pCjOdyA1JsFPKQwavcZS5Mj/HHLB7s9PFycYfOm
vEaOvknUNL+kagaputOi27zkKMy2kO7FmWaInd5KZTtDjt5kpWk9E26Gq1n7
cvbM5EhvLib+qUIzKKspvd6nJEfynMHzOo+aYfqXwudUAnLEq+lxWcu8GQQY
i5++3CNDNEFv7NScm0FmaW7s7hoZ2sJZfFcJaYa47np/iR9kaOj4KUYxpRlI
CqP9L0+QoWoJjTvypc2gLRlNxtVPhlJsFYNkWppB4srNNyRtZMgnS3pAcrwZ
NA/qjCfqyNDLOSFO0bVmGJkTXYorJ0MPOXmMhQhbIGBv/rZ0HhkS12TLuszS
AlbFjvTFX8kQVxDNxkW+FrgtSFV7EEuGiPAEEudutECPeGwqbSgZ+nn8x4Xr
Xgvc+i83ctaHDHVILDedNmwBGimTV7bOZKjIdpKa+VULIEtN5mI7MhSV1fuQ
zqcFtnhPCaaYkiHnOVwMZUwLsN7nopPQJUPGnJUzJN9aIP5O6YLFAzJ0RzOP
j6C2BXy9CggkFMjQlaAU64PeFvgWHr0VIU6GmPBRpbsLLWCwd+jkyk+Gdo/9
Dzf3WuDSF0WPVU4yNCHhprBK1Qo2Xwj1JmjJUIPtK/+lM62wEaCBbmPIUHqW
We+8cCsYOHpFnN8gRYFzumzTCq2Ax/fz2cyQIntONYOxR61g9kz0NG8PKXqk
eSt90LwV9trIMuVrSdHNIMnVHudWyHcP16zLJUXn8VdEO0JaQcFpajk2jhSR
Yc69b05pBdM4O9+uj6TotwRrQ0NpK6TcUQ/UdiBFfbaUlNiWVtisjv943YgU
lWUdPagYb4VbwJKrp0qK4uc2o0rWWuHqO3uhfnFS5MH5czKfsA1kwqUSwrlJ
kanmGE8OSxv8t4H9HUdJilSDuizT+dog8cKG1q9NEiSMbyhKvtEGdx33Ql1G
SdApTPnf+HttUMOxl6xZR4IOJXJkow3bwLK6+at1OgmasU30DX/VBvZHb3Xa
A0gQPiu8K9inDe5NsaZY2JKgb3O+rP4xbfCG4Hy1qiYJ+sTprOf9rQ2Gdy87
2EuQoDeatqkfatsg4MK3ugl2EqQXZPLrfV8bVOjulgYeECNZ/ONrjj/aQFrE
jN9rghjxYu69td9vg2LJ9ju4amJEIylXa0XdDvodq+IP44nRhq0Ymfl/7XBj
NfTV1ffEaCiL/57JtXY4pP1w9okOMaqeOxNhcKsdfuTZaY+LE6MkTqbxJ9rt
MO35/kMJMzHy0SQ7/8iiHegymsOW14nQy6B/L9Rd2uGuq/gb13YipIZfy1f9
1A4lDGuOjulESBwzv6uY2g5d5lJCox+IEJfksIxCWTv8t83wJPMJESKwa/eC
1nYwYzv4syxChH5m1bZLTbQDudyxeCoNEeqYK2YSW2+H4fNrlqMLhKiAM1NH
mKgD0qzeM4ZVE6IozfgkAdYOGElWGu8LJ0TOQZ8WeS91wDbbr5ZkC0JkiPcS
PC/dAUWunz6RyBGiOxgnhzP3T+xL6x8ITxOiK5JW1WxGHSBv+jj6y28CxGBn
RMzyugPUv9ZSztUToN0srbv0vh2QsPLrTF8UAZqYUw6liu0AeNUt7GBJgOo4
YYQ0twN4zzum9iIClK55/SxhXQfsYctGV5kJUGAQr+lhXwcwT6ld7FnEIFs8
R+7ejw4QcOead63CoEcY+j9b+x3w8wGHDUEIBt2UJJZeo+6Evg3iwSfGGMRt
t+e+/F8n3AwcKI8QwyCy7JWWhWudwCOfR1RCgUG/56bpZ251QuFPhRbX78fQ
wznwaFy7E7jNjsjePj2GMs2WhCGLThD5JF5lQHIM8UHVC70unbARkXxHPvsI
PuALBDo/dUIEuafbZbUjMMWk2bekdoIzg3/Ehd1DUJWMqWgs6wSH6UujkvGH
IGwXRFDb2gkGXPnGr+UP4VS2u2LlRCc8N8DbziwdwL85h+DS9U5IWXYj8A05
gBlOi8ECoi64Z7L+z078APCaT7m+sXaB/q/E8OzJf5Ad9PBZxqUuyDw3zn3D
+x98wt/JTpHuAnYKdkH+q//gDUZ6M+H+if+PGi+3wb/wRFJIMsaoCyTinwnc
cf0LsnYX3CJedwGOJ83ai+8v8Gafxof4doFTBXuSXO8+UM1T0wbEdoH5k9nf
Xu/3YYOTQNMntwuq3umMaPLuw5Dmn1j3ui64NvKA43vvHlQGLc0693dBcnlx
QInLHiThJy69/dkF/OWCbmqX98AH02vz6m8X4AVvsoYO70Ip59xYGWk3YKYM
nd977wKfpJ6rKH03cDRmfmAR3YU4zaFzRWzdcORt1WI4vwO0dmo4ofPdwLry
r90kfAfcgtpe5Ap0w40obD7PrR3YzrpFIyDWDVlJZZe/7vyB53hsfiZ0wxpn
SsLPjD8wPCepwavUDZ+JpQLXn/wBFUzxbqp6N2yN3eRroPsDNZxXY8/pdkPN
+7Udw8ZtEJLMkEk06QZvM/marrfbkKp5bpbLuhscPdl6aIW2gdUuzivWsRtY
KCIbuH9ugW8Q6yU2925YuNdmR/llCw6yQtoj/bvhfvcLwrZHW2CFp7RhjugG
h1zVsWcMWzA958kUmtANLuG4yJG2TdDAHJfSZXTDdGpuAr/PJuA43+oEFnSD
UYXHtcfymyAhuXVIWdkNvTp/zj/HbEKO5ssk38ZuENy/UaBeswFn7H4qkHZ2
w4tlqsP/nDcgJMhw0WOoG95510V1Sm8AcfaYP8FMN6wr6W/qH66DA15T0HW5
G/JPKQz11KzD4lxX78FWNzxrGXfi/bAOuhhlB6fDbshcInhnoLAOnZyNbHuk
PWBP7fj3Pfk6IEmZ6tf0PZAic+nJ35g1KNYsN9hi6wH9+9bS9RfX4KLdNWLb
8z1QvzKKUytehc9BOemrAif2qQP/TPlVoM6+eNdSrAcy1abIW/p/gws+cXUJ
eiDKY2k2z/Q3rM+xh5oq9UCMzjaB/sEKGGEiRBfUe6A0Pm+hN3QFBjnpRox0
e0BHzsGC9vIKKEp+fD9t0gPOScobdE2/oEKT6Ky+dQ+Y8t96NmjwC67aOTeM
OfaAyshjP8OjZUgM2n3+2L0HjPsWiAvil4Ex25ZyyL8H7vFQ6zTILIM3/tc3
jYge2NsU8Pk8swR7cyZqvQk9MNC6kiPovQTmmOnt+xk9kBpaluojsASTnDqf
Owp6YGxZ/OhL/yI8kOy/cbeyB0RDzxq9cVmEes17U82NPdCiN6tDw78IYnbN
7rc7e8C3RbbeYOgnZATJXWwcOrEP/e/beP8E9uyqFtmZHiBlxBtJi/+EILzY
S+xyD2Q0/GfcsPQDMPP59De3e2A3deY+ccIPsMNcLq447AGlzjSZo4c/4Afn
10cSZL1gdrebOp/qx8lc9t+/Evpe0BW3OcPWtACtmtEJ19l7ATfgzyrhtgAy
dkxyBed7gfXxDU/qmwuQHxS4cPVKL6RQvdoP/zcP57LJPuaI9QIR7bXc7sp5
iMR/EOBHvTB3Q2ik2nkeyOf/daUr9YJD+OwNXdl5cMI42PM87AVzwXTjLNJ5
WOVcZ03R7QV3f5XUtI45MJA0rzj7vBeW0jim7kfOQa/mvF6CdS+IfpuEVIM5
uG2nT8D5theo/9VVJgvMQXnQcGq0ey98i2uSUfo7C/zZ6oqnAnqhKmeNJLJl
FhLw7b/CI3phcfLukXfMLNDP3w5m/NIL6wImbWwvZ8EdU3ctJOPkfOfXBCqy
s7DDeWOQprAXLOSsd9hPzYKZZMlb/8pe+BVZbu2xOgOjmoJcFE29ULh/x84d
PwP37DJrvTt7QYfMRZkleQZqg84/Ix7uhdvp93kkXGbgWnY8mftML9A5iVX9
eDIDafhT2cfLvTDv52TNeWMGTs9/uue8fZLPrV7ffo4Z8MNQb/497AXmzM6/
lEfTcMTpHeFI1geLMzu932emwUYSI7lD3wc99HMCY7hpmNV0Grdn74M20xLC
F9+mQctu23XjfB88soj20I2YhuYgq/PWV/qg4pWVVa7LNEhlL+JWxPogLKvH
/tGLacjFG5mboz6gpL3z577mNJydH6dZVOqDnzr9r4PlpiEU86jA5GEfRDVL
plMLTwMpV4/GnG4fGAS9sKg5Ow2Oknf3DJ73wZwl3UgMwzQsazbFTlr3wX6Z
fUEU0TTo2wHovu2DMyoV4xq/p6A76PvsiHsfhCvlcAQPTIFc9nXvRwF9UA2O
NTjsFJTiv10aiOgDi87K49nsKeCb5+1Q/9IH8Xl1VW3RUxCDSbbpzugDX+OY
I5OPU0DLxcl8r7APstcDUqKcpsBNMrKsrbIPcO5xMrdeTsGmJv0TpaaTeFUf
8KoZTsFzO78jXGcfCLXnUCRqTcFwEHGywnAftCoozzGrToFytsut+pk+0JMv
DAxRmIIa/N4i/Drh5201sCU9BULzdgHV233wl4fE+qzYFCRjfgveOOoDgSJX
w13BKWDlMu0rJ+uHcJcGysf8U+ArOeMgxtAPDjn8ved5puCv5hP2YvZ+UBaI
dZI8OwVWdgPVwhf6gcUP5+XEMQXTQfcN8670QySxSTCOdQrUs1uIr4j3w5sJ
vM0hwxTg8PIZWagfvkvcu0FAMwUS89V3+ZT7YUqZTSafbAqyMBJrXx/2Q5Tg
DY/fBFNwhqsw9LxeP/glF9yP/TcJIZICYknP++GQoCglZnsSCLXSRs7Y9EMb
q79s18okONiddY572w8vp1ZJuOYnYTEo5iy7Rz+YjFiTmY1Ogk42c2NUQD8Y
03QSRHVNQic+yJQlsh9SiQ1agxsmAc2TU4V96QfhMBrLG6WTUIjxyKXP7Ifi
vYClD+mTcJHrUC2osB82E+94qkZNwmfJN3+oqvpB4OvGOz+vSaDU2vj8sakf
PPN69i/YTYKLnYU0WddJfnlrLlR6k7AetDDlOdwPWtpDEVduT4JR9lMPwtl+
ON8gOe1yZRIG8SMX3X71g6wg/e464yQozj9sPdw+WQ97ruS4MwEVmM6X7476
gfXiPQaq4Qm4yqXIsE82AIr2wleSyiYgUbK+2IFhAIy4+8auR0wAo5a09jb7
AEidrfWssZkAT7vSf7YXBuCMaMnoTeUJ2AsS+rJ2ZQCezreR5XNPgHl2ltxL
8QHg/8Opyro7DuP4Cz+W0QA4eDWV2rWOw4P5hI9mygOQsPf3AT52HOoxbFd+
PByAfzH9uWwW4yDCFdZtrDcAr0M+NFhLjEOGJM2rmecDUMKlctBDNA7sWj6n
ntoMAHdwWLBSxxgE2BFUjr8dgABaJYqZ8DHABL/T1/EYgKXhXbtUnTGwy/5D
MBwwAJevBpIknRmDebz1V83IAbi2ljEzPz0K2vNLin1fBsCWUczCLWkUWjHP
Vh5kDgB5ic6Ru8EoSHNNBncWDoBLLGfJMdco5EtqX1epGoDwm9hn5KMjcE6r
d7ClaeBkXncfzA8fgXA7Fac7XSf5zpRYUN8bAfJgHFfT8ACQ7rx4LUg6Ak7Z
qE5udgB088y5BKuHYQVf8az210l+Oal3ue2HwWBehFzmzwC86mnx5+Qbhl5M
Xnbl0QCMeu37iY0PgQLXpfuS5IMwnuJO6BU8BOWSKZulDINArcj36z+5IeDX
4ooU4RgElgpBM67tQYizi5IsvDAI+pM8j8O+DgJ9MMOE4NVBmBJbYYjWGgT3
bH+3b+KD8Cac2U2BbBC28SQXLssOApVakG522QCYzbviM5QHT/rEVXzO9CQO
zF/zixqDgL69OyQ4PQAqXK9oU/UGYfqnSylHcz/USq4WcJuenH/XxVzBsR+u
aZlpfrEZhMQpRZFPfCd9Yje7x+k0CGuXuq4wj/TB6WDduBiPQVA3Vi+b+tgH
ftmDcDpwEOpvEjqR3OiDA/yDuYjIQfCLeqcfudILNvOt3kyJg1DF/swzOaEX
ZjG3+D9lDsLVCOUKCbVe0ODCdtAWDYLzbJ6rGXEvNEtK2gZUDUKJnuKeTHkP
SGkVMVPiBqF7w5K32bIHcuyulPt0DQKFa/Iv+nM9cDY4/QnJyCCw1wsZXBju
htBs7mP32UH4rWLJRh3cDcTNscmYlUFo0MbNdN8+mXvnWW67/BmEdHWczu5R
FyxjQpb+HQ2CiARrBK9dF+hyUQa+JR+Ct13uAjI/O6Fb0lNol2EIpKkEjBX1
O0FO66jvFccQBPNyjt8b6oBiO8c3mxeGgPXwJsVj9Q7gC95kt7k6dDK35q1Z
dbVDTLZlzW/xIZh8OBsUeq8dqJt/GFrIDoFEWzB1W1cbuM0bkCwpD4HJs8bi
0w/bYBMzlvFcYwjk1V0b3w23wjMuTZV5vSF4Kr78eutpKwxLdq0Zmg7B/keS
euelFlDWUgqbshmCuAlSu1OvW6DKrkFMz2kIFm+PClQStoBQ8M3RUY8hKBIJ
CXgW2gzJ2WXO2oFD0HC7N4L2QjMwNwtzD0YOwal/9pn5ZXjwnc9ufJg4BNy4
VRE5VTz8xVw068kcgk/WAf0V8ziw5Eqkul80BFX48BoGFxxMS7LntVcNwYvk
Iy5pNhyoa4WrK+OGYHrt723B0iZotKPdwXcNgeX4FPO0RhNIBPtG3xoZggGv
b//k/jRCVjbhzYbZIUjQ4WdTiWoEzub302hlCE7H+t1ak2qEkPkdj5o/QxD4
Ler82ekGICSw5ZU+HoJ8VlWhXu8GeMX1q/U7+TDocc/27F1tgEVJEytxxmGQ
U5Z47jNcDzpaUwwlHMOwnpz+wNajHtrtHpdc4xmGO+af6jMF6wEF92nnXx0G
qkoNmgsTdVCYrXpwRWIYfAQdzAf86+BCM/5LtuwwFM3GjuTfqIPP87Lyl+4O
A0e/fUjWSi1QElT9SNMYhgorWtqShFp4zyXmd0F/GCjsY1GLWi2sS+ZfSTYd
hgFdYctRklow0uLv+c92GMxNDAcrX2Oh3y71VbzTMCxl79mGzdSAYvCZ0xye
w/DZ0M2N734NVGR/rvwcOAzSBbm1ZjXVINDM+JQ1ahhyNwjn5QSrIXE+gDA8
cRgMG6KNvyZVASMBWRpD1jCEkrC9c2epAk+uD0rBRcNwb+FPSrtfJexJ/luh
PtGx/DV2h9cElWCu9TrEDzcMT8s7a23eVsC43dp18u5hWIw/MCra/A4Pgl8M
eY0Mg+2/hrvXX36H+uw5J6K5YXj0Zk9jYbEcRJr1znxYOfEvcKHFmZRD2vxQ
3dGfYcgQX5RqnysDdgJ1k/fHJ/EIay1uGJVBAFc7+V/yEdiZuS11ba4UjiRv
57xhHIGKHkO1j89KwU6r9v4fjhHARgQMbf0ogXk7qS07nhE4/Svhj5V5CWgF
F0euXx2BIQbCxYPVYmjNviplJTECCaUvrWNfFYN0c8bEL9kTW0ZW8O6/Isid
P/fhxd0THc/4w0jtUQTnCOIv/NQYAaKnjD2zVEUQznWq+Zn+CDhSulL3RhQC
qdQni1nTEfgYMKo+frYQnLSo6AxsR0BYmxQRfyuAFTuvwgmnEdBKd41TlyoA
/eBjzSeeI9AzZqHX2pwPvdlv94cDR6Bo/h7YaueDQvNWnFbUCCRK0/TF9OZB
6fxL1J84AgGbOvWtO7nAT7A4p5Y1Al0uA7uuXLkQx2Xk01U0AvwSzl+bb38D
WqlxftXqEUgKz3tRZJcD7lpana24EVgRJBC9n5QN23bdtordI7AsZyiU3ZsF
z4OVWXAjI3AzNTFlkDQLhrMby+XnRuBa6Ovx6ZuZoNIso1u3MgI/vjOzjrzJ
gJr58mOZnRFgGnQw7CxOByGC6ylVxyNwQW9pt3M7DVK5vt2WohgFnnmE/SGe
BqxSvMtljKNgpFSALrt8BV+tpEBRzlFIjTn68hWfCgd2HMJFPCf+AWODRsyp
YBUc0S8kOAoU1c0S1s9SYDqbzjFXYhRE2eSMBsuSQaP5I4eA3CgcsFy4lEKb
DLh5Imzm3VEwNHsYNGWWBBIELka8mqPg8TcvPxyXCDlceyRf9UdBQVqnrpU3
Ec5I2WWeMxsFdYbETQa2LxCitaKSaDsKXbItZ7OX4oHY/vk617tRQNP8FhZ1
ceAQPB0W6zkKz9cdGJ4kxsJito44W9AopCsLXnbzjgHd5v7RyKhROCZ6mThp
Hw2d8/dcmE/mjAJWooA3Zp8BEbRwh2aNQrQZt6P8sygo5pJvoisehdXLdIEP
TCPholS1WWD1KAgzLJqG2EbAZy1xair8KCQ+/LLzzz0cqO0L8ny7R6EPd4rA
LzYMXIIvPyQdHQXjjH/XBCtDYT37647H3Cg4vq9bGpj5BM+a/4sh+D0KaaKj
1a50n2BwPvqm684ozCc5sDEphIAiAfPMwfEouLc8FNo7CoIqriBPJ4oxWG1R
NL3rEQhXpcj59hjHgEW0Q2OTOQAStdzbXnOOwbCfM39VkR8w2x9YbfGMwevr
Nf9ePf0I3sEOjLaCYxD9p3Nl4ZQv7GWvl6xKjMFNs3fGA+PeYNls/thSbgzG
r/4nSZbrBZPz8wdLd8dAGH/q6iV/T3hA8DTRVHMM1mb3r7K88oBGrhH5Bf0x
+OXaYvnRzB3EpB7+NDI7iUeF5LKI2QfI0Orwm7YdA6oXSbUTdm7AaX/nqv67
MaiXpyx1o3eFoOC6njHPMej29ztkeOAMmJwbrx8HncyN//dccK7cF6v9//b/
ABU1VD8=
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
9akPwP+x4q9kzRj8/++V/i/+HyyhiJQ=
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQveqQnN7pLSftGaAAxheuXLTWW22ePSp/HZyv+6eG
4UXWfjg/9tczxq1hx+H8019eRS69eA7OT5ZY97aw/DKcP5vlgspBh+tw/qyJ
KwrMo2/D+WvvrktvTboP5/+17l/lOOkhnN8WuUj7yuzHCPfIvVq+r+kpnB93
6MRPkYTncP6nbUzX/qW+hPMXBxWudfB8Dedvt7PmFwt9C+eHcs1xCw9/D+d3
7JthUzH7A5wvoSA4u2/+Rzjf7Kry94BJnxDuM0qRiJ35GeHf//kq82d/gfPt
FcT0enu+wvkiL1/+OTLxG5xfwRpxckXrdzh/4cSJDYdKfsD5v4/++KNa8RPO
f+L7q8w06xec/79Wc1tfwW84/76sygPZoj9wvq/gTvbIpL9w/ts11V/upv2D
82Xm3LjHF/Ufzm+vZbhlpcLgAONLNmqrT16K4BetUy52lGOE85+s37RQZCGC
L3ub77ytNBOcb7nvwkfGyQh+Xqnm91cizHB+Vpj/b80+BL+em+dRryALnF9W
obevZxKCb8ovN/MhFyucz1u1JCy6F8Ffw/dDSJudDc7Xjd54ZGodgn+8mjFS
lYEdztc4JveGqxLBF0nmL2vdg+BDcguHAwDC/ZYr
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{-0.05721626715266011, 0.43360685718467296`}, {
       0, 5.068377834180964}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Determinant^(2/p)\"", TraditionalForm], None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{-0.05721626715266011, 0.43360685718467296`}, {
       0, 5.068377834180964}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.6539190482131367`*^9, 3.6539190763509064`*^9}, 
   3.653919359793186*^9, 3.6539194163059516`*^9, 3.6539195551034913`*^9, {
   3.653919598812752*^9, 3.6539196213335047`*^9}, 3.653919655889371*^9, {
   3.653919955679985*^9, 3.6539199798589764`*^9}, {3.653920012305997*^9, 
   3.653920080748946*^9}, {3.6539201154534388`*^9, 3.6539201654442835`*^9}, {
   3.6539202012552776`*^9, 3.653920226447159*^9}, 3.653920808000947*^9, 
   3.6539209063955784`*^9, 3.653921047556323*^9, 3.6539212149144382`*^9, 
   3.6539212714021482`*^9, {3.653921459142741*^9, 3.653921519731347*^9}, {
   3.6539215638739657`*^9, 3.6539216795615454`*^9}, {3.6539217371913443`*^9, 
   3.6539218080575395`*^9}, 3.653921907183622*^9, 3.6539226177969084`*^9, {
   3.6539227858885384`*^9, 3.6539228161902122`*^9}, 3.6539228887409697`*^9, 
   3.653924009082383*^9, {3.653924194726098*^9, 3.6539242142355113`*^9}, 
   3.6539242561094584`*^9, {3.6539244138701973`*^9, 3.6539244434010954`*^9}, 
   3.6539245168055143`*^9, {3.6539245491873484`*^9, 3.653924595086017*^9}, 
   3.6539249206572733`*^9, 3.653925281323865*^9, 3.6539254133832636`*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
y7Oi//v/zKpG78dOt/6f/T+I4lI+
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
BmHWE96jg6RI7Yf/VgZHMaRxB9XQT5Ai6teKlJFni4HvAtOO1D9StHck+0Cf
WN94iW/Cb1aJ+dYgf1Z+tRg45aieRW6RIiEZ++wP0sUQccc1rPmQFDWK5z59
IFsMbDqY9l1yMhSeQNXLo1AMAS8cyATpyNDwJKNUJhEzmu9IPmQhQxYcIvwN
csXg5WBp5n6SDNHNauwroWLAeawlFv5HhsJcmS3oJIvBJfDN4IwAGbrDP7Kz
JVwMmNh/DKyiZOh2zip2jbsYHNKfy8tLkKEbygpjM0zFsFMwbmsBZEhEyLWk
/bAILH89zkpQIEM2HDFXkon5WmsdmO66TYYeXhXqNmsvAtOB+yex98lQC1PQ
6qXcIpif6lQX1SVDJHn9c0cBRfBi9fYXfUMypPks6OTyuyKY2Gss9TEmQ5VT
XCEct4tAj1JhreIdGerw1HuXfLYIho794lu2JkPZH87El+0VgtYZad3TjmSo
P9Gk1q29ELoFSvxU3ciQltSS4Y24QlC/Il5v502Mb1ruJMO7QmhBOftpQWQo
ZeiUyA0oBCVV4UuDkWTo+1Wv9yS0hVCrlfaSKpEMMcllVoX3FYCMIV+URDoZ
yvedUrkdXwDlpvFdL3PIkOyoovsjkwKQtD2DCykmQ7vLhBAK8QLIdw2X+l1F
hlQUtvYDjvJB1I/1Pb6eDPHpdvyUa8yHzEj/FN52MmSe/+Leo4B8EEyhH9H4
Q4Yk6EbomZ/kQ1KuJ/Pnv2RoVZ6uNE0gH/6rpLiVM0WGrOaPlz8i5EFMk/PH
8QUyNC3XZqNVmwcn/xzmMm4Q4//g9bUzIA9Cxm3/wS4Zihm/9WLzWR4wLxHO
mGHIUTzrivfs1Tzw3TbXjMaRo3RxIcEW2jygJVvxaGUgR8IhW4nlk7ngzvC6
cp+VHKWedcnvLMsFspOzm0JnyBGD+W1y9tBccOIzFNQ5S456dhZOhVvmwoHo
qJ7neXLk9HZET+d+LthI6QQVi5Gj/Uo69odXcwGv1Nc0d40cKVyP8vU8mQvv
NDVI2G+SI1RnBuOYXFjWa7+ieIscce0n7CvN54Dxa5XXVurkiPkmn2JKTw7M
WNXHftciR3Pc2kFjVTlg4Cz7p+cJOeIxyM5qy8yB0W+VNGQvyNFp7XMnVaJz
QCfsuozYG3LUXIS9IeiTA32JhVYGFuRIZW41UMopBzSzxH742ZEj+ZoWWw2L
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
Ow1G9P//v/m/8f8Bpl5Sag==
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQDQE/7RlQwE974cpFa73V5tmj8tfB+bp/ahheZO2H
82N/PWPcGnYczj/95VXk0ovn4PxkiXVvC8svw/mzWS6oHHS4DufPmriiwDz6
Npy/9u669Nak+3D+X+v+VY6THsL5bZGLtK/Mfoxwj9yr5fuansL5cYdO/BRJ
eA7nf9rGdO1f6ks4f3FQ4VoHz9dw/nY7a36x0LdwfijXHLfw8Pdwfse+GTYV
sz/A+RIKgrP75n+E882uKn8PmPQJ4T6jFInYmZ8R/v2frzJ/9hc4315BTK+3
5yucL/Ly5Z8jE7/B+RWsESdXtH6H8xdOnNhwqOQHnP/76I8/qhU/4fwnvr/K
TLN+wfn/azW39RX8hvPvy6o8kC36A+f7Cu5kj0z6C+e/XVP95W7aPzhfZs6N
e3xR/+H89lqGW1YqDA4wvmSjtvrkpQh+0TrlYkc5Rjj/yfpNC0UWIviyt/nO
20ozwfmW+y58ZJyM4OeVan5/JcIM52eF+f/W7EPw67l5HvUKssD5ZRV6+3om
Ifim/HIzH3Kxwvm8VUvConsR/DV8P4S02dngfN3ojUem1iH4x6sZI1UZ2OF8
jWNyb7gqEXyRZP6y1j0IPoTmcAAAadD4sA==
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {0.7870312342724334, 0}, 
     PlotRange -> {{0.8377157609410172, 4.081525467730383}, {
       0, 1.4144262772713971`}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Var along dominant eigvector\"", TraditionalForm], None}, 
     AxesOrigin -> {0.7870312342724334, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{0.8377157609410172, 4.081525467730383}, {
       0, 1.4144262772713971`}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.6539190482131367`*^9, 3.6539190763509064`*^9}, 
   3.653919359793186*^9, 3.6539194163059516`*^9, 3.6539195551034913`*^9, {
   3.653919598812752*^9, 3.6539196213335047`*^9}, 3.653919655889371*^9, {
   3.653919955679985*^9, 3.6539199798589764`*^9}, {3.653920012305997*^9, 
   3.653920080748946*^9}, {3.6539201154534388`*^9, 3.6539201654442835`*^9}, {
   3.6539202012552776`*^9, 3.653920226447159*^9}, 3.653920808000947*^9, 
   3.6539209063955784`*^9, 3.653921047556323*^9, 3.6539212149144382`*^9, 
   3.6539212714021482`*^9, {3.653921459142741*^9, 3.653921519731347*^9}, {
   3.6539215638739657`*^9, 3.6539216795615454`*^9}, {3.6539217371913443`*^9, 
   3.6539218080575395`*^9}, 3.653921907183622*^9, 3.6539226177969084`*^9, {
   3.6539227858885384`*^9, 3.6539228161902122`*^9}, 3.6539228887409697`*^9, 
   3.653924009082383*^9, {3.653924194726098*^9, 3.6539242142355113`*^9}, 
   3.6539242561094584`*^9, {3.6539244138701973`*^9, 3.6539244434010954`*^9}, 
   3.6539245168055143`*^9, {3.6539245491873484`*^9, 3.653924595086017*^9}, 
   3.6539249206572733`*^9, 3.653925281323865*^9, 3.6539254135551395`*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxFe3k4lG/Ytn1fSilUkq1EVCRJzoekUkoLaROyRSlCe5ZE5VckFEmUJKSy
7yHJvu/7jBlmxpB9j2++43iP951/5riO57rPa7vv5z7PP55N1tdP2nKwsbGZ
cLKx/f//vJf2baJ+5WD7n1/sDx7TPb//z66JyjGwJZVjVOHqCW/3O5gNcNZ4
+a8cviYclLLD9yB7R1Y+X7ICzLhR+SN7HuCoXcsq+q4KSDpeF5M84AmPU884
xU9WwCthg5xiphdiCN0JwrkCRp6PLdg7vVG5bZx89VkFbMqNvKJEHmFKKq7h
TVwFajP0/O+c9IUM37nikuIK2O/L+iP3+TGMpoRTRntY+FwDPLLC/nAjF8Ws
X6jAhuZXZdO+TxBV6/7y0NpKBI2tqNok+gxleUrebuqVONry3+ONSQEY/9J9
I/p4JcJTzoY4XHiO9a9fWlY5VWJM9LOmi0wgDH0PmMz6V0Ir8vPF0/eD4OIy
B/nYSiwUWc0Wur7EW4uvaiaFlXDpr1z6cTMYv49YbbzfVQljXc/pg56vMKol
Lho/Wwnd778eZ4SGQEqxfKlxdRVoUSHuWzNDYbDqwcjy9iqE1gqs+tkfBme2
HT3KxlW4MtqgEbruDd4MU6rPXKnCzqSe1F8W4SjueJP/6HEV2GOUfll/jQDz
z9Gv32KqMD424ujDG4m16WzvOvOrsCN35ty2a++g9yHtP96OKoT8Tkx36ImC
U6DDffXpKlgMfPgbvi0aYffXX70kVg1elz9bSsaiUXil7nyAajU4PlefSM6N
AcPM90imUTUYZat2HQv4gNUGWnv77aphW+NaHGL5Ebo7mFtFH1VjhRJd0G1v
LByko6X2vq8Gt0bO2vZ1nxAseFrAPrcaZ7SpiV/Z45A3yzsf3FoNkUjJ+jZm
HAapufSCiWp4xX7kJbo/Y2Xj9XaGaA2cLqWN5jfEQ6dQrnyNSg1uN7mt1Kz+
AruvrVn6h2rwp/uB1cOqBARFBMQ729Rg1c12L8e6ROT4402EVw2rvw9W1rcl
geI24V8aWYN6yolaH+pXiFh/vjWeVYO7HYbvTKeToXX8vL10cw0wRIn25f4O
ax3RM0ZjNbhI3VeQ+vI7niv9MvQQrsX2uvL4yI0/kLnmluYHpVqc3PfFftO3
HyBxKivWHKhFz6aDM7JECoTGesTnrWrhUXTY0rshBZo9wdyKD2vxsaChdp1d
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
0VqBQ4/j2rHvZ29ejAQTj0speJvWjhdLXG80TZmQyi/Y/aO4HRmNZzsPBTPx
LfWN2p+6duhqDTnQapkwSHDd3N3TjgPyHxrkRYbRHn104wSzHfJs1/+IGA/j
+mvFtfwL7VClRoVl/jcMrhdsohv5O9D7JKxRrXoY4b4dPLvWdsB9ItfuqcgI
VO+lLRkpdCAy40xws8kIfrm8mLZU70B7gr6TQsgIzB0cRjz0OuDDHD/4rG0E
wxb6A/8d78CF47fc10j/hY/p+p4PFzswo2HyosPmL9YenW7OcmLZ6WKPaEl/
kaRfV11zpwOTc7QCk+m/0N+T8Jvi34FHsTpiwTKjaFXzzZ8P7UB0ptbhbMNR
XFW0SF8R24EaiXsycddGwb5B66tiSgd0BR8uXQodRdgqsU86hR2IddtCjOSP
QlmAGXmypgMWaonVZwZHUchWGuLQ1YFTPJ5cH1eOwXTm/X8PGR1wbThDbdYZ
A2P4jm/IbAeGAtqlpx3G4Ek5dT+BpxPs12lZfGFjWN25za1wdSfr/hpYKVYy
hoR63qstsp1wIMkYrpkYA8pIl5nbO5Fn5lwgITeOpoLc8xzoxKd6K7X1p8dx
JT30lIRxJ+rVlp/K+o1jKfH6EdXzndhcV6a+LXscrz4c3m9wpRNet9Jf6wyP
Y0u43N5ztzqx3V+LbiI7gfzAfztvPGbZ1O07r5hP4KRf61a/V52Y+Vq5/Chw
AoP3f8hGxnRCW3uK6/2fCTy4GSCV8q0T6qX1xzPZJiHmaCtWlt8Jj7RUnXLt
SXy2hEBPZSci2F2za90noXNGkmOyvRNHPVOjfv+YRL3xxBw/rRObTuoIfxqZ
hJ1B9djG6U68vhCy215lCgvan+m7uLqw7OjXxuU0haAd3qQjYl3Q2+oa4p4w
BYUt59utZLpQpZOa8Z0xhRzpXfW3VLuw72YZJUl5GibiouXPdbrAyDyXfuna
NKiC9MKPRl3YdaSHUvBtGnc5fmVlm3fBf0uvz8/xaYjORX6vtetClL2VqJnm
DGL/esRT3bogwNhs5HF3BnsGTKIXfLpQ6XxYbfXPGdR0bX2z8mUXMl1K6mS5
ZnG5kSto8/suSFLYN4UensVseY//vq+seCPMdRaBs3hemOV5KrcLOzQTLt5o
noVsZvCtK+VdeMlYVVKwbg5ZX69e92ztQnH88sm91nMwjjW0D6V2IVjDKKst
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
W2igm2nuuF46Bp1as5ULajRouK82kAodg1/FfmGe3TTsvVAWXGkzhobf2/lX
6tKwUuNM5cNdY1hftIF7/QEa9pyOtFLjHYNdngD75qM0zBVZ0lrbR5GSObO4
4xQNFkVeka5fR7GYQpnVOUeDLOXPqTnvURgm108etKJh3pcSYHtmFEFfCkZP
OtCw5YDa6e/bRtEVm8i8eJ0GQ5v4mgauUShGv6E5eNAQ91cj91n2X9x4+5hy
8wENn8RNw9mc/iInzLXvoS8NvXqzFTMb/oIn+FLX0wAaNjIdyy0bRmDy/Ghb
SDCrf+HdycpPRhDxZE/T+3Aa+LnMLA5hBAOPFOsSomm4/6tING5mGNs9V1Wl
f6bhbi/NR+PHMO7eZSsrTKahRcbmXb/TMErch39VptMg9Fal8OPmYaxw6fjZ
kkfDDjP6gg2FiXNX/+SSftGg0FVZvPYDE7H2aZnMChq24qtPkiUTI9YxqTP1
rPkIaUWulmFC2+LFN452GnYXchvr9Q3B9+y9ROE+GoQzKgbkY4ZQc9rhs8Qg
DSL2RT9TrIcgZWL6UW6EhuvsCsHd8kOwOaL/XnWKZdu7tL0ZZCDZUO3tnkUa
xloCuNoTGJjVW//agJOOOUm30FfODBjs4391XICOxz8mjufvZOCF1vSLcyvp
ePlJudt4ho429f5nthJ0xO5rVNbJo0NWrc7vxkY6eFtKsjy96XDemu9zT5GO
3EN8bCsP0pGlkPDQbxsdNrUBS3QhOksHvb77UoOOnUpXZbkaaTi23tcjci/r
Odev7+dYfX+z1sX1sz4di+zNdNolGshiFs4ph+lQX1E2kKBIg4rIEcd8Ezqo
VRyW74YHcZtfy67sDB3GbFKP89MGUcylYN1oQYft8QeCAvcHIcQmZtFjS8ex
mCMW3vsHYbawdJZ+lY6R2q2H5AQH8WF6yHTyJh0dqjKUkYYBMMfaTizfpePw
16AvlAjWPTv821jAh467VdybuS8PwIeWclj8KR3ZD11NTiiz7t3+9wdkgui4
rJT0uWKCxZt6/9NTfk0HluYzXfOosOy4s08zig66n0HFkcdUJDXb7dH7RIeE
zXF782NUTNed2nU0iY5x2dC8iLVUEFXEjjOprHw+v98gTqLg2Z9t26xz6BBe
rnhRweLhLcVSSteK6MivuSqZ78bSHQW8CrfL6Cjztfz3V5cCx+xJmUe1dNyv
fN5my09BRhpp/YsW1tzMvjfJNPWD7XuNRHg3HZs+3pSSf98Po8Tc1bEUOo7f
VH/j4tiPkLj4Fd+GWP3a2cQrqNmPvphQoZxxOp6du1A2zt6Pre98+H7P0fHb
tv7w1hoy3N5c56pjY8C+ahuRGkFGwasLbJ28DGiNaXq+sCdDIPDwIlWEgb9W
Cb/yNMg4/UxzdlScAarKwi1dDjKiHstNLqxnYP1Yr/OqOhIYXitGeeQZuD9A
zdkbRYLG/X9DK5UZiDe/wci4SsLDW4zB9ax9ya1fcuPRXhLKXFv7N+9hwPaO
S3i0AAmrnUt6dxIMqORS9YQ6+mBx5UfnvoMM7Hv0SqHkSx/ibaJaDx1jAKds
5Uvv9GH8UkDjKVMGRMZ9Nosa9UH3/O1aiwsMpKgcQqRUH56Y2VZeucxAYPDi
cmNLLxpOnPzj5shA2qWPhfTbvZA2xi9PFwaK7pCuu6zrhcMhlZ/PbjOQdfDv
O+uCHqTsl8wN9WTAVzU5KNWqB4u6PJnRfgw0TKutuMDdg0PaEymJzxn4LKjm
dOpLN4J39SVnhDBg8i1SNtC4G13bqxOK3jJg7viXl3u8C1tUcuKqPjDQLGtZ
nRDWBdfNnz+0fmFgoJ7yymNvF/JkQ6LI3xkIL3GKsejrBI+0d8RwJqveWvNc
88edOCnpHDZbwIDD2ZPd57Z2snjg+WDOUgb2S+2uv1DbgQHRQy9EqhmQNTOP
P+3Wge2Cu55JNjFwcOGEvZZkB+7zyPrJdzLQ2uMnwl7QjlJ2UR81MgMe12pp
cdbtWPFv4YE2nYHLQXw3ZXjbcWGWdufAKANPT532uJLYhriJZneTGQaaLr1g
3D3ehtGRYpfzSwwofNkrf3yiFdqMb9fsuIcwrdOwRAprhR818oqL0BCY9pfp
qtqtqOt7ant/1RD4fp2OUO9ugVSXh5W/1BCaMg4mD3u2wKb18sXgTUPQ2BU7
d162Bd8bTM6+2zLE6kO+/cOSZsxX7zONVxvCc9uV0aZ2zTAo33oiVXMIyhmf
fpN5mxFUsta4YN8Q8vQSXmz50oSOn1yHyw2GMPtHeWirURPkc8cMmo4MQW1T
IPcIoxHOGT1E78khKHwNC/QIaETOj0odxtkhnDQdialUbgTX1yytKcshsHuR
n0xWNuBY/CcNNgdW/nWKWnNODXjzMXi74PUh1NvLmZMFG0CJ8lRZ4zEEizt8
mtmJ9VCNuLpl04MhjJMPPXhypB63Q8/Kq/gOoeP96qVzQ3UoCTKU2R0whBXr
hIV1A+og8p/6ev3gIVh1y6/Zp1wHc38ZCeNwVn5xNzzLw2rxwUd4tXn0EMK8
dA77t9Zg5MG86OXPQ/j6TbikVqIGWncGBZ2Th0Ao8DcXnKuGj1sT7510VvyN
Icqu76pQdb2I0zdvCFdn1wvwkSoh4ZS8/OLXEI6Mb1Z8r1AJa7u3C+EVrP4U
rXxi5lSBJKsnM7H1QygRz3A0TinH7AX3iW9tQ/hSu3ndx/ky6Jtb/83pZa1H
ir2HQRn+O3V86PfAEPjNPeYGAv+g5ZjOYN0wK75q49FV3aWQNVLq75wcgs8e
KwtJlVJcPbCmd2BhCFmOHTNrH/xGBsHZOcbBxO71jI8qdSVg0xltWeRnwv3y
55OuCiU4uru7gXclEz/ZJx5yPfiFsJ0VNWISTIzK6IkstxSjb1tmxYaNTJzn
YT93T70YKkqxpVsUmTAXM5MIDi6Ch/zLYvVtTPSFTBednSxE4caHBboaTNx8
VmNHMy+EwDqnnMN7Wf6nahbjvH7CbI15xml9Jt5XB2heMC1A9MoDKZcOM9E4
vBOrtueDIbQz2dGEiQM6S1+YK/Kgwbcxwf0MEysfOvNzz+bAi1MozsuCiaAc
/e471GxULM3GBNgykRIeOWLZnoXV89R3YVeZmOfY/KymMROWUw3hMTeZaP8w
VtvYlIGE0Z+hSXeZiBRvTX3YlY7JoaSXmd5M1G1Q/dfOSIPuYPjz4idMJF+u
qxxaTsUzst/T6kAmZr9vnM5dl4qm7puP28KY2Bmjd+yQbgqk2y29+98xIZmX
lhds/wOOTcYPRmKZaOsU+RL2+jvSarXvzCUysdXeyOt15DcsVWx250pl1See
rGeyNhmHSle7iOYwQaL9e6n7PgkhRezXpIqYOBvw7ZKeRiJ68kYcFMqYOH1a
YqVOyxdsyeq02V7LxEx18ATb43i4ppZZ7m1hoqJMXvEK8RkFyekXDLuZkL9r
GqvHFwe+hA/mJ1g867Df1oCzXbE4+Snw9IUhJtKqbDfczfuIqOj7JvbjTHRs
prywi/8A2tsrR13nmDjYmqre+z4GO1+bHXrANow6ek7Llw/RuB+83+AJ7zDc
yuS2sVu9R9nz7cQrkWHskFAM2Rf8DmJPN+hEiQ9DXZG/6l7bW1zwFdD6sn4Y
/96qPVJWj0Cc54x6mtwwygr5UrNj3mD8LkXt51YWbxxekH0p9xo6HvXKFTuG
oS/ct3FNVij8XAo2N2sNQ7wqQjTDIgQNVxPl+jCMybO7ZxvWvMJ6hzcbhwyH
USutWULufQm7y4/XTRuz8nOc1NLLDsJ3C9e17KbDYL+zIzzRIBCLZy+tErow
DNmU1cF8u57D0PSo6NrLw/hSbP7cQz8AQSZ7BGUdhzGl9kuh2ukpOo4o8m5z
GcaYXXg1+Zs/FA+u4tS6PYzATWmib4T9cEOfbVnfcxjne9bY1zzyRc6+4Xlj
v2HIGcYKeq58BJ49HdPmz4ehbXbR7Um6N0w0/oxfDhnGU8MXt3qdvRChljbi
/HYYQ3KXfOi3H4KyNYZx58Mwi4e1RBVo38d2xRcDvl+GcfWbQ86WTXdxd9M9
cuD34f/9ninadlu7Sfb/2f8PRIkh0w==
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
Cgx2+BxewIjNSsyJjk40BNTwXXBZwCt2nQmrwU4w+xlspBUsYMtHv0Mes50Y
M//ltpN9EYUqrR6f2buw/VkisUVnEWbFsrW/RbrwOmFBrdBrEcsXb0m2b+yC
i6a72krZIkImftyY2dnFmNulXGp4lnDg5ULSGo0uNL5bvLvz+BIa1x+Z33Gi
C8/U/YTXvV7Cg5TXR46bdkEp3JLFpXwJArqNb25adcEs7ZbbDe5lJHStb3V3
6EKOk2Z5rs4ydB9ayEW86EJcqZ6et8cyBriSrHP+68L5VavVAkaPdgubSW+N
6MLfKw+fWawuQ2YvmKeTulAdH1Rx79AKcspeHhf+3YWO+TbPTocVXLha+3Z7
RReshNssvv1YwcyUeK9eWxcWI7Ze7x1eQaD3NSVLahckt09etpdfhYrsVzu3
6S7wnPJVt76yiqqfk7lhrN14ryUSXxy8itvHD3FnC3fj9a576zyrV8FJcj/T
ItONZLto82YWJiLaofLTv+3d0F7mXNiwgYnQ5FtLE1TvhvKf4vgNB5mI7s+X
dyvrdyPtXIZ7yxkm4umBGCfd893Q+mlcdvweEyFeNVp8w7Ib23YvqDh7MRE/
zQ8Iu9p1w8NB9OODSCbCaO75xU9u3ci4vqClmMNEjL0p/ZLp3w2DJ7Pf4pqY
CJ9NwuNNYd3o7jyt/G+UiVDMvKA2mdiNFxkvavm4mIlig8gXAtkMOSE9aV6W
mbjeP1StVNaNNzr7Pv0+yEwwPdkjodPSDSJgk8xlI2bik6DT9esD3fDe9fRL
521mQu1L0bfn/7phun0lg3BnJlrU+Oc+MvegbvmRkO9HZsKu1lgrQ7AHR063
7S1LZSaELcN8GqV7wD7MuzxTwUwkLVKax7f1IHb/tV3r+5mJ4wE7N/Kr9YBS
/zv88BIzQdvieEdRtwc+6rULV0VZCI+c/J9Hz/VAcNV4+qUyCyFnxM1kfqMH
6tyKelnaLEQe1VDf2bYHG1/Yv1m8xEJcehYSFOLSAxOpTpy2ZyHm15C70317
IOqTmpvzhoUIjtum2BDagxeSpbpHY1iIPRp2D8e+9mCk5fbKSC4LUduQ85s3
swfFMWxtWS0shPUtdi6Fkh5sT9CI+j7OQnCvnjTSburBjn2cKTXcrERMUHCo
GbkHDjFy7zdsYiWOKPVQnCZ6MMrZ4Reuzkr05m3d9WG1BxIWoVrG51iJXKWM
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
mSP//3+n/yv/D7SXM+w=
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQbQwGj+0ZoADGF65ctNZbbZ49Kn8dnK/7p4bhRdZ+
OD/21zPGrWHH4fzTX15FLr14Ds5Pllj3trD8Mpw/m+WCykGH63D+rIkrCsyj
b8P5a++uS29Nug/n/7XuX+U46SGc3xa5SPvK7McI98i9Wr6v6SmcH3foxE+R
hOdw/qdtTNf+pb6E8xcHFa518HwN52+3s+YXC30L54dyzXELD38P53fsm2FT
MfsDnC+hIDi7b/5HON/sqvL3gEmfEO4zSpGInfkZ4d//+SrzZ3+B8+0VxPR6
e77C+SIvX/45MvEbnF/BGnFyRet3OH/hxIkNh0p+wPm/j/74o1rxE85/4vur
zDTrF5z/v1ZzW1/Bbzj/vqzKA9miP3C+r+BO9sikv3D+2zXVX+6m/YPzZebc
uMcX9R/Ob69luGWlwuAA40s2aqtPXorgF61TLnaUY4Tzn6zftFBkIYIve5vv
vK00E5xvue/CR8bJCH5eqeb3VyLMcH5WmP9vzT4Ev56b51GvIAucX1aht69n
EoJvyi838yEXK5zPW7UkLLoXwV/D90NIm50NzteN3nhkah2Cf7yaMVKVgR3O
1zgm94arEsEXSeYva92D4ENyC4cDAHpNMm8=
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {0.18800580977103934`, 0}, 
     PlotRange -> {{0.19940374437932273`, 0.9288715593094601}, {
       0, 3.7635022822070643`}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Dominant eigenvalue\"", TraditionalForm], None}, 
     AxesOrigin -> {0.18800580977103934`, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{0.19940374437932273`, 0.9288715593094601}, {
       0, 3.7635022822070643`}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.6539190482131367`*^9, 3.6539190763509064`*^9}, 
   3.653919359793186*^9, 3.6539194163059516`*^9, 3.6539195551034913`*^9, {
   3.653919598812752*^9, 3.6539196213335047`*^9}, 3.653919655889371*^9, {
   3.653919955679985*^9, 3.6539199798589764`*^9}, {3.653920012305997*^9, 
   3.653920080748946*^9}, {3.6539201154534388`*^9, 3.6539201654442835`*^9}, {
   3.6539202012552776`*^9, 3.653920226447159*^9}, 3.653920808000947*^9, 
   3.6539209063955784`*^9, 3.653921047556323*^9, 3.6539212149144382`*^9, 
   3.6539212714021482`*^9, {3.653921459142741*^9, 3.653921519731347*^9}, {
   3.6539215638739657`*^9, 3.6539216795615454`*^9}, {3.6539217371913443`*^9, 
   3.6539218080575395`*^9}, 3.653921907183622*^9, 3.6539226177969084`*^9, {
   3.6539227858885384`*^9, 3.6539228161902122`*^9}, 3.6539228887409697`*^9, 
   3.653924009082383*^9, {3.653924194726098*^9, 3.6539242142355113`*^9}, 
   3.6539242561094584`*^9, {3.6539244138701973`*^9, 3.6539244434010954`*^9}, 
   3.6539245168055143`*^9, {3.6539245491873484`*^9, 3.653924595086017*^9}, 
   3.6539249206572733`*^9, 3.653925281323865*^9, 3.653925413711389*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", 
    RowBox[{
    "Comparison", " ", "of", " ", "methods", " ", "for", " ", "UNcorrelated", 
     " ", 
     RowBox[{"datasets", ".", " ", "Here"}], " ", "you", " ", "will", " ", 
     "see", " ", "there", " ", "is", " ", "huge", " ", 
     RowBox[{"difference", "."}]}], "*)"}], "Subsubsection"], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"-", ".2"}], "}"}], ",", 
       RowBox[{"{", "1.0", "}"}], ",", 
       RowBox[{"{", ".5", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{".5", ",", 
         RowBox[{"-", ".2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".5", ",", ".1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0", ",", ".4"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"A", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1.0", "}"}], ",", 
        RowBox[{"{", ".5", "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"B", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{".4", ",", 
          RowBox[{"-", ".2"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".1"}], ",", ".5"}], "}"}]}], "}"}]}], ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"Length", "[", 
      RowBox[{"B", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"q", "=", "10"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"finaltime", "=", "30"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runs", "=", "500"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DetComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"DetAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"VarComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"VarAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"EigenComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"EigenAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"r", "=", "1"}], ",", 
     RowBox[{"r", "\[LessEqual]", "runs"}], ",", 
     RowBox[{"r", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"datasets", "=", 
       RowBox[{"GenerateUnCorrelatedDatasets", "[", 
        RowBox[{"A", ",", "B", ",", "q", ",", "finaltime"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"CompD", "=", 
       RowBox[{"CompUnConstrainedCov", "[", 
        RowBox[{"datasets", ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"DetComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"DetComp", ",", 
         RowBox[{"{", 
          RowBox[{"Det", "[", 
           RowBox[{"CompD", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", 
              RowBox[{"2", ";;", 
               RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"VarComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"VarComp", ",", 
         RowBox[{"{", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"Eigenvalues", "[", 
                  RowBox[{"CompD", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"2", ";;", 
                    RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], 
                "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EigenComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"EigenComp", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{"CompD", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", 
                RowBox[{"2", ";;", 
                 RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Mlist", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", "q"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"m0", "=", 
          RowBox[{"CompUnConstrainedCov", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"datasets", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", "0"}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"Mlist", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"Mlist", ",", 
            RowBox[{"{", "m0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"AvgD", "=", 
       RowBox[{"Mean", "[", "Mlist", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"DetAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"DetAvg", ",", 
         RowBox[{"{", 
          RowBox[{"Det", "[", 
           RowBox[{"AvgD", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", 
              RowBox[{"2", ";;", 
               RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"VarAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"VarAvg", ",", 
         RowBox[{"{", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"Eigenvalues", "[", 
                  RowBox[{"AvgD", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"2", ";;", 
                    RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], 
                "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EigenAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"EigenAvg", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{"AvgD", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", 
                RowBox[{"2", ";;", 
                 RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"DetComp", "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"DetAvg", "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}]}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Determinant^(2/p)\>\"", "}"}]}]}], "]"}], ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Det", "[", "B", "]"}], "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}], ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"VarComp", ",", "VarAvg"}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Var along dominant eigvector\>\"", "}"}]}]}], "]"}],
      ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Eigenvalues", "[", "B", "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
         ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"EigenComp", ",", "EigenAvg"}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Dominant eigenvalue\>\"", "}"}]}]}], "]"}], ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Eigenvalues", "[", "B", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.653922658606601*^9, 3.6539226632003613`*^9}, {
  3.653922696053743*^9, 3.6539227039600105`*^9}, {3.6539239800276275`*^9, 
  3.653923980105752*^9}, {3.6539240333343596`*^9, 3.6539240453496785`*^9}, {
  3.6539246046767855`*^9, 3.6539246289155784`*^9}, {3.6539254314307213`*^9, 
  3.653925431805722*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQveqQnN7pLSftGaAAxheuXLTWW22ePSp/HZyv+6eG
4UXWfjg/9tczxq1hx+H8019eRS69eA7OT5ZY97aw/DKcP5vlgspBh+tw/qyJ
KwrMo2/D+WvvrktvTboP5/+17l/lOOkhnN8WuUj7yuzHCPfIvVq+r+kpnB93
6MRPkYTncP6nbUzX/qW+hPMXBxWudfB8Dedvt7PmFwt9C+eHcs1xCw9/D+d3
7JthUzH7A5wvoSA4u2/+Rzjf7Kry94BJnxDuM0qRiJ35GeHf//kq82d/gfPt
FcT0enu+wvkiL1/+OTLxG5xfwRpxckXrdzh/4cSJDYdKfsD5v4/++KNa8RPO
f+L7q8w06xec/79Wc1tfwW84/76sygPZoj9wvq/gTvbIpL9w/ts11V/upv2D
82Xm3LjHF/Ufzm+vZbhlpcLgAONLNmqrT16K4BetUy52lGOE85+s37RQZCGC
L3ub77ytNBOcb7nvwkfGyQh+Xqnm91cizHB+Vpj/b80+BL+em+dRryALnF9W
obevZxKCb8ovN/MhFyucz1u1JCy6F8Ffw/dDSJudDc7Xjd54ZGodgn+8mjFS
lYEdztc4JveGqxLBF0nmL2vdg+BDcguHAwDC/ZYr
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{-0.011782985935016206`, 0.2974726490609694}, {
       0, 15.160799313558426`}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Determinant^(2/p)\"", TraditionalForm], None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{-0.011782985935016206`, 0.2974726490609694}, {
       0, 15.160799313558426`}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.653922673216008*^9, 3.6539227107321234`*^9}, 
   3.653922827310432*^9, 3.653923001782906*^9, 3.653924019844111*^9, {
   3.6539246160874214`*^9, 3.653924642428119*^9}, 3.65392479804993*^9, 
   3.6539249277666636`*^9, {3.653925437953387*^9, 3.653925465743766*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
YHzO
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
2eDyUhLhWvCwe90SOuo1rvyXJdw/ZrbnbZvldHy0vlL3Uphf6YW5J7xX0fFA
/sfDCXVhvVOb9M9r0fHuisTh2SuF9e4Vwb2uQ4e/8fJj6quE9f5Nt+H5ejoK
R9fayArx21iNpLRtouNV8abrT4VxcFWW89RmOlLkHfYragrrXWunmrSpcP/K
P9ulhHFjHm98uRkdYkqXDJKE86flyx+bWNLh/V6jLka4vsq5I2Gu1nQYD7HP
9An5NP2jsu20LR21n+kGScJ8j3l8lL3sSEerBrgBQryprefaS1zoOHauWxCr
SiKqtq2//s6NjuHwvzOP5pGI4YrRI/3udFgd1TQZUiIRcitz17IO0+H3JilJ
SpZE6GfZ0JWP0XFZK3n/bFESsV9qplbHl47N2iXf/zEViLjQioQd/nRMurRJ
Z08rEGUTR+2OBNHhWh3cSRlWIDr3LVwQFUrH0M8jTpwOBULwsWUoN0K4/5ex
uIL3CoSGScy9p9FCfpK8sr8/VyDsHm44/V8sHWxdqW83ixWIMLWfxr8S6bh+
y/XOaLoCUXA1T1wihY7OsqKRoigF4oOIbYtaKh0HruV/6fFRIMiBolmbM+nI
25y8MNpBgVD9UXnQKZeOl8YB2WlGCoSZk4+Gfz4dXkc4lUpqCoRv46K/Fwvo
qInw8GSLKhCZBl9eFBXRodNWIGs/Kk/UlFyIeVMq1MPuvZFKozwxtsBg5/cy
Om791Da0L5InFC/9mk0vp+PxQp9q8QvyhAE3/7vSMzpuHqB3GrrLEx4n7Qu1
X9Jxf82z+XQjeSKpX/ykRS0djv1kKwtleaLc9sXGQ3V0JHNzLm2YlCN63pzg
hzfSod044tHyVo4QW6/2PusDHV1bj3suyZYjtO+0XSn/TEfQYHTgphNyxJ45
8a6f2ujQkkk+u3KrHBEZZ7RsvJOOPd531nIV5Ygi+u8Jke90NKVTbnwaFPZ3
71tPFg3Q0WOc6Vr6WNjfuxzDDUboOFw+p7IoSpZQ2yll7jAurI+GjPqOXbKE
VfVL+ZOTdGyMt56zW1WW8F9zqiPhDx0V0REv1X/KELn5y27cptAxXT/byPep
DPGW1HG0hkGH+sfDyibRMsSvqETdLg4du/bOUX9gLUMo/zNmkgVC/xy1svhv
ngxh7PnnjYI4A453Ly9/NSRNHGm/naQpzcAClyzjxAfSRIq5s4OZPAPLnQLE
d5yRJiorZVQPKjGE71ffIuVt0kT/qpqR0DkMGN44EcKVlyakcvwfpM9n4Oh9
f0+VLilCV2ZF8MNFDFRbKLaduSNFuJ79ZtK8lIGMD58c9PykiJjJi5I/VjDw
6L/XLxyMpYjS/Vv/42syUCUwaPwjJUW0tfzLXrCWAYnNdcUqHZIEZ2uRx4Z1
DNw+bR/afVuSUH/sutp2IwON9QUrzQIkCZtl8mQfIwaCZSeuHYIkEZT2+mWs
CQOk4uBpKEkS+WKnL9wkGDi9NjxzclCCaAhaZfNyOwNb4oztTzyRIKZHu+d0
7GBg//nurU2xEoSKS0rfn10MtA1fYsq4ShCmTSiWdWDgjJbqyU1rJIhjRtRT
K50ZqKddTHAQkSBS7901wD4GImzt7T2/iRNVqm4z+w4ycP6g4YFjD8WJ4WRS
c7AnA1ler1yPxosTcvy3qVePMvDmn6byAXdxQt8veN/94wzwRkjKNkbixP5B
TfXGUwwcKHMg1s8RJ+LseycHAxmIRNk5hb9iRFndlaecEAZyX+B+zycxolPf
LHJeOAOxnsSSrHvC83whffu6KAZupofUGycJz/Pz7pFsLjAg/uqRZeMx4Xk+
4cC3owkMhPseWqu3Q4wIYyrdirnEQKmsWPJpLTGiwKf+2PUrDOQZr2hPkhcj
PvScWfc8nQHz0q27fP+IEmRrbXZrNgMcwbJe5XZRQrWmv+53HgM5GR4nwp6L
EmY6aZekbjEw9PR7XOZ1UcL35vY9ywsZUHTJyfc4L0pkKrEWmZQwYGb0yKn9
mChRE/Ng1OWB8Pkquv2YrSgxRnZ/GPiYga8W6WZpBqKE4hHlMylPGdi3zkv/
i5ooYdDRaFrygoFrY48NcqVFCQ+Ls9LvXjFwZ4lDwtg/ESLp+drWvjcMrO/I
YJd/FyHKNYdymfVCP5+aCKA1iBA9uRmeys1CfTZes7n/WIQQk7PS1mlhQEt3
l8vnPBFCO4JDsWoV+tmBcmdvggixZ+rhq8MdDLj83FBhdVqEiDzoGXeum4FK
p1PXst1FiKL/5u7O7WOAXnWmcpuNCPEZzfOeDjGQKpf3z8JIhKCXRwx8HmXg
pdT4yYJVIoSaul7JxAQDKssVm23niBCWGSP+4tMMPNzqQ7cVFSH8JbKN1MgM
SE0fY5gOziA3ZKfoZrrQb4xZWlE1M3g7zvuwh81AssLcE/vyZvDLtTzdj8+A
oMjvwJewGSh/OLL/oigT6YNW8YOuMzA2nr+ySJKJG6sYkRcNZ3Dkwcep17JM
4VVIas3n+TNIWRz1rIfERKFu69wHLAEqL6+Pos1mwvKPbMOK7wL0C0YtlVSY
CO9sZhrWCCAVkKukrcrEfmq298RNAXSHbbq3qzEReOPsm00XBHB1nCnwUGfC
tO5V7TJvAWLqK46HazDRbuC17L61AKUbvfWztJlwMbTb2q4nQFvxQu5jXSao
Nc0y1+YJwFb5XP9Rn4n/Flyn8Ll8qCfFpIwZMCHWna8j8oMPG/YGZ5EtTPj3
jYfc/MhH0ImfSxaBiQLbDNmuCj7ye/PGN5kzMdGBkyXX+WjYZfvY3oqJawfm
5CvE8zFdKxrmayPkQ62iSMyfDxW9Z0SCnZAPO3d23D4+TAt8ZG/vYWKW2cGA
K9v5ODZ7cfsrVyak7rRSFqzjI/XCl7xv+5lYnCX+bsliPqqoF46QPZiYak/a
kCXDx7CXwVoFL+H6jOwPZ+g8yH37RdPwYYLW/3PjyxEe9K1u1G47yYSoZsld
x1Ye9lfZJxwIYMIkXvWV0Wse4rQk7EKDmTj04todjzIeyvJezE8PY6KjbV/4
qzweOuV9h8oimbC9WCKOizwIItXuNcUw8eGgW1dfKA8af9oCR+KE+xknb0j0
5sHOI96Yn8REX8PHeXrOPIS2GokvuMzEq5GQ443mPBRsm/qkn8bE6/cJklv0
eWiuuJW5O4sJR+rKwuhlPJBX7Dnoc42JZTaW8rGKPKhmSWnE3mBinPq9biOP
CzOp6j83bjNxSmdCLe4XF76hp15UFQvxH9ircOgbF5kTy2K+3mOid5tR3Yt3
XNTs69jx5yETe8nyUeGPuBj7mDhbtkKop8MFo5xrXCiabPm+4jkTntuOaPFj
uTB4+OeOaTUTjfM9jPJPceGhdsd332sm3su83uTlwkXSVeeNwe+Y0Ck9w9tu
ykW5iCz/ynsmdh2cDtRbxUVPYE3jvY9MPJh198NceS7EfvhfafiPiTMv22zH
/3Kg7bTCdbCdCfW6hx7ZXznY0/htKecbE52SEj/nP+cgwuDSxNxeJvYMqtxz
z+GgqGTrE71BJjijKyvdQzloWUA+a/2DCZl1Gc4kFw7oF4vMjv4U+m2P3rVD
GzhQ47rKx/xmotpRJNROiQPLk/IdeX+Z2HpPQG/7xYZ//+v8Z1Th/ru97g69
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
mhKPotyr7PJUKxf7Guxq1uceQXenh4t0Jxcuiv/SuV88IWo1Z6l6DxfmhV/7
Lq49BO2q9z9N+oX5PF2v9s7lIBy1wstdh7kok65J35nphog8nbOnx7h4tGld
nS5pL4rkh7dd/sXFbo1Dt/VrndESmSlXOs2FzobZeg4Fe0Cftvr6jsyFt44M
602FA9Q8uNf76VywmDOV/w3bwbL1kReLzYWgUD3rxsNd8N92WGeOQOhHVSm/
DY07kVsxj6EjxkPV7l+Gzcus8HbFh9c7pHiIoi0Kjn61Hb8yIxOPyPEQSS3U
+pJqBmWpdfZRijxsyH46d851AsahPxZcU+Yh+Nv3U4b3t+LwRPbwUxUeygfk
nCPCjJGyz/r+f6o8jDeJP36aY4jKj/zTv9R46NzuLnNuZiP6tjzZIrGCh6O0
16vZ9/Uh+dBLYqkmD112PDudjHXQVVvwefMaHvSiH+9mHdOBy9VPWU56wvly
zmuV5LURLRLt7r+BB3l/WZUReU2UBuprXjLkYZfI5rpJ95VoHRn7W7SFB+o8
1vxp7nKw91yregMePux2Tzd9sRTqjbvOfzfnIbffpFlhehGsDUSs6VY8aC26
nX0lZQGCSp4qz9rFw8cvW0435c5D/oJjvdr2PNDHclPnM5TRcFG1yMJJiFcx
PnHH7VmY5nw+eWivMFYtsnZdSYLKyfObIg7wkNFU71R9QRam/RsFWYd4mG0W
o+djLwVv24n35V48qFw3We59Xhypb65f/eTDE57vWtJocqKoWme3d/wkD0s+
vvj56z3fdOi22HLRQB4OmiW6FkpwTGXnPP+1KIQHnTsLm768YZjqxx2vMDjL
w+jq9jPjk1RTN/riCIdzQryjR6qN/cmmsd6t5ifP83DpvtH3ztw/pmVdsQqJ
8TxwPPXi+LN/m3bsMOy8fZGHQnmLD+OqE6b8l5M3ai7zUD2x9LPp3TFTjTU3
vbvSePh65lLqmaAfprb5DnqULB6erHs3kvVu2DSUJMlSyOMhkXS/mlwyZFoQ
VfVW8yYPIsVq+iVdg6bNf30vmt3hYdaHzcXL5w2akg8tdTx4l4dnJ+WOzJcY
NFVtb1cNu8/DwE43S+fCQVMz84Qf6Y94sLsb9GhP+JCpb+XmsocVPKR/X7j8
ZNSwaeaq6eDm50J+nMYO9w2PmNZkF2z9Uc3Dw3dnRubfHzUdlXaSErzmYVLK
dZbWwLip4lnpLwvqedg3FnKoLuGXqcFkdc6GJh7Y0ZI2ux9Nmbrv9ztk+4mH
/eWDKxLW/TNNbFmudfyLUP/JuR7ZLhTT8q2d5Nivwno5GkMNaaOZdj9Kqr7Z
xUNJRH34eCHTVHSZSezLXh4k/779M9TBMdVO+2vTMcjDmNfyAdIVgamjWOHc
vz+E/IQtKe09IoqIIJd+2QkeNPVZvzY1i6NoVPbuyikenJ4u5qtHSqHFudYP
/3hYnneVF5ckC/r7AEM3mtAfvSVh6kwFqBmtFAlh8VAZMZL/x2sWLO91NV/l
8aD0clfL9ivK8FdNTrsvwscar9+HlXlzkZts6tYowUfsN73OhKfz8ZZHVh+S
4YPNDqBa1ahi4lTxb44CH4UR6yl31NSgPLi3ct5sPsQ/Nmt9Ii+Dsb3CuXXz
+Ij23PnvlNwKHK57Y2GzkI/lTyvtzrqvQrJ+kKL3Ej642T/3ZlI1UVmo0RWz
nI+13znn279oo2/u91vXV/GR8mPOviq2DiQTLvs81+Kj8fZGsWU1wnpnEuvb
dPjY6j3rrd89fbj40Ni/1/Mxpv14e13zRkT3lLyTMuBjs02AsoOaIUqt9ycv
N+ZDykCt69qjzWh9pehkYsqHruK/h25RJmCvfbfY1YwPr3Nxs3PSAfWbIWOB
lnxkhMS+tAnbBmslrUcp1ny0ZN17RrM1R1BM35kSWz60pNxq9ewtkE++ineO
fMy+275KJtoKDYfNZfpd+Gj4FP38/sBOTH1ltDLd+DhTynvldXoXVCzuX1P2
4MNCa8+nO1vtYPr84GGdI3zIGnFymMsd4K05e82OY3zMBGbNhDY4IjW3gXrY
V8inlrS3fpITqmTDas758zE/tIY7298FQ+Fr4nOD+Pi6nPlJPmIvZKcGdj8N
5UNeTYK7+JEb9A+mq/wXwccTiv3nHXIH4fafxeBENB9+5YfPZKd5IBbsEvE4
PgLrr7hKr/BEWXlZgFoSH38+Fl7syzyMjuWHNm9O4aP9o1vhrqVe4KfPEXNK
5cPIIZXsXH8UGhJNH/0y+RjVUcslnz8G25DwjIu5fEzOWdkx+8BxhI7rHCjK
F/qpQrCqwNEXBa7DK98U8FFl/dwrwvsUmpszp3uK+DAplq4NyfUHefOO57RS
PhydzOzuCfux6gNulNJDPs72tu8aWXsaZosfW2k/4WPo5kzuppAgnLh8eJbF
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
4v/G/wNSqoAN
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQDQE/7RlQwE974cpFa73V5tmj8tfB+bp/ahheZO2H
82N/PWPcGnYczj/95VXk0ovn4PxkiXVvC8svw/mzWS6oHHS4DufPmriiwDz6
Npy/9u669Nak+3D+X+v+VY6THsL5bZGLtK/Mfoxwj9yr5fuansL5cYdO/BRJ
eA7nf9rGdO1f6ks4f3FQ4VoHz9dw/nY7a36x0LdwfijXHLfw8Pdwfse+GTYV
sz/A+RIKgrP75n+E882uKn8PmPQJ4T6jFInYmZ8R/v2frzJ/9hc4315BTK+3
5yucL/Ly5Z8jE7/B+RWsESdXtH6H8xdOnNhwqOQHnP/76I8/qhU/4fwnvr/K
TLN+wfn/azW39RX8hvPvy6o8kC36A+f7Cu5kj0z6C+e/XVP95W7aPzhfZs6N
e3xR/+H89lqGW1YqDA4wvmSjtvrkpQh+0TrlYkc5Rjj/yfpNC0UWIviyt/nO
20ozwfmW+y58ZJyM4OeVan5/JcIM52eF+f/W7EPw67l5HvUKssD5ZRV6+3om
Ifim/HIzH3Kxwvm8VUvConsR/DV8P4S02dngfN3ojUem1iH4x6sZI1UZ2OF8
jWNyb7gqEXyRZP6y1j0IPoTmcAAAadD4sA==
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {1.07111871405418, 0}, 
     PlotRange -> {{1.0871381389308405`, 2.1123813310371187`}, {
       0, 3.7670344314899187`}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Var along dominant eigvector\"", TraditionalForm], None}, 
     AxesOrigin -> {1.07111871405418, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{1.0871381389308405`, 2.1123813310371187`}, {
       0, 3.7670344314899187`}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.653922673216008*^9, 3.6539227107321234`*^9}, 
   3.653922827310432*^9, 3.653923001782906*^9, 3.653924019844111*^9, {
   3.6539246160874214`*^9, 3.653924642428119*^9}, 3.65392479804993*^9, 
   3.6539249277666636`*^9, {3.653925437953387*^9, 3.6539254659000163`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxde3k0lV/Uv3mep4uSpAwVKRoN+yRfUaYkZZ5VUimRVAgpQ2SIjMk8lqRk
JrNkqlwX97ozykzI+N53rd96//jdf+7a65znOfsz7HPO/uORc75t7sbCxMSk
x8rE9L//xKJdOkxrv4Dp//3+/1i9aFHSinkQHutc5tyofgphhR2LH7gG4d/U
0sivu88AV5DewyM0CCaXyAnrZ8PhYMHdQhfMIHgnxIT2a0ZCQP7Z0Npdg1D7
/qNft+kL6M/b6SCuMAhOpvvdYp7GwN68+ZO3VAbhp7dhtt3sS7if2ybWrjEI
o/2Se++qxkFXTuqsrNYgWL582toTFA87c7y6/M4Mwg1q7RnT8QS4nf1fbv+5
QZioffLfD+dE+JolHbTffBBePZ4eUF1KAvGsWesQq0EQSzp992RaMlx723J0
1HEQgmMiKrA2qVCdmSx09NogkBtm/kyqpwN/5q0/L24PwiGFBr0L+96A45sz
bXTfQcC0CTv4vc6EjxmSbyFgEG47bX7CFb8Fjozph6+fDgK/m5/Rke9ZcCX9
q+V81CCYfx+QXdvIhuK0pMPnEgZBxji5K0MzF7ZSPfmyUwdBeTFLOzw8Dy6k
nh5fzxqEjDL1p/vH8yEnReKrRdEgSFoYzc9ZFMJy8p+00g+DkL8z+IvWjyIw
TG68z1E1CB/Hd3OFOZdA2utX5g6NDH3weUayrO9gNslD5Uv7ILw24U6+9ek9
6CYBl3DvILz11PIery2DhEQxyvVBhl5hFXYXCz7A+KvJuq/4QVjqa/SUTy+H
U6/qX++gDYK85r/60NSP8CIh3vveFINPx9WfadkVQIy/ZvJ9cRDWDnuyvPr0
CY7EaysrrA+CwP7TOq/6P8PTOBG2QBYsFDxM3duwUglDseMELDcWJLPZTDSU
quBAbG2VmjAWVmjSYyIu1RDwMjYhXBILptrnXQMKaqAvxv02WRYLt31el0Ws
1oJ8jOY5TUUslDx+nXPpYj34RgvtS1DFQmZJNfu/Lw3Q+YK2PXUUC3e5p5Xa
Ehph54vq4f+0sZDWOjEYZ94Et6NiPmXoYSE85THHtPhXaIp0fblyHgvXesQa
SISvIBZ58obZRSy0xdwx9ytthqsRAvqF1lhIt8P9rXnSAtXhlN0szliYDKn5
XW7TCvzhX9atr2MBS2kcd9FsA8fnLwY/emFhzFODf3h3O5Q/c/7A54eFhhN5
t+T4OoD92fEot0AsvEAq7/U3O+BKGN/V+jAs+CVxs5xf6oSip6TTmGgsfPxV
VKsz3wVboZ93er3CQnfezSiVpW9gFhq50pGGBT3LM2rym92QHeI4IJfDeN+9
IItDfD2wHHy01L8YC+qrTeMOcr1gEMzz/Ec5Fjz89jm47eqDtCdjzgersWAm
XPEO3vfBTFCF9tMmLDwgxogbnumH00HhkoQOLAgp0o1eDPdDQqD94rE+LPyq
NQqR9BkAeoB6TwwWC0e9FiZXRX7AqQCuwgkCFnLzm1N1Kn5A1GN8yGk6Fkw8
+LZWrvyEsUfl9inTWNikyRoeY/4FRx49O7m4hAWmV0LFAqW/4OlDWzGjDSzM
aPcdSLAdhCH/w7M5rEMQznvw+aggFvb7c3Rt8gyB6eFdgsztWHj8YCTHUmQI
ymXD/pMOHoI+v7LA91JDYBllr4lO40De76k1l9wQqG663o9hGwbf+9ZHnZSG
QO4Gh7ZC9zB0+B4Sqj40BIZF2RV7Xo/ADl+2PyLHh4ANa1GVe20UbvngWm/o
DIGDyG6x79p4aLr3LrPlvyHoesP1sB5DALF7IQ9ljIdgBuvql7JMAHfvK5a+
FkNQW0JUeTY8BlV3VQ732gzBDUc1mR9OROC7y8Kn5DIEYwL6poI4IjjcwdKD
PIZgst61g+ciCcq9Sppwd4ZgS8VifKiXBGxeT9KOPBgCQqt2ZaQpGS7ftrwf
GTQEfzCvxI8NkKHo1gFz6rMhCHEvOvz7MgU2bzKpaMcMQZquYls1kQJmN39x
JiYOwa/T2y41nlTI8iwiz6QPQfNR8ud/61T4eyOw7mzuEAh+jqt6Fk0DgxsW
rzNLGDye2sPis5cOqR7K3v8+DoGHtuOnvjo6zFzfMjavGQLNGfGWfOtxQNd/
KBV/HQLpVMdojvVxiL9WwMrWNQQlrrrGKxkTQL/6mGDbPwTEp4reofqTcPKq
edWnIcb6GwLCn+YnIcpdMUGAOAQVEbTCmMzfQHDbuHV1nMGHtE6W5MU/cNit
37BxZggCrirpXOCeglDXvL1Sy0OQwmmjfqp5CrAuD7fvbA7BglTQvv6gadjv
YjbcxYaDwrGbh0R0Z+CR875P8nw4uPs7dGWZYxZ6ndZiHoniQDv1pItv7yzs
cer1+CWNA6bSQt+vxnPg45jzn+oeHGylJHyK+DQHHQ4Pdj9TxsHM5utOXtl5
kHYwWR9Tw0FDZlyVZsQ83LSXHzxxAgdPks+/FFqZh0a71bJYwEFnBtPvx24L
IGr3PfK3Pg72bZja3P+1AO62We5nTHBwqoDYPaO/CF9s7p9Ou4SDwFEVv59V
i8BrY7Tzry0O5s5uh0qqLoG9tdyKsSsOwvYbuBVmL8EHq+X+vBs48P/nzeUj
/RfYrL6VbN/FwbVDkdLX4v6C5ZXMZ1f8cXDsTIz1Ld5lKLzs4/zhCQ70f/R0
ej9dhg3Lc9o84TjYPMpDcmZaAVNLWUmXlzg4s5LdvO/RCmRdWlqoScJBgqeI
TN7qCixZdH4Xe4ODYCXWtu8+q3DWIqPgZh4OWmY1HJ8urkLKRe+QtlLGegqF
iZ/v/INpcwN72U+MuhPYjz039w+QucxJv1oczGtyfzlwew3iLiyI9jcz+Pt5
RvHMzBrQzNpnlL/h4JPzrtiHN9fhhFlaZ/AADv68E3nXMLUOkaZ3ckZwOHDh
kGFdv7EBBBP9QA0SDup6f1hK/9kANZMd1i8mcCDN52nH67EJIcZzGvRZHJAe
CqTWTmzCoFGrIKzg4LneTe1dV7dA2Sjld9IWDr4bZ/7ZTduCR+dvt86xD4P0
wb33Kp23oeecXqYh/zDcFWGWHhzbBrlzUg+zxIahX/yD1UlVJnTPcObS+o5h
6O1ae6jryYTaDZrVLOSHIWGzjIm1iAlJG7zmLd0/DLXtI0F+40zI8+xNOvuR
YXhs1ZDxdi8zatDXbbI/OQzmeurTj52YkYg+Jq0SDUPaLTYWgQxm5PbflK+Q
wTBMvvsZfXGYGX3Ra7pw3XQYDN+sMF+QYEE8eokHv1oOwyO1/4jc5izI7swN
zh32w8BfVTsS/IIFlekisrfbMJRcCr3Y1MGCWHXF67o9h6FK8cLyN1ZWZHn6
d9K+e8MgFaN6ukiHFRWghrsBD4dBl4p75vqAFa1DgjE2eBhGtoz3sVWwIhO4
rqQWMQxj5Eqm+BlW9FZHhzU8dhhezMn93qHMhpa0RQmk18MwF/rOpciFDelr
T3w5lTkM7ap77p/LYEPJWnXx8fmMfM5Tp7lwbGhKM+7W1Lth2OVjgVkUZUeg
edXwv8/D8MzLx1vClB3FndLam1E3DDkBOhpPItgR9aTw9nLLMMSGeHqfbmNH
x0/ScaaMfTtM7kCPGwsHijhRU1Hwg5EPT9HLDR0OhD/+MoZ5ZBh2LqZmiT3i
QGrH3TysyYz8JHpP1FZxoOBjp/77ODkMlkc96MyrHOjXUcHdfPPD4Fzh3bx4
jBMpHaWuua4OwxowFb7x5UQPNap+1W0Pg01ubr5IJSfqUY8uk+AcAdbQFzes
VjnRbnWXyNsCI3DiwXWvoFNcyPvICfcO8RGwJ1tIxj/mQm2H+U/LyYzAyUyK
floTF5I6TN7hv3cE2s4FEnI5uJGnWuXywIER4PDz211lxI3qD0X1H1AfAeL9
p434eG4kfMipJPTUCHTEl3DsGOVGrqrHnuFPj0AgS/6U7z4eVKnC63zMcATe
RVdaLN/mQTwqRK0YsxGo+bxdmlbDg2wPfsJMXB4BGaH2AE8uXvT+QMQCchiB
8kCTTXdLXsRywOF7sjtj3I/KEZXLiy7t1yhYuDkCP94maQ//5UUFytwh531G
YFXRtN7kLB9aUyLY5TwagUSi/GdaMh8yUfp4YjNkBB4pS5UmT/OhTMXnopaR
I2A9vd3vosuPFhXsZt7FjYCVq/M+rdf8SF/hSCdnCgNvEv8FqVl+9HofZ47j
2xFYnEzpntMXQFN7RwOqCkag4ldd3ec3Akhn7wcrkbIRWIjpybX7J4Bi5cM0
blSOgHqRTgj2oiCi7rERbKkfAW9SC4v4e0F0bI/a751tIzB636M9mF0IRcix
t/p8HwGHTPeCb+pCaHT38JuenyMgL1ZDs3EWQod2v/dXHGXgJVSPK8cKoWDZ
0EtBlBGoi+2+fqBRCP3cZaWG+z0CGLoa+dKsEFLapcp7ZGEETOjrBhm7hJG/
DCs94t8I6Ow/8fyfsTD6vnOokcI0CuasBH7bx8Jo987SVC2uUUiQqeepLhFG
d3cE+74SHAU1ed84zlFh1CZ9+cKMxCjwIyHfE7wiSFL64MGzu0ahaiPeFp0S
QTekmDkz942CesfYqsh1EVQvOUhaPTgKZlt989lJIkhIsrj2gsYoiPZaNdNb
RZArJiipSHMUOrESe3sXRdBniUt3Wc+MggKuoMZMThRxS+w3tj03CnEqvHYO
JqLIVnxb8dOFUdCWKJOf9RdF78R+sghYjUJ3/1vBpTxRxCJWiHd3HAXuuOlQ
5wFRZCEa8KXh6ihIPorVObQpivJFLsZL3h6FIieOY6aKYmhNWOnWHd9RkGGr
Sa80E0NGwpsGXY9HoS7M+ZT9AzGUKTQgL/90FPoa0/hOvhVDC4L5Ww+jRoFt
/PRbnQ4x9J/gI9zP+FFIig6tdJsRQ68FLlSopI5C4LxKQ66oOPrNrxATljUK
G390UpePiyMd/vXrY4WjUKmZUWdmI45e8vXpnfgwCq1lkfylj8URhTdXNvbL
KLzNeizP/kYcHeP1X5tsGIVV1TzWiw3i6DmP6S/d9lHgUXhmH0sQR6Pce8tS
e0bhvE361ZoNcaTK/S9i6dcoWLvMcnyXkkBPuHrcjPGjEC0/Ofj1qAT6yZmN
8qij8Mcqtz/ZTAIpcPrt2P4zCgLvn3ww9ZBA/hzGy5cXR+EKPW+WHCyButn3
9JetjYJDu1KweYoEkmVfKeZmwUMBCTuaXiaB7rJ1hzlz42E+Ms+jtVUCtbC+
daoRwkM9C+tCJ04CSbL6aolJ4uEEJ/VvyZQE8mA5j7kpiwcuk+qXXlsSqI55
90KrAh5mFS96YQQxSIj5b/cuVTz0zb3uytmFQc5MXfn3j+KB/szo5U4VDPq8
nRHcp4UHJ8M25pBTGMS17W2nrIeHp86uu/D6GGSzZXAi+DwelKdyXNTMMejd
pozoiDkeOuzIHcG2GMS0uTCtbo0HEq27eNgNgyw22juinPAQYINd07mFQXnr
adm0a3gwf/NArtIHg/6t3QnQ8cJDHMedzXOPMMhoTd8q6T4D33fLFyzBGPTm
3w6NuQA8tO1vC6WHYdDC6pyAYRgeAG/+dTsCg/RWWyffvsDDZTHe0MvRGJS0
ktKyloCHhCsmFisvMej38u03F9Pw4EIRF5qMwyDtZT3/kmw8cFwJ+XksAYNe
/pW6xF6Mh4yFLvJvRkxemjlkX46HfuYz7wRfYdDRpWaeyio8nE2krL5njD9f
fE0TbMJDqjExYzAeg0YWbjZe68DD1WYDz2jG+1UXdFObehl6BD28SmasHzSP
8ZXG4sFyNbQVz8jvx9yUmTcBD6v+DgmRURikMNd0oJuGhzstBrTlcAx6MJvI
sW8aD8uWQcP7n2FQ98wN0uMlPAyzskUeCcWgXTOodnAdD2H8enjJJxh0Z1o8
6RArAcxaN1omHmNQy9TvO895CECaKeEp9ccgzFSDEUmYAFtcUie97mOQx58E
xVNSBFCDng6texhU+/s6S/xuArDo3mCWuYNBgr918H8UCeCapTMhzdDLeVL0
i94hAnw4wG2BbmDQp4mJuPRjBKj4u/Uz8RrDHxN1N5e1CcC7eeSWojsGWY/H
GZj+RwBcBUFt3QWDSulX5QuMCKBRZPhN2pnhD7rWFpMFAXaXeARFO2LQRZow
zsqGANkO2//ZOzD8QaV/LHcmwF2ZcP9YewxapdRE83oQoOen/JVDjPg85eV1
1zsEUMnfSNNhxBlkN706PwJIkNXetzLiedIpWYkgAlhWr9/tYrxPjyS4dusZ
ATaZFZG5EwYlEqk/26MJkJ5gfMiZkd/vsar3uxMZeAT4crcYftUai454kE6A
VB318gPXMSiG4OI2kEOARa5Hy1OeDH/gT6ADJQRgQq0e/zH40sDz7wj9SIDu
7V/Fx30Z/hgl/x2tJoAx86681ocYNDxS2Xf0KwFmnAQm5xh6qYxEFUd3EuAx
l+Ob6ucMfww7hY33MfCFnzouz/DLAO6YExoiwKk416r9rxn+wPFqJY8x8uNm
T+jLxCC/IaLEAp0Ajuyr30SLMOgb9tP8uRkC0B7+rF/4yPAHNqI7+y+j7yQI
h96oxyCvQYf8jQ0CGEoyXXjYyfDHL43gS2xjUOHiqyz7C4MkfnHbveMdg84C
ZaeLJAy6/pNwnFN0DMpkFYiiMwx//Pgo4ig9BreSQnbarmOQwI/n01/kxkBy
86KKIrckch6w6xBWHoPKW9z+tzGSqKL/SLaH2hhYqD7BqypIIs5+zoDm42Ow
ZzFrh8NRSWTdN3plJzD6YLcPpv/0JFFJ7wd1H/0x4LV6tv3XQhIx9YYJ9BiP
wfeq0jhjN0lk3mMzqXBpDDQ+xlJXfCRR7ne1lkDbMXjP9+HBVJgkWu1mfzPk
MgZPpg1D97yWROe6hx8cvjEGs3fcP7wslEQZ395bRNwdA7Uzia4qNZJoriv0
EOXBGGwrLA7OdEuiM11WPFpPGPNvKn3qIkiixE5VWsLzMSgPLsv8PCeJJjpY
G6djxmBt0W0in0UKaXUMpegnjcGY/3ZwvJgUim4v9XmTMQYEFzbXWwpSiNQW
bLaaOwYO3zgVVE5IIY22ywculI7BUXZ0pMVQCoW1HuQoqhiD7un9fxVtpNBw
CzOJpXYMauuLPhh5SqGDLYM1Ns1jEHyIJVHhsRQKbC5OrOhi8J9QX134QgoN
fA26wz/A4KN36XRXuhTa+/WSkTtuDNzfMck/KpVCfk37FRuIY5AeEvjhY60U
6mrcZpacGIPjfRZrrt+kkEzjz1Gv2TGYJFncCsVJIa+GwsrOZQYfNrwuHONS
6Gt9QNyerTHA5Q+bjS1KId6xws91LEQ41aB/io1JGlXYi+314CDCE+KdvR68
0sieEBArwUME7WR3aw4JacRpP7n1lZ8Ica+1r/bISqMy/EXP28JEGEiXNf+i
JI2s7epxO8SJUMp81rpaTRqx4pXOdkgS4fRDUaVvx6VRiW18xb2dRLh3gplC
0pZGlqObcnK7ifDoZqDksq402ra5FvNdngiGHwRnt/WlUeHIwMYDRSIwnyua
XjGURuY22h4KB4hg1eH1H/a8NNoYzscOqBLhFvtYYpKRNMq1Fvkv8AgRPu5N
slVnxCbDj8oPHCMCdzlfYu45abRqNS47dJII+9Ld6ifPSqO3uAsvQrWJjPMr
+/jGGWl0zqp2Te00EWpYeiZxOtJoaUjhGl6PCNNTLk+CTkij9Cuxv8INiGBx
qN9shoHv7NC67jEjIkQWv0vdw8A/d9m9jGxKhHl943Myu6RRCrZPJuYiEaTP
q1IJItLozGXNSM3LRDhpK7VwjUMaTQ3mro5bE4HTlPy8blUKJVoKuSfYE6Hl
0Iz92KQUgkH/H8iZgccgR3SAoefEJRqadiPCh6UvBikdUijul+m75OtEWPbP
W9b6LIU0L1Xv0L9JhAXZFGpDlhSi/dwbvuBFBLEC9ljlaIafLWKWM+4Rgc8v
QO2JnxQ68fOfy3k/Itz+4xHT48Tw90XX/pWHRFC7+U1S+pwUivjRo5MTSISD
O3fPex5m+P3iyRKzECJoJh/p7MNIIfxAttRmGBFG6z8MmG5KojBzgWeFEUQo
7rvXsUSSRGoDfkuXoolw+FtiZVerJMJdoDixxBGhYG3zIL5AEoX0G/e+e0UE
X74owxORkujghS9aNslEeGgI1yc8JdFg354iznQizNX2SqwZS6JAsxeYikwi
KLXvOOCvKomU+lZCHXOIUMuh/8NHQBINmDov8BUw5mdkaK1NY9DD3m6HqmIi
VAq9Joh9x6C9pse/u70ngk97tMqPYgzq6Xl7SuQjAx8HKtJl3Dfum/AV1H8m
Qr7UVJMX4/yT6/EVv1HN8H97bqMH437UZUwKxtQTQe+g2aT2Xgy69/38XHMT
EURPvI9YYcYgGePPdl6tRFD/XHYpZ0wCtXXv/razkwh0yYw9F+okkJdR5InO
biKYXJaU40mVQFLdf3N9+oiQndf1bMRPAn097yi65ycRnt8MWeizlECe37qC
erBEEKG+KvurIYEkzh+d8R8hAmFl7KmFqARq6HpjozhGBLJqwcbKvDi6do6n
8weZCMe3dq1P9okjka57x4LoRJDIal9ULxNHNYZj2Qd/M/QAqCTEiCPXTkNh
3DSjflXBc+G2OBIwrAh4Ok+EtEMC5++biaPKjl1Th/8S4bpFo+m9w+LI0SDc
irBKhO9xL3fMiYgjno7FtogNBp/fxN/PLYmhirP2GseZSPDv1Ur8Q6wYsmvv
eEthJcFY0dFXr6rFEMdZdcGXnCSIy/5P7EyGGCprS3+kxUuCotKGzGfBYshK
n+v3hAAJqmIrH7tfFUMsbXcvvxIhwS9vVgzZSAyV/IdvOS1Bgnflmg83joih
S61nj8xIkaC2yUyrUkoMbemVv0mRIcHd8fKTosxiqKBlJ/9ZORJ8GTLbEJoU
ReZ6z/wX95Kg+u6UX1m/KFpvnh9/o0SCipJWzflqUZRzxvaS0UFGfvJt3gM5
osikue3r6iES3CH09JnHiKIV3cNqueokoKbZ5nsx+qfMr6npF46TQBvPzbLf
XRSd0+Xg3TrFwOPvXP3IXBQtNnn5FemQ4CSHo7A7iKK00yM0S10SnPF3tqAc
FEX6Tf9dZNUnwc+E0PPz0qJoDpU1vjckwXxH/4coblGU3CitamtMgtjlHo3y
VRGki56mcl1g8EFo3GE/IYKmGma5PlmQQKCspS5qSAS9AmtfpyskcD2A1z7V
KYJ0Gloo/LYkQPbqI87VImhC59CFagcSxAx0xrKUiKDY+uR6dxcSvNyevSCe
IYI0ddgOil4lAb3/+c6klyKIWncrucGDBOYczhKhISIoWhvH4XmLBE94WmDI
VwQdrztzT/IuCer6KnJiPEQQUesdqcWHBBQ7x5g8exEUUStpeucBCWSav7FJ
XRRB6lohtTKPScDqO3CeclYEjdZMK3cFMfxhHPWWWVsEhWleSfINJUGkrMBd
ryMi6FDNVzb55yTwkEhRP6gkgnCnVO72RpKgc1os4vAuERRcnTT2MIYEeVnO
rI/FRNDBUyzGSvEMfpmCDXgZ/fWvKs/qn4kk2L3HXgjHLIICTmIVn6SQwKcj
UIOyKoyUqk6/UskgwZv+p08U5oRR/4kSluG3DD0rZ1gzxxn9/hcJr7BcEoTZ
tb4xGhNGe088wR8pZPDxaedZZSyj/6/8c26shAQHzVW3jvQKo/vHLb9ElpGg
XD4mx71dGO2ubNx3ooKhV5vRmaYGYdR17EA8tZKhd5PpEHwRRt6fXzHF1jD0
vT6uMlYmjHYeY7ql3UACe1N1nrRCYdT2yWNk8isJDB+LHPPOEka3j/4ySGwj
gWhRkalTqjCS/ASfdbtIINgQtuWcIIy+ahTJz34nwX9MFQ33Xggjzwqx2NR+
ElwQKB2JCxNGYhqBW2d/kSDhpuibqkBhVP9x8sbSEIO/y2rsND9hdE3dApc5
SoK5yellobvCSPhjvb4xkQSF6ffRyRvCqPqIcsU/Cgnk3jrfsnIVRq7l8XJ5
4ww9JowWPe2EEf+RrWjzPySwMHfE3LYURp8/XNvYmiHB5u3hWWtTYeR4+Mf1
4gUGHykWDw4YCCOeD9rYy8skYNb2dhpBwqhcrUCPbY0EGe+I+91OCiPbMpHy
sk0S7IjHXmk+LIw41B7L2jGT4VhdjficsjB6/348ipudDIh88xVNThhdOWS+
9omLDLbeBfXpUsKI5X3tVWc+Mpilf44UERZGxaqKvwSEyNAYLPVSm0sYWbyL
1a0RJUOS/8skyW0htKWy8f4qhgzHpZPF0v8KoYJSdxmxHWTgLj4e1fJHCJmp
9Ec07iJD8LTHreckIbRWornquYcMz035zciDQijnYJ6blAIZNg+nvv/2TQgZ
lwj9aFUmg2CTOkm7UQgtH3iI7qqQYasQE3CkQghlFtNKdx0mg6OIgFB2vhAy
PGC245sGGbjEz18ITxFCC0XVz++fIEP02Yh1QpQQStu/b1leiwwsjVrHMgKE
kH5RjEsfkKEuRZe96bYQmlFe63t0hgxHfhxsOu0ohF4XuuoonyXD4PmZFWkz
IaSr3Fv86xwZMnMVk86CEPpTcFIq2IQMd9NLC7+qCKEEpZwwVXMy6Krsjnu2
QwjpFAgsDV8iQ//aBcE4LiE0rvjA6ZkVGeZUw5xqJwXRy3xKj7odGY7epP/r
axREpxRNtIiOZDjEUmFnkyiIqHlfCqNcyfBRSVLF0kMQRSnIY05eI4Pmn1lK
rZYgOpb3IpR2gwzx3IUNkfyCiLhvdT72NhnudEytNIwKoPBcZwcdb4a+Md4F
l4sE0JF937t/+5KhUP3K1gVfATSac/xUkj8ZehxWnr5HAujp3qz8MwFkyLiu
KX+HWwCp5vCJzz1h+OFeG3NyHz8akr8fnPaUDFf2XH66P5EfBWeTZg3CybBb
+bbhfmt+tF/eyO5vFBlkh5TS0nfyo59Zn7veviSDyQv3dxF4PhSwR+6ESQIZ
2jRcdP6l8SHFrMjctSQyYFsvfZ+35kN9cssi+amMfBUldwdg+JD/W8egi2/I
kKuWer9ggBfJy32b3s4iQ3tBfcCjKF7UnXnUpiSPDHpyvZ0c//Ei392ZHVeK
yJClta/YYoMH7c7kOcb+jgwHJqTC75XzoE5Zn+wPH8iwR7ah1OcqD7r7ZkzI
/hMZGqqMpq/u4EE7Zc8F8FSRQe1OzIRNDzdqzaj487mWDPMrrv+5BHGjW7tk
rVwayeAvUzodc5gbSWaEtwm2kOFy+KPSJRIXapJZUq9tZ/D16m5dTiwX8ki3
f3vtG8M/UbMpHxEXEpPpFBDvZeAVVGs9OsuJ6tPUHzUNMPDlWVRCOie6ujNj
8uYgGdKy72Ho5ziRUBrXZelhMnBqlE9or3Kg6h3eLW14ht9+1D63zeVALqn4
w94kMqSU8bBdNudAfDsM3sjSyNBKTmjW3WZHn1PK+bonyMBfRaRplLAjB2kZ
f78pMnySVaTpWrEjrpRn43vnyODx60XCEw52VC61YNG/yKinJ5rZ7BVsyDbZ
9uvjFUb9dqTaUZzYELtU+6H962ToXlb+qirEht69Ppw+uEWGqKkKh/V6VnRF
Mo0nhIUCe6LzT9veYkXMrzn8DnFQ4KZ4eJ/LLlZUhLlDG+GmwGuB4k35XhZk
kTRi/pyfAuIjOGxpEAvalNBv1BCmAM+BynhhdRaUl1imQhKjwARBS8yBzozM
JHakvpCkADcHXjY3hRmtvXrKdWonBbLV+J7PmzKjbPE5H7osBX4fPWRygYMZ
Gb2ypsTJU+Bn+IuevjomtCzWagaKFDDdDKrz92VCbxIO1f/ZTwGlgL/WVmpM
yEAs5cBrVQqMLH068mdwGxbi2ZL1jlDgqTax6Z3pNqSK3uaYP0oBmkljLO+3
LdCLx3mnn6RAwbXpC/yGWzAjokcy1KZAe6Wxcl3nJryOe2eyjCgQmG3ML2+8
CadFpGqz9Chg0DQ8d+bHBvyODVE2NaAAxzr74B7bDUgQnklcP0+B2o8u7Y3j
66Ade4WtwJQCWhs0LhnfdaALNd+xuEgBVs3LDhqc6/DypcoY02UKWL3Y9GJO
XYOTQq+NSq0p4BQdr/v48BqQY1iqrewpsHmvMeJN1z+IErypyOFMgccyEoJ2
7v/gWAw2odyNAuWqtkWFbP9gTECXxeE6BbBJWg73c1fheXTJbd6bFNAxaA35
bLAKRwQw+EovCpTmqlpbzqzAyIsn51zvUWDF+f1xvcQVCOWfqhTyo8Baw3ar
J1oB1ReW++oeUiBsGX+vZmoZsHxNcdcDKfBFo0NNOnUZgqIOMEmEMPD1pPrd
Pb8M+/kSb34No4Dz+b7TpZt/4Wck08itCAqkTIm7ln/4C495bxjsiKYAcsU3
X7v6FxQif31qj2XoM4h5U7nrL/TxIPl7ryjwjvSk6yl2CR5EFL3cnUyB2xeL
X1TFLsEeHvGt7jQKnFEV33vSeAm6wwNvPMikwAm9v0p/uJfAh/v30L4cCnDF
xXN/bl+EXeEW+gP5FDDuCAwMCluEDq6GjwHFFKiZryYd1l+Eu8+V5Q68p0Cv
nHv+B45F2MGVEI0tp8Cl7Hsj4+0L0PJsaz3kMwXyop/Y1IUvwC3O69fVqhn6
yAVE7DBaAMyzH4OjdQz9bt3+NCWwAI0cOnrhTRSwr9FklhmYB4+wgg9HWylg
Iet0+vWreRDjEJUld1Ag35aGOW81D7VPH0dFd1NAgT1q316ZeXBnn/h3qo8C
Li8q20RIcyD01Pzq+A8GvlWCEVfuHFSx1f2Mx1JAoHN+//K1OXAOVdRFIxRo
sQ2+13twDvjY4t5PEShgxvydQ5g0C59CNnYmkymwHS6cq3JtFuxZr0b8R6cA
Zo9sC2VmBrhC+lfmJykQUKZkKO8zA+UsWm4Z0xS49vWdEnFtGqyD8wbOzVNg
KCmXLBg0DWwswmhliVEfssqmRWzT8O7Jw9LsVQo42O5/X/R8Ci4z06XNNiiM
8ychQYBvCpiemD3f2GboHb3wYjD6DxQx1fwtYKVCZd4mC5vwH7gYtM/lEicV
bsbOsKTG/YaN7Zg+Zl4qsPxMsM8S/Q15gWva7wSo0GAts7knYRLMtl2LrUWo
MBXZFaIoNgmrAb2SnBJUiCQ0r9bET0DW1smwj1JUUAvk0psVmQCjgJxFBxkq
GBD0lPtix+HvpoATnxwVlE1kre4IjUPG4wc9X/ZSgSyffJ0WTQeDTYqmmxIV
PHJsShE/HeYfmRQKH6TCDl99bFIkDVI2vkjUH6ICaV2XzsRDA71H8qEe6lT4
HBePi3tOhZn1F/MSx6lQ8rc4wI2BK/Hhqn3zKSpYl2nkxDLqAq07d9/WoUKz
+9SN/91Xf/t/P7lTlwoJ8Cb2chjjHrB2PL/jPyow7d3btZeTDFr+WWI+hlRw
8jEbfc/oA+j/+ILljBl83RX4K8zoG2Me3J/9bkYFG+3Qm67RRDjxj2Trb0GF
X8ldgw0ijL7Yz6hL4QoVDvXYu/urjUHU6ufjP2wYfOU7vJvUJoCGn1xuoAMV
Ti6O3V83xjP66kiRgy5UWBSbsCM6jsLz+8uBQ+5UOF5v/fWr7wgcXnGcDvWg
wp1qr+3umGEY9v1mffgWgz/rswf2l+AgdPloB/4OFRR1n4sydQ+Bim/m0Qgf
KgRKaaXem8XC4F+e7GMPqGCH/miWSGAhyMdHiPKICqkVgeNtpwdh/9+xxzFB
VCA07LKieP2CgXvn/miGUsGkeqhGJucnPFqquDLxjArc4+wScSM/QOGebFtC
JIMfmfUKS8wP6F0MVz8dQ4UjY6zPQi4PgJ/3UuZ0HBVocd/1lNP6Yc+ivUBK
IhUOk46VW9P64Nvdzof6KVRwU+CflVfvg3sL6pML6VTou91PVOTthV13Myzf
vGXouaPq5bWq79Axz9VyPpcKN95kf5S40w1ed7wPrxZQIa4kkkvryDeQnsdn
5JRQgX1evGNsoxNavAz4LpQx/FTSI8za3wE358ofbH6kwniyLWv2u3aQ8JIZ
L6ykwulHPPuqX7VB4+wzC8sahh/isXKnw1rh+u2FJpYGKiiYz/5WDGoBkVnb
Q++/UsG8Y+mxXUgz1N5qT7Npo8L94tiU7piv4D5zmIeriwrbbimnHHObQPBW
2v2K71RQ0sCobjY3wpdpDppjP8On/y7l8mMbwPnmHXP+X1TwDSxIqTpeD7zT
Iw1VQ1QQsOWKqCishQpPfRX3UYYeu+XU6g/WgP1UWYoIkQpvXvPahzZWAafn
Dq4GCmP+TMiFWtcvUPbnqc+NcSrwGT56KipVCdY35siYP1R4nKq5WwP/Cdj+
WJu1zFChy870XXNZBZR6tNZ5LTD8nPHrmWv8R7D8feiAzDIVlrNKb7SHlgOT
R8rrzn9UkMyPO/w89AMUTrJx+G5Soe3qZvrZuDIwv37bew8zDXzMnKutbN7D
xgSO2MNGA6UC3V1FJaWQe03P5CEXDag/j+m2YErAZOJdjSIfDUJW9Kjk1CJY
vSql/FOQBnL5x/hNTxRC1nhIYpAoDQKP7HxxYSofzl+dYVXB0MCWu3mvQmUe
LNGv3MFJ02BvU53Trte5kOHeTHi6iwar5TeS70fnwFm6itGRPTSom3+rFJKc
DXNur6sI+2jgdULeIfxLFqTQWBQjlWkgHXnSAvv7LZxxu5lwXIUG1qb5lPpD
b2GKimWmqtFgQcWv901YJiS66t5+qUEDp21IzMC/AUQtGdU6QYMHx/NLz/Vm
wKQL5tykJg08dulmbBDTIY7ypPIV0OAU6zEZL+F00HKZ2qt7hgY6O2iUWIc0
oJEt42b0GfPXHHx2dqVCtHPTdso5GjxsWdlHMk2FE+QDN8+a0CB5oGylYjYF
SE6Jw4sXaGASr1qVWpACESQmg8xLNCB4Bu9xeZACGk43PhlZ0eAr646bc44p
QCD+2vPPlgbqHyW6ze1T4JkjepnrSIMhASb6Ha8UUCMWbV5wpcGU5vOj+okp
MOwgfmPrKg0uJR8V/taTAiFjgUNFN2hg1Bs5ti2ZCgcdfv93+TYN8jIfD696
p8IgweIjqzcNJq69NftKSIVA+4bdZb40xv4v+NbmShooEZSjbf1pMFpvnj44
lgYDdgnrXAE0yFKY6jG9lw6P8FvXPj1h8L90AjcglgH77K4POj2lQfrl1X8+
jRnQM/rjjEA4DRQNi85c8H0DfrY6H6qjaEAfENBqkM4EudGCXVdfMvj08fOJ
CsiELhvRKNEEGoRt6nzeRc+EeyOP/zUk0cAypHMX+4W3IGMz4e6Zylj/h1xY
b/1baBs2/yn5hgbfU+aL+A5lgZd13enWLBos0plKjd9mgfSw4vs7eQz/JuOt
DohnQ7NV3M5dRQx+n6n+Vo/IBk/cRnhXKWN9gblL69vZIGF1dcX3Aw1ON0T7
C/vmQMNQv6v8JxpQutSGJaZy4NoVrYHeLzToE9g4muqUCyJDefColvF8loOt
5mAu1FwWLlVqZPipfuZWvGEeuGIfSv9qpoEdUzxFqyYPBC7Tnz1pZ/i/z3ff
4P58+DJo9lflGw2E4jJebSXlg5NljfNwDw2UFUJlL7MUAM/gvr6wARrsJNez
RF8vgIpLL7XVB2mwry9HTf97Adj9Wisaw9HgpUq43AGVQuC45CYZhWfwvb8o
5s/zQij72fv0BIkGnzTvvj9JLARri1OLVCoNeoP+uX87UsS4F+Q4xk7QINrl
fKh1UBGUXBTs0Z6igfv43/mcjiKw/PFA8/csDSSaPSY9eYth25xakLhIgxd5
dXseGBRDwYCJxJkVGvxINmV+FVgM5uZVIbNrNDhuhnRelhXDer/8fOoWDVrd
zhkcGymGnAvR9gYsdBhOVfL03i4Gk/7Vb0vsdLiW/HZkp0wJrJq5nHzLTQfZ
PeEuezRKILPve54x496wYtr50VGvBM6ZnRBbE6KDeuz5F33GJbDUm/UkT4wO
fuEyto5mJZBuyj9rLkkHu2drLrxGJaDfe992ewcdys+i3VhUAnMm5M5iWTrE
uZt4fFUtgeQeo+NX5OkQKM7ykyheAromlTlsiozxpAtxWsvFMPVdTuTDfjrc
iPSS/N1bDInGUYF2qnSYOjVluZ1VDDrfl6e4j9Ch0tk9Ie92MUwYOVl/PkqH
64c53TaPFkNc97d255N0UDjfcOrgchFoGh07KqhNh7O+D7EOZUVA/ZaZVYPo
sNH8UbTTtQiiz/MKXdOjQ1PCUGaaaBEc/+bzWMyA8bzhertIXSEQzxF/N56n
A2uyxL6rToUQ0XXuyk1TOhT2jbf9YCoEjXOfWqUu0oGT+1F6VmoBjHbKqrdZ
0oEieZdV/EgBhBlGZN61pkP+1yjp6y35oNa5xC9rT4cBGX/ijHk+4AwcHn5z
ooPnwrbsEj4Pgjs6J+670eHR/gqROrc8OGigYbn3Oh0e4ML0Xv3OhV/tGc19
nnTQqt8z1OGZCwFnuQ8/9qKDinHtiRxGvSi1e2co36PD5X9m3709cmBAn8A7
eJ8OKQp1pSH0bPBvM3gQ/JAOOVnc1rJO2bBX/yNdNZAOTz+evxc7nAU9rTIW
I8F0IDZH18ldzIL7/z1vehZGh6AS6iTm21vY3bqgqhFBh1YWJrcm3bfQpWeX
RnxBh/2Z4Vt21Zng3dLO/SKWDh+Uw63VjmTCTr0j90++ooP/1bEffyzeQFtz
GpX2mg7mMY2yRP0M8DrDaR6XRoct+kGd6lPpINl8p0Enkw7sHJfqqGpp8FV3
9OCfbEa+P/1uflNOBc+v+ilJ+XSwb+tHP/elgLjuB069Yjp8pMXIOuxLhvqm
HT5z7+hQN9na0qr0Gq6dDiOnldOBeUIux0YtCYSb5kwNPzP4tdEduqmVCNXI
pu5vFR1G2jykzhi/AtfG1v1ZdXRovmxau8MlAQSQ2muTJjp8Opjz5XBAPHxu
SGFfb6HDPkfRyi8ZceAI7N75HXRYO6yhQGiJBZ6G28SL3XRY8pWw7Jx7CR91
ho2Z+ujgtDGTnLrnJdjW69WU/KADMsQRiBXRwKHzXskKy8jvnrdljdoLeF8n
lcg+wuCTZGEx/iUSrmiHspYT6CDIe4j/oXEEsNTNeNmT6fDXqy0reOY5lGhZ
EXjodLjdb5LGlPYMLtU2n6+cpEMwSdJ15lIYbGmqVrlMM+p37lWn1s6nUFDz
WkFonv5/3wMVurEohVSP/1/8P32oRMI=
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQbQwGj+0ZoADGF65ctNZbbZ49Kn8dnK/7p4bhRdZ+
OD/21zPGrWHH4fzTX15FLr14Ds5Pllj3trD8Mpw/m+WCykGH63D+rIkrCsyj
b8P5a++uS29Nug/n/7XuX+U46SGc3xa5SPvK7McI98i9Wr6v6SmcH3foxE+R
hOdw/qdtTNf+pb6E8xcHFa518HwN52+3s+YXC30L54dyzXELD38P53fsm2FT
MfsDnC+hIDi7b/5HON/sqvL3gEmfEO4zSpGInfkZ4d//+SrzZ3+B8+0VxPR6
e77C+SIvX/45MvEbnF/BGnFyRet3OH/hxIkNh0p+wPm/j/74o1rxE85/4vur
zDTrF5z/v1ZzW1/Bbzj/vqzKA9miP3C+r+BO9sikv3D+2zXVX+6m/YPzZebc
uMcX9R/Ob69luGWlwuAA40s2aqtPXorgF61TLnaUY4Tzn6zftFBkIYIve5vv
vK00E5xvue/CR8bJCH5eqeb3VyLMcH5WmP9vzT4Ev56b51GvIAucX1aht69n
EoJvyi838yEXK5zPW7UkLLoXwV/D90NIm50NzteN3nhkah2Cf7yaMVKVgR3O
1zgm94arEsEXSeYva92D4ENyC4cDAHpNMm8=
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {0.33716300673794375`, 0}, 
     PlotRange -> {{0.34338384691606727`, 0.7415176183159718}, {
       0, 6.574797017442831}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Dominant eigenvalue\"", TraditionalForm], None}, 
     AxesOrigin -> {0.33716300673794375`, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{0.34338384691606727`, 0.7415176183159718}, {
       0, 6.574797017442831}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.653922673216008*^9, 3.6539227107321234`*^9}, 
   3.653922827310432*^9, 3.653923001782906*^9, 3.653924019844111*^9, {
   3.6539246160874214`*^9, 3.653924642428119*^9}, 3.65392479804993*^9, 
   3.6539249277666636`*^9, {3.653925437953387*^9, 3.6539254660406413`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"-", ".2"}], "}"}], ",", 
       RowBox[{"{", "1.0", "}"}], ",", 
       RowBox[{"{", ".5", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{".5", ",", 
         RowBox[{"-", ".5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".5", ",", ".1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0", ",", ".4"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Cc", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"q", "=", "10"}], ";", 
    RowBox[{"time", "=", "1000"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"datatest", "=", 
     RowBox[{"GenerateUnCorrelatedDatasetsWithCov", "[", 
      RowBox[{"A", ",", "B", ",", "Cc", ",", "q", ",", "time"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"MatrixForm", "[", "A", "]"}], ",", 
     RowBox[{"MatrixForm", "[", "Cc", "]"}], ",", 
     RowBox[{"MatrixForm", "[", "B", "]"}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"MAR", "[", 
     RowBox[{"datatest", ",", "2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "]"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"MAR", "[", 
     RowBox[{"datatest", ",", "2", ",", 
      RowBox[{"{", "}"}]}], "]"}], "]"}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6548828827814426`*^9, 3.6548830650137773`*^9}, {
   3.654883100412843*^9, 3.6548832218902655`*^9}, {3.6548833999767895`*^9, 
   3.654883402152194*^9}, {3.654883567372912*^9, 3.6548836141542*^9}, 
   3.6548836958209467`*^9, {3.6548837317404127`*^9, 3.65488374073903*^9}, {
   3.654883908439535*^9, 3.654884006337716*^9}, 3.654884138650959*^9, {
   3.654884384581809*^9, 3.6548844480631266`*^9}, {3.654884484451193*^9, 
   3.6548844848743935`*^9}, {3.6548845307544794`*^9, 
   3.6548845720465536`*^9}, {3.654884625296051*^9, 3.6548846414974833`*^9}, {
   3.6548846795985565`*^9, 3.6548846843721647`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"-", "0.2`"}]},
       {"1.`"},
       {"0.5`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "2"},
       {
        RowBox[{"-", "1"}], "0"},
       {"0", "1"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.5`", 
        RowBox[{"-", "0.5`"}], "0"},
       {
        RowBox[{"-", "0.1`"}], "0.5`", "0.1`"},
       {"0.1`", "0", "0.4`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}],
  SequenceForm[
   MatrixForm[{{-0.2}, {1.}, {0.5}}], 
   MatrixForm[{{1, 2}, {-1, 0}, {0, 1}}], 
   MatrixForm[{{0.5, -0.5, 0}, {-0.1, 0.5, 0.1}, {0.1, 0, 0.4}}]],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.6548844493735285`*^9, 3.6548844888368006`*^9, {3.6548845332660837`*^9, 
   3.654884573824957*^9}, {3.6548846290908575`*^9, 3.654884643119886*^9}, 
   3.6548852568656683`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "0.23171286354624065`"}], "1.0020728403554724`", 
      "2.009519349689718`", "0.505492182379305`", 
      RowBox[{"-", "0.48529769083774266`"}], "0"},
     {"0.9866905274978188`", 
      RowBox[{"-", "0.9964459087220645`"}], "0.009051642389688135`", 
      RowBox[{"-", "0.10436460308340872`"}], "0.5027754175237371`", 
      "0.10824006858090335`"},
     {"0.516006297816781`", 
      RowBox[{"-", "0.012961961839219284`"}], "1.0043308730666474`", 
      "0.10396961578518332`", "0", "0.39323941077081026`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.65488400833552*^9, 3.6548840230931463`*^9}, 
   3.65488413927496*^9, {3.654884379315599*^9, 3.654884385680811*^9}, 
   3.6548844493735285`*^9, 3.6548844888368006`*^9, {3.654884533281684*^9, 
   3.6548845739185567`*^9}, {3.654884629168858*^9, 3.6548846431822863`*^9}, 
   3.6548852569592686`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "0.23090690344494402`"}], "1.0020636653958253`", 
      "2.0095098548879142`", "0.5059125331911315`", 
      RowBox[{"-", "0.4849856443543871`"}], 
      RowBox[{"-", "0.001070907749388117`"}]},
     {"0.9866905274978188`", 
      RowBox[{"-", "0.9964459087220645`"}], "0.009051642389688135`", 
      RowBox[{"-", "0.10436460308340872`"}], "0.5027754175237371`", 
      "0.10824006858090335`"},
     {"0.5211755286969861`", 
      RowBox[{"-", "0.013008463108511564`"}], "1.004331176071365`", 
      "0.10239564121698758`", 
      RowBox[{"-", "0.003930230797839274`"}], "0.3947634414997315`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.65488400833552*^9, 3.6548840230931463`*^9}, 
   3.65488413927496*^9, {3.654884379315599*^9, 3.654884385680811*^9}, 
   3.6548844493735285`*^9, 3.6548844888368006`*^9, {3.654884533281684*^9, 
   3.6548845739185567`*^9}, {3.654884629168858*^9, 3.6548846431822863`*^9}, 
   3.654885257055869*^9}]
}, Open  ]]
},
WindowSize->{890, 690},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
FrontEndVersion->"8.0 for Microsoft Windows (64-bit) (October 6, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 73, 1, 31, "Input"],
Cell[634, 23, 1102, 21, 112, "Input"],
Cell[1739, 46, 13221, 304, 1312, "Input"],
Cell[14963, 352, 1041, 22, 92, "Input"],
Cell[CellGroupData[{
Cell[16029, 378, 5483, 141, 552, "Input"],
Cell[CellGroupData[{
Cell[21537, 523, 2434, 56, 50, "Print"],
Cell[23974, 581, 3576, 71, 50, "Print"],
Cell[27553, 654, 1660, 30, 23, "Print"],
Cell[29216, 686, 1257, 20, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[30522, 712, 4638, 128, 552, "Input"],
Cell[CellGroupData[{
Cell[35185, 844, 1708, 47, 50, "Print"],
Cell[36896, 893, 2928, 65, 50, "Print"],
Cell[39827, 960, 937, 21, 23, "Print"],
Cell[40767, 983, 525, 11, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41341, 1000, 12812, 320, 1112, "Input"],
Cell[54156, 1322, 48170, 843, 202, "Output"],
Cell[102329, 2167, 51450, 896, 165, "Output"],
Cell[153782, 3065, 48155, 842, 185, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201974, 3912, 10853, 293, 1032, "Input"],
Cell[212830, 4207, 47442, 833, 202, "Output"],
Cell[260275, 5042, 47283, 831, 163, "Output"],
Cell[307561, 5875, 46313, 814, 190, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353911, 6694, 2724, 72, 232, "Input"],
Cell[356638, 6768, 2451, 69, 50, "Print"],
Cell[359092, 6839, 1406, 31, 57, "Output"],
Cell[360501, 6872, 1488, 33, 57, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
