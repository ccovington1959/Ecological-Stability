(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    206959,       4103]
NotebookOptionsPosition[    206043,       4070]
NotebookOutlinePosition[    206399,       4086]
CellTagsIndexPosition[    206356,       4083]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{
     RowBox[{
     "Below", " ", "are", " ", "a", " ", "bunch", " ", "of", " ", "built"}], 
     "-", 
     RowBox[{"in", " ", "functions", " ", 
      RowBox[{"(", 
       RowBox[{"from", " ", "MAR_mulitank"}], ")"}]}]}], "Subsection"], ";"}],
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "RowDelete", " ", "takes", " ", "a", " ", "matrix", " ", "and", " ", 
    "deletes", " ", "the", " ", "specified", " ", "rows"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RowDelete", "[", 
    RowBox[{"x_", ",", "entries_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "list", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"list", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"entries", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "entries", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Delete", "[", 
       RowBox[{"x", ",", "list"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "ColumnDelete", " ", "will", " ", "take", " ", "a", " ", "matrix", " ", 
    "and", " ", "delete", " ", "the", " ", "specified", " ", "columns"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColumnDelete", "[", 
    RowBox[{"x_", ",", "entries_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"RowDelete", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", "x", "]"}], ",", "entries"}], "]"}], 
      "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"AddZeroToRow", " ", "will"}], ",", " ", 
    RowBox[{"you", " ", "guessed", " ", "it"}], ",", " ", 
    RowBox[{
    "add", " ", "a", " ", "zero", " ", "to", " ", "a", " ", "row", " ", 
     RowBox[{"vector", "!"}], " ", "Wherever", " ", "you", " ", "want", " ", 
     RowBox[{"it", "!"}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AddZeroToRow", "[", 
    RowBox[{"x_", ",", "j_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "l", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"l", "=", 
       RowBox[{"Length", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"x", ",", 
          RowBox[{"j", "-", "1"}]}], "]"}], ",", 
        RowBox[{"{", "0", "}"}], ",", 
        RowBox[{"Take", "[", 
         RowBox[{"x", ",", 
          RowBox[{"-", 
           RowBox[{"(", 
            RowBox[{"l", "-", "j", "+", "1"}], ")"}]}]}], "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "AddZerosToRow", " ", "will", " ", "add", " ", "any", " ", "number", " ", 
    "of", " ", "zeros", " ", "to", " ", "a", " ", "row", " ", "vector", " ", 
    "in", " ", "any", " ", "places", " ", "you", " ", 
    RowBox[{"want", "."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AddZerosToRow", "[", 
   RowBox[{"x_", ",", "entries_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y", ",", "list"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"y", "=", "x"}], ";", "\[IndentingNewLine]", 
     RowBox[{"list", "=", 
      RowBox[{"Sort", "[", "entries", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "list", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"y", "=", 
        RowBox[{"AddZeroToRow", "[", 
         RowBox[{"y", ",", 
          RowBox[{"list", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]",
       "]"}], ";", "\[IndentingNewLine]", "y"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.6543371300538673`*^9, {3.654339770352119*^9, 3.6543397721802597`*^9}, {
   3.6543398334089613`*^9, 3.654339845884946*^9}, {3.6544965214292307`*^9, 
   3.6544965217006283`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", 
    RowBox[{"This", " ", "generates", " ", "multiple", " ", "datasets", " ", 
     RowBox[{"(", "tanks", ")"}], " ", "where", " ", "the", " ", "noise", " ",
      "terms", " ", "driving", " ", "all", " ", "tanks", " ", "are", " ", 
     RowBox[{"uncorrelated", ".", " ", "This"}], " ", "is", " ", "probably", 
     " ", "more", " ", 
     RowBox[{"realistic", "."}]}], "*)"}], "Subsubsection"], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"GenerateUnCorrelatedDatasets", "[", 
     RowBox[{"A_", ",", "B_", ",", "q_", ",", "time_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "a", ",", "b", ",", "p", ",", "noise", ",", "x0", ",", "X0", ",", 
        "X"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"p", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"B", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"a", "=", 
        RowBox[{"A", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"b", "=", 
        RowBox[{"Transpose", "[", "B", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"X", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", 
         RowBox[{"j", "\[LessEqual]", "q"}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"noise", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"RandomVariate", "[", 
              RowBox[{
               RowBox[{"NormalDistribution", "[", "]"}], ",", "p"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "1", ",", 
               RowBox[{"time", "+", "1"}]}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"x0", "=", 
           RowBox[{"RandomVariate", "[", 
            RowBox[{
             RowBox[{"UniformDistribution", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}], ",", "p"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"X0", "=", 
           RowBox[{"{", "x0", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"t", "=", "1"}], ",", 
            RowBox[{"t", "\[LessEqual]", "time"}], ",", 
            RowBox[{
             RowBox[{"t", "++"}], ";", "\[IndentingNewLine]", 
             RowBox[{"x0", "=", 
              RowBox[{"a", "+", 
               RowBox[{"x0", ".", "b"}], "+", 
               RowBox[{"5", 
                RowBox[{"noise", "[", 
                 RowBox[{"[", "t", "]"}], "]"}]}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"X0", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"X0", ",", 
                RowBox[{"{", "x0", "}"}]}], "]"}]}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"X", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"X", ",", 
             RowBox[{"{", "X0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", "X"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   StyleBox[
    RowBox[{"(*", 
     RowBox[{"Unconstrained", " ", "estimate", " ", "with", " ", 
      RowBox[{"covariates", ".", " ", "For"}], " ", "input", " ", "we", " ", 
      "need", " ", "to", " ", "know", " ", "how", " ", "many", " ", 
      "covariates", " ", "there", " ", 
      RowBox[{"are", ".", " ", "Zero"}], " ", "covariates", " ", "are", " ", 
      RowBox[{"fine", "."}]}], "*)"}], "Subsubsection"], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CompUnConstrainedCov", "[", 
     RowBox[{"datasets_", ",", "cov_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "X", ",", "U", ",", "Y", ",", "Z", ",", "D", ",", "d0", ",", "p", ",", 
        "x0", ",", "u0", ",", "y0", ",", "one", ",", "popdata", ",", 
        "covdata", ",", "tanks", ",", "tankrow", ",", "index", ",", 
        "tempdata"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"p", "=", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"datasets", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "-", "cov"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"cov", "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"X", "=", 
           RowBox[{"{", "}"}]}], ";", 
          RowBox[{"Y", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", "1"}], ",", 
            RowBox[{"j", "\[LessEqual]", 
             RowBox[{"Length", "[", "datasets", "]"}]}], ",", 
            RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"x0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{
                RowBox[{"datasets", "[", 
                 RowBox[{"[", "j", "]"}], "]"}], ",", 
                RowBox[{"Length", "[", 
                 RowBox[{"datasets", "[", 
                  RowBox[{"[", "j", "]"}], "]"}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"y0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{
                RowBox[{"datasets", "[", 
                 RowBox[{"[", "j", "]"}], "]"}], ",", "1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"X", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"X", ",", "x0"}], "]"}]}], ";", "\[IndentingNewLine]", 
             
             RowBox[{"Y", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"Y", ",", "y0"}], "]"}]}]}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"one", "=", 
           RowBox[{"{", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}], "}"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"Z", "=", 
           RowBox[{"Transpose", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"one", ",", 
              RowBox[{"Transpose", "[", "X", "]"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"D", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"k", "=", "1"}], ",", 
            RowBox[{"k", "\[LessEqual]", "p"}], ",", 
            RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"d0", "=", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"Y", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "k"}], "]"}], "]"}], "}"}], ".", "Z", 
               ".", 
               RowBox[{"Inverse", "[", 
                RowBox[{
                 RowBox[{"Transpose", "[", "Z", "]"}], ".", "Z"}], "]"}]}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"D", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"D", ",", "d0"}], "]"}]}]}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "D"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"X", "=", 
           RowBox[{"{", "}"}]}], ";", 
          RowBox[{"Y", "=", 
           RowBox[{"{", "}"}]}], ";", 
          RowBox[{"U", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", "1"}], ",", 
            RowBox[{"j", "\[LessEqual]", 
             RowBox[{"Length", "[", "datasets", "]"}]}], ",", 
            RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"tempdata", "=", 
              RowBox[{"datasets", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"x0", "=", 
              RowBox[{"tempdata", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", 
                 RowBox[{
                  RowBox[{"cov", "+", "1"}], ";;", 
                  RowBox[{"cov", "+", "p"}]}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"x0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{"x0", ",", 
                RowBox[{"Length", "[", "x0", "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"u0", "=", 
              RowBox[{"tempdata", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", 
                 RowBox[{"1", ";;", "cov"}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"u0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{"u0", ",", 
                RowBox[{"Length", "[", "u0", "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"y0", "=", 
              RowBox[{"tempdata", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", 
                 RowBox[{
                  RowBox[{"cov", "+", "1"}], ";;", 
                  RowBox[{"cov", "+", "p"}]}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"y0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{"y0", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"X", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"X", ",", "x0"}], "]"}]}], ";", "\[IndentingNewLine]", 
             
             RowBox[{"U", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"U", ",", "u0"}], "]"}]}], ";", "\[IndentingNewLine]", 
             
             RowBox[{"Y", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"Y", ",", "y0"}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"one", "=", 
           RowBox[{"{", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}], "}"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"Z", "=", 
           RowBox[{"Transpose", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"one", ",", 
              RowBox[{"Transpose", "[", "U", "]"}], ",", 
              RowBox[{"Transpose", "[", "X", "]"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"D", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"k", "=", "1"}], ",", 
            RowBox[{"k", "\[LessEqual]", "p"}], ",", 
            RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"d0", "=", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"Y", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "k"}], "]"}], "]"}], "}"}], ".", "Z", 
               ".", 
               RowBox[{"Inverse", "[", 
                RowBox[{
                 RowBox[{"Transpose", "[", "Z", "]"}], ".", "Z"}], "]"}]}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"D", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"D", ",", "d0"}], "]"}]}]}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "D"}]}], "\[IndentingNewLine]", 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "Composite", " ", "constrained", " ", "and", " ", "unconstrained", " ", 
      "estimates", " ", "with", " ", 
      RowBox[{"covatiares", ".", " ", "I", ".", "e", "."}]}], ",", " ", 
     RowBox[{"the", " ", "most", " ", "general", " ", 
      RowBox[{"case", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MAR", "[", 
     RowBox[{"datasets_", ",", " ", "cov_", ",", " ", "constraints_"}], "]"}],
     ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "X", ",", "U", ",", "Y", ",", "Z", ",", "D", ",", "d0", ",", "p", ",", 
        "x0", ",", "u0", ",", "y0", ",", "one", ",", "popdata", ",", 
        "covdata", ",", "tanks", ",", "tankrow", ",", "index", ",", 
        "tempdata", ",", "c"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"p", "=", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"datasets", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "-", "cov"}]}], ";",
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"cov", "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"X", "=", 
           RowBox[{"{", "}"}]}], ";", 
          RowBox[{"Y", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", "1"}], ",", 
            RowBox[{"j", "\[LessEqual]", 
             RowBox[{"Length", "[", "datasets", "]"}]}], ",", 
            RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"x0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{
                RowBox[{"datasets", "[", 
                 RowBox[{"[", "j", "]"}], "]"}], ",", 
                RowBox[{"Length", "[", 
                 RowBox[{"datasets", "[", 
                  RowBox[{"[", "j", "]"}], "]"}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"y0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{
                RowBox[{"datasets", "[", 
                 RowBox[{"[", "j", "]"}], "]"}], ",", "1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"X", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"X", ",", "x0"}], "]"}]}], ";", "\[IndentingNewLine]", 
             
             RowBox[{"Y", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"Y", ",", "y0"}], "]"}]}]}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"one", "=", 
           RowBox[{"{", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}], "}"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"Z", "=", 
           RowBox[{"Transpose", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"one", ",", 
              RowBox[{"Transpose", "[", "X", "]"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"D", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"k", "=", "1"}], ",", 
            RowBox[{"k", "\[LessEqual]", "p"}], ",", 
            RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"c", "=", 
              RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"For", "[", 
              RowBox[{
               RowBox[{"j", "=", "1"}], ",", 
               RowBox[{"j", "\[LessEqual]", "p"}], ",", 
               RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
               RowBox[{"c", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"c", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"constraints", ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "j"}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", "j", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"d0", "=", 
              RowBox[{"{", 
               RowBox[{"AddZerosToRow", "[", 
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Y", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "k"}], "]"}], "]"}], "}"}], ".", 
                   RowBox[{"ColumnDelete", "[", 
                    RowBox[{"Z", ",", 
                    RowBox[{"c", "+", "1"}]}], "]"}], ".", 
                   RowBox[{"Inverse", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"ColumnDelete", "[", 
                    RowBox[{"Z", ",", 
                    RowBox[{"c", "+", "1"}]}], "]"}], "]"}], ".", 
                    RowBox[{"ColumnDelete", "[", 
                    RowBox[{"Z", ",", 
                    RowBox[{"c", "+", "1"}]}], "]"}]}], "]"}]}], "]"}], ",", 
                 RowBox[{"c", "+", "1"}]}], "]"}], "}"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"D", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"D", ",", "d0"}], "]"}]}]}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "D"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"X", "=", 
           RowBox[{"{", "}"}]}], ";", 
          RowBox[{"Y", "=", 
           RowBox[{"{", "}"}]}], ";", 
          RowBox[{"U", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", "1"}], ",", 
            RowBox[{"j", "\[LessEqual]", 
             RowBox[{"Length", "[", "datasets", "]"}]}], ",", 
            RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"tempdata", "=", 
              RowBox[{"datasets", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"x0", "=", 
              RowBox[{"tempdata", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", 
                 RowBox[{
                  RowBox[{"cov", "+", "1"}], ";;", 
                  RowBox[{"cov", "+", "p"}]}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"x0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{"x0", ",", 
                RowBox[{"Length", "[", "x0", "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"u0", "=", 
              RowBox[{"tempdata", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", 
                 RowBox[{"1", ";;", "cov"}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"u0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{"u0", ",", 
                RowBox[{"Length", "[", "u0", "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"y0", "=", 
              RowBox[{"tempdata", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", 
                 RowBox[{
                  RowBox[{"cov", "+", "1"}], ";;", 
                  RowBox[{"cov", "+", "p"}]}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"y0", "=", 
              RowBox[{"Delete", "[", 
               RowBox[{"y0", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"X", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"X", ",", "x0"}], "]"}]}], ";", "\[IndentingNewLine]", 
             
             RowBox[{"U", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"U", ",", "u0"}], "]"}]}], ";", "\[IndentingNewLine]", 
             
             RowBox[{"Y", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"Y", ",", "y0"}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"one", "=", 
           RowBox[{"{", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}], "}"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"Z", "=", 
           RowBox[{"Transpose", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"one", ",", 
              RowBox[{"Transpose", "[", "U", "]"}], ",", 
              RowBox[{"Transpose", "[", "X", "]"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"D", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"k", "=", "1"}], ",", 
            RowBox[{"k", "\[LessEqual]", "p"}], ",", 
            RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"c", "=", 
              RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"For", "[", 
              RowBox[{
               RowBox[{"j", "=", "1"}], ",", 
               RowBox[{"j", "\[LessEqual]", "p"}], ",", 
               RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
               RowBox[{"c", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"c", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"constraints", ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "j"}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", "j", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"d0", "=", 
              RowBox[{"{", 
               RowBox[{"AddZerosToRow", "[", 
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Y", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "k"}], "]"}], "]"}], "}"}], ".", 
                   RowBox[{"ColumnDelete", "[", 
                    RowBox[{"Z", ",", 
                    RowBox[{"c", "+", "1", "+", "cov"}]}], "]"}], ".", 
                   RowBox[{"Inverse", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"ColumnDelete", "[", 
                    RowBox[{"Z", ",", 
                    RowBox[{"c", "+", "1", "+", "cov"}]}], "]"}], "]"}], ".", 
                    
                    RowBox[{"ColumnDelete", "[", 
                    RowBox[{"Z", ",", 
                    RowBox[{"c", "+", "1", "+", "cov"}]}], "]"}]}], "]"}]}], 
                  "]"}], ",", 
                 RowBox[{"c", "+", "1", "+", "cov"}]}], "]"}], "}"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"D", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"D", ",", "d0"}], "]"}]}]}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "D"}]}], "\[IndentingNewLine]", 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.654339856238957*^9, 3.654339856493059*^9}, {
   3.6544965134765463`*^9, 3.654496513845484*^9}, {3.655127855936124*^9, 
   3.655127857371744*^9}, 3.6551280244936533`*^9, 3.655128249239995*^9, {
   3.65512834494182*^9, 3.655128347908298*^9}, {3.655128390899795*^9, 
   3.6551283910106497`*^9}, {3.6551285252331657`*^9, 3.655128525454939*^9}, {
   3.655128588800267*^9, 3.655128589118761*^9}, 3.655128650814966*^9, {
   3.655128741867115*^9, 3.655128762818774*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"(*", 
   RowBox[{"Experiments", " ", "are", " ", 
    RowBox[{"below", ".", " ", "You"}], " ", "can", " ", "change", " ", "any",
     " ", "of", " ", "the", " ", "main", " ", "parameters", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"A", ",", " ", "B", ",", " ", 
       RowBox[{"q", " ", "=", " ", 
        RowBox[{"number", " ", "of", " ", "tanks"}]}], ",", 
       RowBox[{"finaltime", " ", "=", " ", 
        RowBox[{"length", " ", "of", " ", "timeseries"}]}]}], ")"}], ".", " ",
      "Just"}], " ", "try", " ", "to", " ", "be", " ", "sure", " ", "that", 
    " ", "your", " ", "B", " ", "matrix", " ", "is", " ", 
    RowBox[{"stable", ":", " ", 
     RowBox[{
     "all", " ", "eigenvalues", " ", "should", " ", "be", " ", "less", " ", 
      "than", " ", "one", " ", "in", " ", "absolute", " ", 
      RowBox[{"value", "."}]}]}]}], "*)"}], "Subsection"]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", 
    RowBox[{"Experiment", " ", "with", " ", "UNCorrelated", " ", "datasets"}],
     "*)"}], "Subsubsection"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"-", ".2"}], "}"}], ",", 
       RowBox[{"{", "1.0", "}"}], ",", 
       RowBox[{"{", ".5", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{".8", ",", 
         RowBox[{"-", ".2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".5", ",", ".1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0", ",", ".4"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"Length", "[", 
      RowBox[{"B", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"q", "=", "4"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"finaltime", "=", "30"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"datasets", "=", 
     RowBox[{"GenerateUnCorrelatedDatasets", "[", 
      RowBox[{"A", ",", "B", ",", "q", ",", "finaltime"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CompD", "=", 
     RowBox[{"CompUnConstrainedCov", "[", 
      RowBox[{"datasets", ",", "0"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Mlist", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", "q"}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m0", "=", 
       RowBox[{"CompUnConstrainedCov", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"datasets", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Mlist", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"Mlist", ",", 
         RowBox[{"{", "m0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
    "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"AvgD", "=", 
     RowBox[{"Mean", "[", "Mlist", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Dmatrix = \>\"", 
      RowBox[{"MatrixForm", "[", "A", "]"}]}], ",", 
     RowBox[{"MatrixForm", "[", "B", "]"}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Comp= \>\"", ",", 
     RowBox[{"MatrixForm", "[", "CompD", "]"}], ",", 
     RowBox[{"\"\< Avg = \>\"", 
      RowBox[{"MatrixForm", "[", "AvgD", "]"}]}]}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Eigenvalues = \>\"", ",", 
     RowBox[{"Eigenvalues", "[", "B", "]"}], ",", "\"\< -- \>\"", ",", 
     RowBox[{"Abs", "[", 
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"CompD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], ",", 
     "\"\< -- \>\"", ",", 
     RowBox[{"Abs", "[", 
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"AvgD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Stability = \>\"", ",", 
     RowBox[{
      RowBox[{"Det", "[", "B", "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}], ",", "\"\< -- \>\"", ",", " ", 
     RowBox[{
      RowBox[{"Det", "[", 
       RowBox[{"CompD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}], ",", " ", "\"\< -- \>\"", ",", "  ", 
     
     RowBox[{
      RowBox[{"Det", "[", 
       RowBox[{"AvgD", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"2", ";;", 
           RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "^", 
      RowBox[{"(", 
       RowBox[{"2", "/", "p"}], ")"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.654444303870551*^9, 3.6544443099008303`*^9}, {
   3.6544443958702087`*^9, 3.654444402475119*^9}, 3.6544972146028643`*^9, {
   3.654497315462674*^9, 3.654497360338291*^9}, 3.654497451774289*^9, {
   3.6544977067503138`*^9, 3.654497710846052*^9}, 3.6544977532630177`*^9, 
   3.6544978598613663`*^9, 3.6544979535642757`*^9, 3.655127946258605*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"\<\"Dmatrix = \"\>", " ", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "0.2`"}]},
        {"1.`"},
        {"0.5`"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.8`", 
        RowBox[{"-", "0.2`"}], "0"},
       {
        RowBox[{"-", "0.1`"}], "0.5`", "0.1`"},
       {"0.1`", "0", "0.4`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}],
  SequenceForm["Dmatrix = " MatrixForm[{{-0.2}, {1.}, {0.5}}], 
   MatrixForm[{{0.8, -0.2, 0}, {-0.1, 0.5, 0.1}, {0.1, 0, 0.4}}]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.6543372889660397`*^9, 3.65433730146523*^9}, 
   3.654339570645442*^9, 3.65433978575097*^9, 3.654347235643992*^9, 
   3.654444312664551*^9, 3.6544444038384037`*^9, 3.654497013280649*^9, 
   3.654497216030203*^9, {3.654497333846115*^9, 3.6544973611830673`*^9}, 
   3.654497452330284*^9, 3.6544977137081738`*^9, 3.6544977544080973`*^9, 
   3.654497954496644*^9, 3.655127979809285*^9, 3.6551280788437223`*^9, 
   3.655128173217235*^9, 3.655128363632575*^9, 3.655128395784214*^9, 
   3.655128529774151*^9, 3.655128593268403*^9, 3.655128655592456*^9, {
   3.655128751327414*^9, 3.65512876772836*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Comp= \"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.40043048324095737`", "0.7624473035381056`", 
        RowBox[{"-", "0.3024130371789438`"}], "0.025370130695923365`"},
       {"0.9581501662490476`", 
        RowBox[{"-", "0.27407182762569304`"}], "0.20411922576800587`", 
        "0.22628722828047493`"},
       {"0.49063154708146495`", "0.1304488368084638`", 
        RowBox[{"-", "0.03136378175338369`"}], "0.30337955690746543`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "\[InvisibleSpace]", 
   RowBox[{"\<\" Avg = \"\>", " ", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0.13729403483465755`", "0.664172108524807`", 
         RowBox[{"-", "0.1903483295591153`"}], "0.054880682082218066`"},
        {"0.5975682025034377`", 
         RowBox[{"-", "0.1775798623646372`"}], "0.12159005021265297`", 
         "0.25867994535145405`"},
        {"0.6969127694983741`", "0.14210886933905212`", 
         RowBox[{"-", "0.08594623848789762`"}], "0.2553456840383176`"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}]}],
  SequenceForm["Comp= ", 
   MatrixForm[{{0.40043048324095737`, 0.7624473035381056, -0.3024130371789438,
     0.025370130695923365`}, {0.9581501662490476, -0.27407182762569304`, 
    0.20411922576800587`, 0.22628722828047493`}, {0.49063154708146495`, 
    0.1304488368084638, -0.03136378175338369, 0.30337955690746543`}}], 
   " Avg = " 
   MatrixForm[{{0.13729403483465755`, 0.664172108524807, -0.1903483295591153, 
     0.054880682082218066`}, {0.5975682025034377, -0.1775798623646372, 
     0.12159005021265297`, 0.25867994535145405`}, {0.6969127694983741, 
     0.14210886933905212`, -0.08594623848789762, 0.2553456840383176}}]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.6543372889660397`*^9, 3.65433730146523*^9}, 
   3.654339570645442*^9, 3.65433978575097*^9, 3.654347235643992*^9, 
   3.654444312664551*^9, 3.6544444038384037`*^9, 3.654497013280649*^9, 
   3.654497216030203*^9, {3.654497333846115*^9, 3.6544973611830673`*^9}, 
   3.654497452330284*^9, 3.6544977137081738`*^9, 3.6544977544080973`*^9, 
   3.654497954496644*^9, 3.655127979809285*^9, 3.6551280788437223`*^9, 
   3.655128173217235*^9, 3.655128363632575*^9, 3.655128395784214*^9, 
   3.655128529774151*^9, 3.655128593268403*^9, 3.655128655592456*^9, {
   3.655128751327414*^9, 3.6551287677343817`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Eigenvalues = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.8449489742783178`", ",", "0.5`", ",", "0.3550510257216821`"}], 
    "}"}], "\[InvisibleSpace]", "\<\" -- \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.86793204538388`", ",", "0.34083973086523345`", ",", 
     "0.06117430996446388`"}], "}"}], "\[InvisibleSpace]", "\<\" -- \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.7117412503295478`", ",", "0.16614876480630458`", ",", 
     "0.16614876480630458`"}], "}"}]}],
  SequenceForm[
  "Eigenvalues = ", {0.8449489742783178, 0.5, 0.3550510257216821}, " -- ", {
   0.86793204538388, 0.34083973086523345`, 0.06117430996446388}, " -- ", {
   0.7117412503295478, 0.16614876480630458`, 0.16614876480630458`}],
  Editable->False]], "Print",
 CellChangeTimes->{{3.6543372889660397`*^9, 3.65433730146523*^9}, 
   3.654339570645442*^9, 3.65433978575097*^9, 3.654347235643992*^9, 
   3.654444312664551*^9, 3.6544444038384037`*^9, 3.654497013280649*^9, 
   3.654497216030203*^9, {3.654497333846115*^9, 3.6544973611830673`*^9}, 
   3.654497452330284*^9, 3.6544977137081738`*^9, 3.6544977544080973`*^9, 
   3.654497954496644*^9, 3.655127979809285*^9, 3.6551280788437223`*^9, 
   3.655128173217235*^9, 3.655128363632575*^9, 3.655128395784214*^9, 
   3.655128529774151*^9, 3.655128593268403*^9, 3.655128655592456*^9, {
   3.655128751327414*^9, 3.6551287677384787`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Stability = \"\>", "\[InvisibleSpace]", "0.2823108086643086`", 
   "\[InvisibleSpace]", "\<\" -- \"\>", "\[InvisibleSpace]", 
   "0.06892921686554568`", "\[InvisibleSpace]", "\<\" -- \"\>", 
   "\[InvisibleSpace]", "0.07281333346127601`"}],
  SequenceForm[
  "Stability = ", 0.2823108086643086, " -- ", 0.06892921686554568, " -- ", 
   0.07281333346127601],
  Editable->False]], "Print",
 CellChangeTimes->{{3.6543372889660397`*^9, 3.65433730146523*^9}, 
   3.654339570645442*^9, 3.65433978575097*^9, 3.654347235643992*^9, 
   3.654444312664551*^9, 3.6544444038384037`*^9, 3.654497013280649*^9, 
   3.654497216030203*^9, {3.654497333846115*^9, 3.6544973611830673`*^9}, 
   3.654497452330284*^9, 3.6544977137081738`*^9, 3.6544977544080973`*^9, 
   3.654497954496644*^9, 3.655127979809285*^9, 3.6551280788437223`*^9, 
   3.655128173217235*^9, 3.655128363632575*^9, 3.655128395784214*^9, 
   3.655128529774151*^9, 3.655128593268403*^9, 3.655128655592456*^9, {
   3.655128751327414*^9, 3.655128767741959*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(*", 
    RowBox[{
    "Comparison", " ", "of", " ", "methods", " ", "for", " ", "UNcorrelated", 
     " ", 
     RowBox[{"datasets", ".", " ", "Here"}], " ", "you", " ", "will", " ", 
     "see", " ", "there", " ", "is", " ", "huge", " ", 
     RowBox[{"difference", "."}]}], "*)"}], "Subsubsection"], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"-", ".2"}], "}"}], ",", 
       RowBox[{"{", "1.0", "}"}], ",", 
       RowBox[{"{", ".5", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"B", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{".8", ",", 
         RowBox[{"-", ".2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".5", ",", ".1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0", ",", ".4"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"A", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1.0", "}"}], ",", 
        RowBox[{"{", ".5", "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"B", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{".4", ",", 
          RowBox[{"-", ".2"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".1"}], ",", ".5"}], "}"}]}], "}"}]}], ";"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"Length", "[", 
      RowBox[{"B", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"q", "=", "4"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"finaltime", "=", "30"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runs", "=", "500"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DetComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"DetAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"VarComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"VarAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"EigenComp", "=", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"EigenAvg", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"r", "=", "1"}], ",", 
     RowBox[{"r", "\[LessEqual]", "runs"}], ",", 
     RowBox[{"r", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"datasets", "=", 
       RowBox[{"GenerateUnCorrelatedDatasets", "[", 
        RowBox[{"A", ",", "B", ",", "q", ",", "finaltime"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"CompD", "=", 
       RowBox[{"CompUnConstrainedCov", "[", 
        RowBox[{"datasets", ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"DetComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"DetComp", ",", 
         RowBox[{"{", 
          RowBox[{"Det", "[", 
           RowBox[{"CompD", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", 
              RowBox[{"2", ";;", 
               RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"VarComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"VarComp", ",", 
         RowBox[{"{", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"Eigenvalues", "[", 
                  RowBox[{"CompD", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"2", ";;", 
                    RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], 
                "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EigenComp", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"EigenComp", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{"CompD", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", 
                RowBox[{"2", ";;", 
                 RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Mlist", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", "q"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"m0", "=", 
          RowBox[{"CompUnConstrainedCov", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"datasets", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "}"}], ",", "0"}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"Mlist", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"Mlist", ",", 
            RowBox[{"{", "m0", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"AvgD", "=", 
       RowBox[{"Mean", "[", "Mlist", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"DetAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"DetAvg", ",", 
         RowBox[{"{", 
          RowBox[{"Det", "[", 
           RowBox[{"AvgD", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", 
              RowBox[{"2", ";;", 
               RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"VarAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"VarAvg", ",", 
         RowBox[{"{", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"Eigenvalues", "[", 
                  RowBox[{"AvgD", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"2", ";;", 
                    RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], 
                "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"EigenAvg", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"EigenAvg", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{"AvgD", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", 
                RowBox[{"2", ";;", 
                 RowBox[{"p", "+", "1"}]}]}], "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"DetComp", "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"DetAvg", "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}]}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Determinant^(2/p)\>\"", "}"}]}]}], "]"}], ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Det", "[", "B", "]"}], "^", "2"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"1", "/", "p"}], ")"}]}], ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"VarComp", ",", "VarAvg"}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Var along dominant eigvector\>\"", "}"}]}]}], "]"}],
      ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Eigenvalues", "[", "B", "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], ")"}], "^", "2"}]}], ")"}]}], 
         ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"SmoothHistogram", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"EigenComp", ",", "EigenAvg"}], "}"}], ",", "  ", 
       RowBox[{"PlotLegends", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Composite\>\"", ",", "\"\<Average\>\""}], "}"}]}], ",", 
       
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", "\"\<Dominant eigenvalue\>\"", "}"}]}]}], "]"}], ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Eigenvalues", "[", "B", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.654496899957197*^9, 3.6544969376294603`*^9, {3.654497224427322*^9, 
   3.654497226248158*^9}, 3.654497309952367*^9, 3.654497356541662*^9, {
   3.654497446181726*^9, 3.65449746429342*^9}, {3.65449776941073*^9, 
   3.6544977776231203`*^9}, 3.654497869024317*^9, 3.6544979630060987`*^9, 
   3.6551281839202023`*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
eb50aRO63EfVNoxxkUfWNdlzNU3wo80NW8zkIk+qBTPyWprAs/GKduTr9f5c
+HaKc3cTsljYAgT1uIjtnfQEzYEm+F8rDtbYwkXs8uhjBcabIGont1NllpO8
ZNON7JttQuHBqntUhZzEwTj4W/RKE56qe/9ycOMkTolTQQ9omzF/58bzlouc
xIUGX44wN4Mpm8NrZjsneavj+omBqxm+TaU9fXMcxC20y6desBlB2yocIos4
iMfcjg8fJZsRXMFw5pQ7B/FUfeJ+ZWcz7jqq7K+9yEG8fcve7pRrxuFf52MU
tnMQ32Hu17OHmtEZKRXo/IedfDp01SHnWDOOr9y5V1PATvzfJNo7nmzGUtdo
L5MrO/nS9c/mjNb6egefNlV9dhIkfeYpn34znmx6/eXNFnYSYuv/8KdxMxK6
PsVk9rORsLpRq8hbzdh7/E3QGxs2EiF2yOKeZTNas2ykPvKwkShLZ9PDT5rR
vLl7YiaOlcQWtt6gs28GexLFMVqNlcRzSl2tdW5G9w+hlaY+FpJ09d5lH/dm
PA1uaXlqy0JSUgouXvZthqdUCFsiPwtJo2e7sP1rMx5P3092SdlEMs8b6k6H
NaOnlURxaW0i2eHRmllxzVCNyVe9PMFMcheXTr9Ka4ZQx9u+Z++YScFJtZOn
89bjGzl7/OkuZlL0yec4T9l6PBfuZl+v3khKxwaO/ahtRl33WvoZ842kXEn+
aHhrM64fGIs7xrqRVLq+ULT83gy5ANcO9UQmUvOjfv+hwWZcszRTfXiOidTt
EZWn+d0Mqrr3ldXLjKTR3nxP9Z9miOx/Y6IXxEiaG7N2ea02wwptHuInGUmr
JNN2Q7oWZNqcfy8zs4FQ7utJbd3UgveRcebO/htIZ8k38UmuFlyemDsgq7aB
fOf5I5wh1IJgt9ln0nMMpOeGssCLzS1oEj72xi6EgfSme/Co72rBiLePyC4d
BjLA2MPBJd8CofCs3D10DOSX/m7WbsUWrL22Oe+aRk9Gop5t/Kbcgg0X/EaP
mdKTsZVKBgv1FlzbZfTzlBg9+X2an/aAdgv6dsxbh7fSkamAG//+6bfAjON9
iKYrHZmZSFmpuNKCI0+TPZVV6cgcaBff317HVnm0T6joyIKH1h8DqxZslKHc
Gc2mJUu9X6c2P22BEq3E8w9PaMmq3MT4uP26/zXbJrP9tOTvK6WR1Nct4N7q
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
s6ZD/xIuPvdWj633If/7v9X/xf8PBFT7QA==
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
/x3K9479P/w/LWTZBw==
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQrRewMCpR8JI9AxTA+MKVi9Z6q82zR+Wvg/N1/9Qw
vMjaD+fH/nrGuDXsOJx/+suryKUXz8H5yRLr3haWX4bzZ7NcUDnocB3OnzVx
RYF59G04f+3ddemtSffh/L/W/ascJz2E89siF2lfmf0Y4R65V8v3NT2F8+MO
nfgpkvAczv+0jenav9SXcP7ioMK1Dp6v4fztdtb8YqFv4fxQrjlu4eHv4fyO
fTNsKmZ/gPMlFARn983/COebXVX+HjDpE8J9RikSsTM/I/z7P19l/uwvcL69
gpheb89XOF/k5cs/RyZ+g/MrWCNOrmj9DucvnDix4VDJDzj/99Eff1QrfsL5
T3x/lZlm/YLz/9dqbusr+A3n35dVeSBb9AfO9xXcyR6Z9BfOf7um+svdtH9w
vsycG/f4ov7D+e21DLesVBgcYHzJRm31yUsR/KJ1ysWOcoxw/pP1mxaKLETw
ZW/znbeVZoLzLfdd+Mg4GcHPK9X8/kqEGc7PCvP/rdmH4Ndz8zzqFWSB88sq
9Pb1TELwTfnlZj7kYoXzeauWhEX3Ivhr+H4IabOzwfm60RuPTK1D8I9XM0aq
MrDD+RrH5N5wVSL4Isn8Za17EHxIbuFwAADKHVSP
         "]]}}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{-0.016185225708523134`, 0.4500889745052992}, {
       0, 7.85399937521402}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Determinant^(2/p)\"", TraditionalForm], None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{-0.016185225708523134`, 0.4500889745052992}, {
       0, 7.85399937521402}}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.006944444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.006944444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.654496955435972*^9, 3.654497022611085*^9, 3.654497231397155*^9, 
   3.654497340300375*^9, 3.654497388899076*^9, {3.654497450811182*^9, 
   3.6544974849194393`*^9}, {3.654497790502699*^9, 3.6544977924735603`*^9}, 
   3.654497965627451*^9, 3.6551279899504013`*^9, 3.65512808738251*^9, 
   3.655128186994864*^9, 3.655128369348722*^9, 3.655128401257647*^9, 
   3.655128534500538*^9, 3.655128599191131*^9, 3.655128659567883*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
p5UF5QNzd+jO8aC7rV7JY/EsIKyLqqw682CDoEXi9s5zCOQz3Zi8xoMCEnfq
vgw/h+9HQ4u7bvGgd32Ipmrxc9C3KnevCuVBPefPUiIPnsOb64v7Cx7uxkfV
sAa5PAeeJPHZpKc8mLbarXbjxHPw+2CZFZrLg09OL5XQCzyHz8OR9t5FPDgW
+6pa6XcmnPxbLeJQxYNLPbyBvC2ZkCW4MmzUwoOBKUsRL9Mygen4vsfQx4Mu
8fu9GK5nwtWz50z2f+XBmx/kzY8aZkLvzRhWwTkeXDm8IqKxNxOOptS30q3y
4K3S1Lbj2xmQXLERskrGi8rBRjdl+jKA7PN+9SlGXmzJlvsomp8BDtt2ZN08
vOjPG29PvJcBLSLx5VVivFjawkKvap0BstDiWyDDi1f2xHfcks+A2PPbCk+O
8KLLmQrCLF0GrN4+uBR6khe1b8dsh39NB+tUpwJvPV58tmX90qk0HSqrk/5z
sOTFPyvFkfei00F8/NMe4wu8u/1fLW7aJR1CySknwI0XnQ+xqkWfSId5sSNP
91/nxe6mmrIggXQwPOlqLRjIixya92gb/6RBkf0zHvoHvKh/hpFg0p4GfPd6
ulcTeXEQOZ9KZqfBzQzaB1OZu/jI9rBGQBpM1B3T6X7Fi/LX7XayzqTBqakr
tNUfeFH05SNnTcU0yKPKrCuo50W21aduRPY0YNkzePtJJy++2qL8JT+fCtc0
mI6HjfDikdQ27yuNqdDviOve33jRYPUDqTc9FZSDPYsclnbrFfY1xtI/FVKz
cq4a/+PFfJGKKytWqUDVOCqDtHz4YMyOP+NwKrjMsP3Yz8GHZb1UX6zYU6GN
VuO5oDAfqq/R6IgPPwM5yet29JJ86DVdZxYR8wweaRUIrx3kQ+Jx8tohrWew
7jI+NKXChyFfZ5TIyZ6BTRh3fLcWH1oF8pOvvnsKtbmnjatN+HC2KGE7//JT
kGi5xfLShg8rut5ZCIk/hfDZ1y1P/uNDwQalg8eGU+Anw7fgME8+LFUtOUoR
nQLG0gJqPrf50N9GavGSRgq809HfcQjnQwMiB8lnMxmELt0tM47jw1pqjV6R
V8lwJ/KdD6byIcVT4Uv2F5JhKn/2kOyLXf10ipkneZNBq11kUfAdH744tehd
0/IE8heM8+lr+PAeB1fDxK0nwMYS4rLWyodDuqWn8+WegLdsmfh0Px8qNB9O
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
4qGpdRJwuldl3fYRx////+D/xf8DhrmawQ==
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJw9hwk0FAgAhmfEmHK21bZhy5EO2S2vlkL+jGszOii7NcUISaKVtXKkQsrS
E6HDVVFJFCLToZEc2R2No0MkQ8Msc9/rudr2vX37vfe9731mgb/4HNQgEAje
X/y3J3XHbO4tGQHhP0qWt53rII///3Z+J1++9BxH/kKqv5okdWLl2Wo3nx+H
ruU7g35PlROdLXZnsscxSnrbyjGedlKSys4+NuTjRhONMZOsgTTQ2+p8+Ji0
5klJ9mSYxC4mVefysb3mrK9xjgGqqzvdKt7xoVHJ2S9KXAjX8XOpt78RIG6I
tlD3uBHem21pvUETIPkBu/gxyQwRtAnNokIBoua7mxuxLUHMqXa9MijAAf1I
n4sda5DHCj2TYyqEcSc98dBtG1hpmrVkBgphae5CDfC2BdOxb076TSF8fuMd
LDNy/NJsl1SeEKY0Dqu12Bm8e1tTTq8SwYpz/gWV6I54HrE5IUyE54JYtxV+
VOgve6JxvFIEihd3X7ZsJ0p/jqJEiUUonzisZ8PbDbssq+SIdWJciAzcZF+5
Fx3tn5pCo8Rws6vI7w6lI4BYQAyuE0OjLJPNNA+CctMuZ7pajNtMB+uhjYeQ
FqWTRNsogYH23oFj88NhUtH83Ddegtm1qqkFo5Go5iYQvBsk8BFaOs86R8PN
ZMMWr1kJwlm24/U2sQi3UjdamEpRnjtP17T9BBjuPXQzZylmH3m1ROglgRh0
//PSQCkoGS38CtMzoJ5Kv2aSIsVm2tTstrvnkFcQAqObUhjT5gVVMzLAYVA4
i1ulKE2sCo5bk4XVb5aeWsSTQh5ipxPKuohfpZNLF2jL4C2TDHk254Gp28s0
XCXDWONYMNn4Ksira/31t8qwIbVFp6q/ED5uF2Z1wmQoCulYszL1OgoPHCme
myED6winjdBXAl6ih5N2pQzEZdlaQ+G3sC7fYlDzlQx1pfvqr7neQXz950QN
sQweu0oH5EEVaOn58C3BQA4xsSF9J/s+9CWMZzNr5aBfTuyNcanBHp1cv6md
cuSnLRNs/7EWpSsjZyaOyWFfaEPlxzyEyMWrSH1RjhqL4uXULgbsAlZtVtbK
cTo9g7Le9wmSTmh+lL2R45aPg8CM9AysK0MnJCo5jF4NO+7gNmLRwwYT0dcK
dGUP+u+OaUJA95UGvp0CWVt+kvxl2Iy7ouj9Y3sUKJ4Y4es1tUA513t6NE6B
1z3M49SzbXBa8V0hN1+BBYGOI8SAdqRR5joOP1VgROvWQOS2P9HjP/phcEAB
x7DXCsa2DpgkNCUMzCiwqzdB0kdnI+RykXH/UiViLjMP0527UF0b97QXShz9
QTBdSOvGZKfvvrcBSuwJ9hCSEnrgKrSZ6klSgryekvn3jdfIJOsXdJUo4e4O
aiv7DfqW8+3ZzUpI201nmgnvYOHc1s8aUaLsVbamh10vIvxK4v/QUuF56gvX
0mPvwYg7afRyhQo3pbnr11X1gXiJ9qTFQ4WogqNkT0k/vB7Y0l6EqvDZyajT
22YAl9hfTTb+rsLsiIPyfvRHDPHFV5/dVeEOyq+xHw3CSpu16SlLhcTugE6L
GQ6iLcr6HglVSCakinOuD4GJlLh6PTWSg/TLrSnDIO+nL6n7Xg0DLRbHhDsM
n1iHxzU71AgLDtZYmfIJhbmL91ZFqrGb4uGrb84Fr1oxUZmtRsbmrYaXGrmY
zmq2ri1UI35OwUyVgot/ANbZgqY=
          "]], 
         LineBox[CompressedData["
1:eJxFmHc41e8bx+09zyGbI8pKEZLReW6rkpHMIrLJyt5lRSkiZEbKloyKiKwy
S1YyMzOiIQ2r8fO7rm/n4x/X63q/7/d9P/fzOZxzhG0vGDpQkJGRyVOSkf3/
t7jUsc74feQQTJn1u+LbHGr7RHPo/CFyoCM7rVfcNoeWt79TLx0lh+wijemD
wXOIlWFuyNGMHMx+aJSGyswhee7+gnkncljxufq8eGkWndnb5GcfSA6j1nPt
vfdm0SX5B1pzV8nBJml466/VLMpTz+K0zSAHbdGGO0cEZlGnQez8dAk51FsU
zEe+m0GfrAKqzz0lhxqVH+Itd2YQzt0herKbHA64lanN2M0gxRAjE8txctDP
Nwl+ITGDzsaq7ZlYIQeed75TWl+nUUTagR/mv8hB5tWLUJWn06iwQKBtlIkC
zrYwswRcnkYvHzHeOi1AAa+IT2c7Tk6j1ZZN+2FpCpBXd4r7xTeNdvUtypsS
KcBI/75be/8UUpkcohrSpwCDow8K0tymkPXH52+MzlFAh5DLYxzdFIreqsof
uEABWkuvRebzJlEpXa7vqXAK6JeqjGhHk6h31w3NvkQK6HzwsC1o/B36LhrK
cfIuBQyWl6T1+b9DPHIu73uqKGCximqohP0dIqqdfqzbSgGys3E83+5PILuT
Ry+/HKCAv0773Eq0JtBVS3njE3MUUKPWQjsyOY4euO4W7fpGAfp6lZVpAeNo
IIjt+zEqSrCJrvzMzDaO1q/8ed7OQQnObTXcrsVjiD/1Y7LWHkqQfddyZAnG
kFr+mN0LBUqI0MdztI2OIseHnXIaRynBYPLYSy2fURTXXEPZakoJdPP3KSuZ
R1HV6/xBcKKEojDb6eMlI+jtRFJeUwAlrBzTdTQ8OoK2l8N9iFcp4U5Oxxj9
/DAibHpoPEunhBcV8Z/zooeRFq0lXrWEEn6MTdPqig8jF06duad1lPDImJ1P
pOctShBReqTUTQndpVz1R3zfoseyYlG1Y5RgSHtcI1/gLRpFnEaKK5RQLa1g
Zdg1hP7oUYrUbFPC0MNhYcWAISRy9uuaPBMVRPT+aFAQG0LHXaZaH/FTgYHG
ON3e0TfIPbAn6aA0FbgvXC96G/cGJcXU21YdoYLKMyJ9zOpv0JOUkoMy+lSg
tb+t+/rGIJq4l0ZRYUUFd/Zu8DFXDiKKqugB6QtUwB9DdlnHeRCJNfncKwuj
glG83gKZ8CDS7bHxlkqkgl42E8Xl0QHkNX5SvTSXCp7xHuzpSBpAqR+O4CSq
qIBMo6f8nM4Aql+Xmi1qoYKnZJQ6YZQDaJqa9+HeASq46pbl9etpP6LmoIss
mKUClCdvUuPVjyR3/zwl+o0K4sYTZm+J9aOTMu+F8yipwSwqcubGRB/yJQ58
FeagBvLbwTI5iX0oQ7e5JVeUGoK4qC681OhDjeblN4UUqCGFeqNT92MvmnO+
bZOjRQ2SFC9vJ5zsRfQB12QFTKnhuwyTXnbVa7Q/OpD8tiM1pPNNODbjXiOj
ZMd+3gBqCK8fl9D16UGBd43vZlyhhrigS6wZg69QdoW6F3c6NTRmlH+llH+F
Wp/JqKUVU4NBi9r4h5SXaPGlIPuuup38+y69BT+7EdMY00xKFzW8vP3gZ/yZ
biS7tFWJH6OGOmod3LdnXcj051J40jI15EasegiKdqEQqmED9m1qGNBuGD4Z
14lycW2EREYa0HL22PfsZwdqIzxaZeGngZRreEKSXQda3n+3OX4fDQjFlQ5+
HWhHrEcSEpmO0ADzEyvB75rtSF7novV1PRpoOqQTUFTXhszPuMowWNGAQVAm
N162DYU5nSGL9aAB/5JmD4X7L1C+37E+2jAagCR9NVrxF6grSiE3JoEG5N//
3hta9Bx9viniSZ1LAzoOipZREs8RPpcdLlfSwPreKSJ9eSs6XP6XlbKFBup+
PrfZkG9Flg2fpiL6aUCk/oewSmMLiuweryCbpYHbAufi67VbUNFIV1jYGg10
7G2+ZzfcjF4tPDn5h4IWRMUXFoWcmtHX7wVCF/G0wNrpNff0axPaRZnyZVtk
hxdzeXl4mpAKe2RTsDwtdMmJxahqNiJrIc+ETU1aGJHwtmP2eYaipa3OBZrQ
QrREXHFgQQMqVdE9sO6woyu4eLiN16M+beW/fv60UHS4+sMYRz36YSbe+z2G
FpqpBHH1p54iXsddd3zSaOF+AzWROqkOIV+qC2tFtEBAtzRqh2qRfeQa0auW
Fk65pQr389ei2MRpltVOWui8QHvilNMTVJ7zetJjdGfeqxauKtU1aLCsofzT
B1rgX3d8n0xTgzaell5y26IFivyU67YW1UigK11/hYEOzqWVWFQ9eozUh2ME
XfjoYK0n9UQc62PkNO/7eUmKDp64RGxSXHiE4r7ZNjqp0kFVyJlvYgMPURX5
qRsLunQwobj2hk3pIXrLiqwcLOlArennu7d5VWhbQHr/e3c6OPnrzfFUXBUi
7OP7Y3uJDgLm7g55Rleio8r0r2du0EHvuSfa+M0K5Hp8Pdv6Dh3kznbfYlst
R4mm8+5TFXQQIul2aP/qA1RtP3jEqpkOzp/qTGrfLENj3i3M7/ro4NGBB1dV
mcvQ3/CKdxYzdPCJvg7/VfI+Ek3IfjD2lQ44TwSc0DYqRdrZ1y+eoaCHPQpF
38pjSpDH/SC9ERw9yNQrK11pK0bJdU4CZiL0YCW3+leerRjVdph8GpKjB66I
2DBepyL0bkjjmbEmPSQ/LA680V2IKN7Lxg8a04M2lVfjnHIhElsTsjR0oIfT
Dlci7GsLkC4Zi3S/Hz2onXq+fUKjAHmx/Pp1MoYelD/njraP56NU/uVXr1N3
6gcry35F5KMGyZHbekX0wCp6aXBbIR/NHG53e/WEHlzCb3S+WM9DNMceq+p0
0sNzxVx7jY48JGVyj6l7hB6Wnh0SM8jPQwZ2iRPHP9BDfulMZNWNPOTndams
Y5Me9r2kp+SMyUOZYW6hRxkYgGL7nAv+Wh5qijfXbeNlgFg3vIJMZh56n3Wc
X1OKAfwMd60MV+ch+tJDH1tVGKDkfd4vi4k8tL9WtEFNlwH6I+YI20z5yKgd
F9d8lgGuhoc1jR7NR4FvyM4idwZ4dSp9gy42H2XPfpZqvMgAZ4t/3YsayEet
qxPbqjcYYJH5GoPU7gK0+Kf7ZX3ODlfP5vf5FyAm5ros5QoGCE8WunKwtwAd
5CtyrWtigFTbvxm/JQqRmcQtlcN9O/PxSCb3RReiUMUoxifTDKA/U7FyZKYQ
3dXyGlf4ygCNH26p9yoXoXajc/cfkzNCkZl1C8PNIrRioxcih2OENd/ULa/Z
IsTmqaLzcDcjnEeKx+Oki5HCJQk+WTlGGLS4/3LesxiZx3GtVGgwQsQb5ZVd
94tRWCZ1/X5jRtCW4JJ6OVaM8ou/XXtgzwjnDgv7tP0pRl01M+b7/BihA7K0
pjlL0OcXvZL3oxnh6Y+pz7xCJQg/+GxLIpURNFeHZtN5StDhmfvdxYWMEH7z
o0ExVQmy/JKRKfaEEXY/vyTePlWMIn9fcSnsYITTfrbWd0uLUTGjv/KeEUZw
KA+JE3AoRj089gz5S4zwzWzb15i1GK2JGY7t3mSE1vEo+cySIsR1CErv0jOB
0Cz7QKB8EVLV3B9M4GWCFUHunMrKQmRjyH/ijiQTLK3f+3VYqBDFWDPwCqow
gUbtBUfliAJ032Pjw20dJuB3pOlmHMlHfaELdXxnd+o9tb3278lHP669ic10
YwJx+jcs2i55iDej9QzPRSbwkuYWESq5h1BRpUR6PBM4RWvUxs3dRfbVOZu7
cpjA9MSuiIt8d1Hs87iuW+VMcPy8XPuyYS4q7w/O4GhiAnIb06Y0rjtocMr5
fHIvE7xsPhUinpiNNj6ZKuGmmWD8MtUlU/xtJPhLk/7mKhNwvxWl6c7PRBoM
cqOs5MyQqc0w9uNYBnLmFi65wc4MuKCjyniydBS/lzWIeTcz/Fo3imLsS0UP
5X8fjzvIDCfd0GOfp7fQsPoKN6MGM7SOKH683JKCfhmMLsUaMYOUcMMBjsVk
JHyuo5bOnhmYat2exO1LRkfdq69e8WWGzzmnIpaTkpBrSN5pmugdf7C2bgNv
EkqMvSkefYsZHllZ2/O9uImq08I2KAuZgb2i1qjixk00VuDeGVnDDFMrQkPl
QTfR30cW6eQdzMDQrde7EHUTibZqO4cPM4NanYtBzf2bSLtP8fDfRWbY0mNr
5v1yE3lM7qG7tMEMwgez6Kt1klDyR/zILzoWePHl1sf+xiRUt0VeHMLDAjk7
rxYfrWQ0SbcasCXBAkm2E74WE8mIkmvyWJDyDt9iW+IKT0Hie15xbZxggXtH
ZhrYpG8hPbmni/4WLNAsd380ceoW8lYrfvLDlQUuHXB2HElORWknU6/4hrIA
pW/uhMTRNNRgednsWxwLFJGb3xlZS0Mzrt5i3tkscOirZohZajqiCbZeX33A
AlQUpl1HpTOQ1FX9jguNLEBxWGYl4nEGMkhVTfv8mgUMP1GOSElkIr98SSf3
KRbIEow79/RqJsp8yK348QsL7JvzeP+nLxM1NdPQupKxwvxpegl5siz0/vX3
tx/YWOGw58D7LY4sRP9uttBZmBU4/X1xDixZ6MBKn/+iLCu8bbGe/LGSiYw3
G486qrOCz167s3cfZKIg2ge75g1ZQc77NHe3USbK4cxasLNjhccxtgTiVAZ6
LhJbM+vDCis9CZLipzLQkmxAjM1lVigt9/jEeT8dMYOD6XQKK+gqbByf/pyG
Duob7T1XwAoUvmtv8gXTkNlZtZ/vqlnhDBP/ngbVVBTqcqD9bDsrPGPy6CnW
uYXuBgqkjr9lhYuHSv/S66eg9hhGR/NFVihrMiRLPJqMVlI2FUbXWSE3I0z0
s2ISutr/jWIfFRtQ1pWefi16E2WOLLu4MrGBbLRUahtrInowNTNQysEGIYfZ
6ZJ/xqOmhRHlZX42mHv4dVF/8Doa+NR7T2IPG3zXVTuwUReL5r+3M5yXZgPJ
hzdXLcuvoPXtZ97FCmwgc4+5beZRNGKgrB5bPMIGrfkHXW16ohA/Q5m62FE2
YLRltFD/HYEOsOeVOuqzwRoMSbhrhSM17kxcoSkbRFWUpVfrX0TGQjeD563Y
IOGekhHb8WDkuPfqrKgTG9yQTNvgCwxAQdJhJ+wvsIHrzht5rSlfdF3e/2Fe
ABtIn8lP0rvojXJU3HnnwthAbFtw2OyUJ6pUt4/cfZUNPnislPM8dkPPtS2W
bRLZYO9o8u/TUufRkIGh4d10Nqjg9DmpR+WIlsy0n07nsoGd63KWv7Id2rKC
3YQSNgg04PH81GmNmB0Vr52rYgPiaGGdk4klIrjvX8upYwPjid82t6rPoIO+
e8wnW9igcDWMKafYFGmF8LcKdLMBU37LxJ49xsgsEi9pOcAGFvFCmra7DZFL
LEPS7TE2ePoo2lYx3QCFJpJvjc+yQQrtikbaH32UkLZhw7fCBu+iZedF7umh
uzlfusy/sUG1splTKqseelywIJu5zQYUC5TLf1T1UHvZu4xRSvad/S+VTQnr
o9FHb8h5mNjhHJV9I+WTk2jl6cvzpznYgWZiXHHPtgH609Lan8bPDrwHTjTL
uxsitq46pWFRdqB/m0NtfMAYifRV3t0lzQ5s2wSxE8gUKQwX0ZsqsMPapDOM
Z55GxydzvG4dYYf5tyZ+d5EFspi/NfpGix1qae80LUhaIfePcWoc+uzATZjT
by6zRuHfokqMTNlBesjz3LCdLUraCmZPtmKHnivxk5cO26MCcu+gAUd22L59
0ZdL3BE9oTs/w36BHW50O9ElH3BG3azW2qcC2GFXeiLdBR0XNLHLrCoxjB2i
j8a6PAxwQ18E9Hn6rux8Brg1fudLhQci36MVwZrIDlQsZQYFAZ6IY5/qB/10
djC+vnRNLd0L7ZWTO3Vj5zNDS/IzVfIn3khJWbKup5gdDuXKUq/3+SAdNWFh
5ip2eEbWxiI454usjnPH6taxw7FqDRnHZT/keZL16/UWdnA2FrCtn/NHUaY0
Z152scNzEdeSfa8CUKrl72aGAXYYqivZGMgNRMX238VPjLGD9+K959tWQaje
dSUxdpYdlj4wUcpQBaMe79mNzmV2OKPWIKt2IxhNB41a031jB5VvXmJG28Fo
Lbyv89g2OywU/7Jd0A5B1Fc7ZK5Q4gBXvBy2HhiCuBIa09sZcUB2LG3Pmysh
SDK1moyGAwdVPvkh+v4hSDW7zFmLHwcLWbsO5miGoJP5eX2XRXFgdMRo2etb
MLK5n3n4xT4cTOdkiMxHBSPfhzdzKRV2/Na2L4PWg1BM3VU6jSM4eJjfkMBq
EIQymsM8I7VwcG4lRGk0IRDd7/AfadHDAVdVq61BXQBqfO0O5KY4KBPv/yDW
64/6h+yLwQoHGeRZV4688UNzExZs4Y44GE3V+3HtpS/6OWcY2OSBAxnz24xc
tT6IbkV7+o8/DuhlotQXb3sjvjU4TgzDQQhr7OrXUC8kvalYefEKDma/T2az
W3giIDvA/SwBB/17JRy++XggQ9q94b/ScMDDYe555rAbcmARWFLJxYGOSdmD
JVoXFMDJYRBSjAPpeVndmgUndI2fsfZpJQ48d3lWGYw4oNsiFIStWhxcp78Q
+HTKDlVIbl5RasHBgEPEJ+e/NqhFdvVLYNfO/k+bvdBSskZvDi+a1fbjwFRk
3d5JwBItoMmm9dGdfWQfx0uRm6PNo0NiirM4EO2ebS8XNEOM+q8S/JdxYNJ8
+u2anzESNHm+Xr2Gg01BtTxFGkMkc/bpuR9bOCDqti9L3z6JNOyqOuQp8WBS
lvhJJU0HmbgUH/BlxINye7nI641jyNnrTtojPB6O1opwOtZrouDA1L9rfHhY
8EmNJx9VQ/Fh8U4HRfFQtmhkEp9KRLkxl3u99uHheE9KhBmXMnoYH6JYJY8H
tkRNHQWxQ6gtxfvOqioeno4UaArWHUTDWedpZbTw4MUt8aMl/ABavmd94YIe
HgSzbr1Kt5FEv0rMhstN8KCw+5ZF7u89iLVKH322xMN1OadycbQbCddqFUk7
4qEryXxeVFQQyTepsrp74CF/vECutYMbHW2XCyjzxwOPBVKNPMaBzvRITq1c
2jnvn4Y8umg25PpG+JjUlZ3zevMYne5mQJfGuStcEvDgHzPRnX+HGiXOsnKV
puGhxd9T+vI5cpT3gSbswx08PHQrb6jv2iZWr/5eEC/Ggy7NgxRqoZ/EzvXv
+s6VO/PrhUx5X/lKHP+zUlNUi4dITYdgsaIV4ifqOcHFZjxcTXsje7BmnkjG
PBaztwsPcivlVRvr00QcR/9nh3483CvTw/c7jhH38HWaFoziwbeKnnXe6w1R
cXdT4/sZPIyV25v1X+4lnpCo2Su6jAf65awFtgOdxLMyD27YreGh4dWB5eDA
VuIFxfyf97bwYLXR+qyYs4EYQcyymqXgADvie9q3UE1M0UpqF2bkAG35nppQ
ikpioW7sfhs8B7QHSI4fpSgm1hmFp+byccD1ucY175W7xJfmAX+mRDhgsfyQ
+KXcTOKkjYej0D4O+EvOUM1clUxcdXZ4bSXPAQY/HMZGf8cRKT3PHspR5QDe
bednHsRo4q4Ao5x3mhyQw13Ze/n3JaL4pRM0AnocYEazmcMR7k9UiVbzOGvC
AR+ppjUm1D2JenGH32ZZcgC37895DwcnonXyAeK4Awf0eLn+fqhuTfTO3FvI
68EBEiuOraoUl1Wj7wqwmPtzgJPv9PDeax4NacUc/hmXOGDrwNk66rFo1dIK
xsmRGA7oVQpLdhVwbGiooTjKncABobhvkm9YHRp6n20+MEvjABm/1qv+o9aq
My9WOdPucEBnhUiP7NHzqt9fLl58W/SPg1RpBifnOStJ9ao8Y0N6JrUc8Pb5
2JmC75ENUjOvqlOaOeBplhs0piWoEpeeC7zp5AAOPeMLCaEXG059eRqN78f6
2f2s+mQ4+q/eu8H/d7FJ0sy/fD/Vq1S5z/o/cADZfz9ZjGl72NdIeaoPcDfi
DbYwfzNP9I8ECs7/9HjVAUKoZS8D53/9PBvmxXzaWPAYr+93kdbnI7EqwyGb
W/EimM5/5PTvV1L/OFH1gOZJByZ5TtI8ajpHe3RUsXpjwyMK1zX/cbiq4xn5
7G5dLC/IWoqawQSrj3Pa7a5tiXGOB8/QVQcsr8qP7UinO9b/eShtAa0/53/3
kaH6NuoP07FLWL+laz98Y2Iwffvmx4m2G1g9c8acJnUa5ifkjpVp3sH0g0X9
HJeLMNYq7wx9XvGPc1XNqpveU9RiuktDja56MzZ/6PMHjyM6MX9Cdz5/Sx/m
v9ufdZlsFOPHI0kf0Qw2b8dUrHHYB2y+0YXwhsavmP/jpwDRP5uY/ue7R9wR
il2kfuy/HL6HMmAsQml5tgG3izTfIQbjF9u8mH6cXWefigjGFtzqKcFSu0j9
3IWUftXJYRy+V8Z+UwXzJ0mLvTqsiekF8oLygbpYvycqnLefGGN6tzoT1fpZ
TJ/QpnQ75IDpXwy2Bv3cMaY4/VWl2g/zc5xbyvt+Eesv5jjFKB+DsZL7Wx+f
Gxjr+vaMP0zF2CrkhcZaDpbvFVl/X7YI46jYh3ivCsyfmlgSUvkE4+K03Lkv
Tdg89TlpOgc6Me4puPHIow/zT5dF85WPYPlrj0KjPk1jTF3vs7LvA+bnanUx
cvuK6ZJdNvX3N7H8I32nRVbIuUj+k8Mnr0syYGw7efTbeRwXqd53/ohFCS8X
qf7KR/nnS7sxPeOblJS4FFZftrU72UkO0xvJebcLVTC9n47dbkED4zlWupd7
dDH+uevvQQdjrv+e5xJVOsGfmflnMZ1vzyeK9/YYS+977yLijjHIjQ/Y+mH9
DZUHlO9dxHQHta57M9EYBx5vZhC+gZ3v2skn3tapmJ5tWj52Jwebp8KyQH2q
ENNb7W+XClZg9W9ck3FWTzB90ftacHYTVr8ZFDE70YHNxxQReIK/D2PBqxce
Woz840pV2QRH3qxpLE8j1TJybAnzm2YbL/N8xXTnfB3DM5uYHnJf/Wk6OTep
f/xDpd0j9Nwkf26dzDUuHDfJ/6hZbM2Ul5vUv61D0Dx1N1Y/8pqzdUgSq18e
YpLklMP49wRlkrEKlsf6fmszWQPL273y1WZQB9Pl15a6cMYYH9uckjU8i/nP
kA1n3LTH2I32NXm/G9bvEkvbeTY/jG9yNvSfvIjNm8f/SCkhGuMakdK7r+Mx
f6fkXXqWVKz/uGy6l14O5v98OGE0rhBjMohRe1WO1eOPXSxhfILV79H3Zddp
wvTDJq5B1zowPnHWdqarF2NLuzPa9CMYX3AxqDo+jfWL9DrGc3UJy08JJEZ0
rGL+ojCFDzSbGNfF7Dt1lJyHxK/iReqi6TGeTOEVbmPH+GsWeywVLw+pH2Ue
3VeN3Zi+q/Tv6ShJHlJ/iaqfza0HMb9K7SdxChXMr9/0PlFNA2Pr9vGNcB3M
79MzYN1shOVFv+nq/GuB6enjzTLIHuPS2Sfpl9ywvGcfyskafbH63tUC59+h
/zhcdXb9dp9qNM9/72cKVL//ST4cGo8xLc313PpbWD4PcyTddjaWv48jyFO5
ENOJfJ4jQeWYfmq3E9TVYGwvYVW80YjN4y9jwna4A9NjFXUDA3oxziJqTNcM
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
REn8P1cAkGc=
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQfTuRpcDvO7cDAxTA+MKVi9Z6q82zR+Wvg/N1/9Qw
vMjaD+fH/nrGuDXsOJx/+suryKUXz8H5yRLr3haWX4bzZ7NcUDnocB3OnzVx
RYF59G04f+3ddemtSffh/L/W/ascJz2E89siF2lfmf0Y4R65V8v3NT2F8+MO
nfgpkvAczv+0jenav9SXcP7ioMK1Dp6v4fztdtb8YqFv4fxQrjlu4eHv4fyO
fTNsKmZ/gPMlFARn983/COebXVX+HjDpE8J9RikSsTM/I/z7P19l/uwvcL69
gpheb89XOF/k5cs/RyZ+g/MrWCNOrmj9DucvnDix4VDJDzj/99Eff1QrfsL5
T3x/lZlm/YLz/9dqbusr+A3n35dVeSBb9AfO9xXcyR6Z9BfOf7um+svdtH9w
vsycG/f4ov7D+e21DLesVBgcYHzJRm31yUsR/KJ1ysWOcoxw/pP1mxaKLETw
ZW/znbeVZoLzLfdd+Mg4GcHPK9X8/kqEGc7PCvP/rdmH4Ndz8zzqFWSB88sq
9Pb1TELwTfnlZj7kYoXzeauWhEX3Ivhr+H4IabOzwfm60RuPTK1D8I9XM0aq
MrDD+RrH5N5wVSL4Isn8Za17EHxIbuFwAADx1mJf
         "]]}}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 10.233395777577732`}, {-1.0960935894999997`*^-16, 
       0.6234970048172805}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Var along dominant eigvector\"", TraditionalForm], None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{0, 10.233395777577732`}, {-1.0960935894999997`*^-16, 
       0.6234970048172805}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.006944444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.006944444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.654496955435972*^9, 3.654497022611085*^9, 3.654497231397155*^9, 
   3.654497340300375*^9, 3.654497388899076*^9, {3.654497450811182*^9, 
   3.6544974849194393`*^9}, {3.654497790502699*^9, 3.6544977924735603`*^9}, 
   3.654497965627451*^9, 3.6551279899504013`*^9, 3.65512808738251*^9, 
   3.655128186994864*^9, 3.655128369348722*^9, 3.655128401257647*^9, 
   3.655128534500538*^9, 3.655128599191131*^9, 3.655128659757831*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxde2k4lV/4NckYmaekQRqkJESprF0apTKUJENJUiolzRFKUhIhDchMRSXD
T0pKEokkGRLOPJ9DZEjkf973ut7/h/d8Odd97Wffw1r3fva6PzyzvQOcDkyS
kJA4JCUh8X/+LwvMY2andEDi//2MAiZXrun+X3vX4PTI81u6EdzxOXTX4SA8
ffdJ3nJnN2D01rto8BQmx5yN/uXZDZdJFiP5SWewx22ecoFfNyJad1nWO5zD
i3ktcX6B3ZB14q+omH0BcgNhGoYXu2EZu8tEeUowvCqXJPVEdENgQOuE0iWU
3OjSfXCrGwVhPde9EkKh6Hoj2eVeN/bbTFMbehqG/YYrZqpldoM1p1Hrems4
Xvax0hvyuzFMTXNYPuUKVCoSDKNKu2F9IOeb2tYI+EatzV33ththgdftZyVf
RcXOPiOJT924RX26ds9IJDQMUvNffetG0PhU78J9UTgs2rLkTFc3di+qbpzU
fh3vyv8UmrG7MfODypXZe6KhE5lrIerrRq1px9sm3k0cc97536PRbpQFnbxc
ffUWPsyUsj4wuQerH+664ZAUi+mC569nTe1Bmdqw6/jxOASWeeKndg98Zigk
LXS4jborilVJs3sQ2BrGibOIxyzH8nXOxj1IG0q5y9BPwGl9v49Tl/Ug7Pr1
e/VTEtHA1bT7ZNMDh9BTsezxRMwpff85YlMPjBue9zYN3MH58BPb1zj1oMjK
c6aOMAlN22Y2j+3pQb+hXMl67l3M12vYUXagB0fuHCv/wb6HEPb5tpMBPRh+
WijlyLmPlqIFbkvO9WBRPD1Bj/cAxqGtP3nhPdhkxNPKFSQj3P6KV060eP+J
M3vcelPQrmNG23enB591X/fe+ZWKJcweH/20HiyM3VHxsv8hrhbeZLc/6oFl
te9PpXNp+Bm88nBCUQ92fru4LWo4DeZ2XMH2ih400LQ7zgal47pWUsCUjz1Q
+2HuENGbDgptXX9NUw+0WiPm7vLLgNWz/qDwHz3oWvrgx53uDNy8kDa8mtGD
SN3g00LHTDA2bjv/R9gDgfS0f5OrMmGtMTZWPNyD2JgnomsmWdjc14IyCQo8
Tde/nJeUhaBWY8k70hTUSBXaxPzNwsPX4VUnFSh4vvilXeCebNRndFx2VKZg
5tCIUlRpNoauma5fokGBC9mWGK2Yg9kBkTJKuhT82zHZZqVHDux3dn/k6VOQ
Ndo81zUvB2dXLouqNaDguMXXxCfCHGTOjrbLmU+B9vawg1KLc9EoS59yZREF
nR6G+819czEqXNGwbykFVvk372jey8XcltgYWFJQRS/PvP4hFw7l7O36Kylw
aL8sc56fi4tpNqp/IY4XWe3QrJCH3KuJze3rKNildMo9ak4emo8I4ks3i9cp
y04mL8vDPyfbnQnbxP6oO5I11uTBaMV9rUBnCn7vvL7pz/o87Jj5q227KwVL
Sg0Pe6zLQ6j0pnuLPShgZ6kIPFfl4Qk/1W2KNwUbsr7ozjbJQ+vXQT2uLwWT
f4c+a9TNw6Qy+64afwoYjF2F9yZysTg1MzXrOAVzfvxn9aonF65XRr3CT1EQ
8ni16cnyXFw57Dh773kK8h6pacjF5uKZQx5t9SUKcnX/xNfszcUPy4lMvSsU
TNuVYC0pxkta3+XAn2sU9G0KlVYZzMFSqYJ5bTfF8a50Dm5/mQN3rhSn+DYF
dxSH7hqcz0HkF7dHt5MoeLKbHiW0ykFRSeHh48kUaJW8FOgOZKP7gdyibekU
LDrixFDPz4Z8uJfQOIeCJiNfKbv92VjmV/pU/omYH2X2y0W62di7Tek4+xkF
LJ+QysWNWbhh4bP0QzEFXhFaFyvDs1A67VV/xksKDna4BeywygJNQq049A0F
Nye07noKMqHE9jvl+Z6C6HD3n9syMrG8odJyVS0FbzucTibszoRPkdaIbgMF
1t9iHZPVMnHr3tGXw18pMPFuv9vUkIHyS9Xnv7dSEFgto3j3RgZYB/RWFXWK
682bdG2nfQZU7QPHYykUDOq/0fRXycAqs7o3x5gUNHafmbSkPR1+OrNC7Xni
fkhp+m8kMx3x/06vWdhLgWCbfZCy+Py9YTRMkvst7i9NBcPKTengfTKsZo5Q
MPfwbh87g3RoFl6IeD9OwYp02fE+iXSQpOYN6ZOo+NlvMIXOSMORYCO5S7JU
6P/x3LO1MQ1J+0Pr3BWp6Lr4V92xIg1Vm9uuW6tSsbbx5VnlF2kQLTGx19Gi
QutTt3tqfhp0tSKUhqZREXlzV8WUgjSsG+ts/DaTiu11u155FKUhgGYWW2hI
hUNVQMbtyjQ8qI1yvGVExXj09NG0r2moeUpRO2pCxba7NRlnuGn4lWDVYmdO
RWGKxr9xmXToX4hJXLCcitnbDhtoLEzHpn1MF5nVVCxQdNeNd0rHyY2rdBhr
qIjZ3bxga2g6Hi6O73i3gYpjAVHzphal45M67/7DLVQMqd/4/oCXjsE/xD3Y
QRwvxWxr6bwMzKYk6e/ZScWH8VWHdA5mwL5G1L3cjYpvErvXnn2SgTP569O0
vKh4tSb1aeRABjJuJ+/7vZ+KCe91db9tMtF4dsCg2U+8vpsdevhmJv542jGe
HaXi4+17xnHdmTBcn559M5CKJIc/M5XNsuBgPOLrf4YKS90gp6jILFxQ3b5g
80UqolZ3DGZ2ZyFnOJs7L4wKhTHnGVJW2WjuGns8+SoVgfO7D2yJzcb4e+cj
tOtUvFCxjDPgZWPB48eL396i4kGUh4XpuhzsiJXsTUmgIjMsa+eM1BxcOu36
/MI9Kub/wdT7wzl47P7sxO5UKhJ4R+fvcMhF61oZc6tMKtoDFxRJ5uVC0sjj
t0YeFakSxx66/8vFIuXikv58Ks7ID3xa4JwH10GFM02FVDR6hkXMzcnD5c59
y5+WUmHs4r9mxnCeWG+U/bnxiorB3QtD2Osf4Ueu8qtDb6kwD5k5Z8/tR5CO
8b248QMVFRL61W4/H8E0qGL13E9U1En83PdtzmO4u2lMTPpChf/4ldKXfo8R
SfzfUr5RYfq47PXfx4/F+qQq7E27OJ+iXeszeI/Rpahrm9xFxY75MhvK5z+B
/EDA5PM0Kj6HOTJdvZ/AoqPmwy62uN65N45k3H8i1i/6kcsEVFwuncovbHqC
69lBm9R/iet5qnGkcnI+Sm/Uy/8apEKCObVlklU+qCcM6htHxf1ypE6x7GC+
WN+ci86fEOOpY6a+KCkfy22atl6fTEPahnUXnn/IF+ud+cp+8jQkbiyLTx3I
R4xCSNP6qTSccHgivWt2Acr7WuLmqNOQM13n0JrtBWC2GjtL6tDwMuRzY31w
gVgPhWv0TKfBUvYuOVxQgFWZHd9fz6bBui14+Z3uAhyMMk26P4+GhspK5UbV
p7gdEOl61pgGmZcZvgkbn+LNzm5dF1Mamh+3RASEPgV35bJO82U0qK7bV855
/VSsn6KTVa1pSF8+v+DG+FMQObpHrw0NT76/LWWufQZ/0YqZDbY0JB9rNo24
+Qx3WmIpjzeJ/TFZxn+6nqGqnJ1+bSsNnzbOazg87TmEaTb7fZ1o+EjbuHrb
5udivZVouG4XDT3eWjt7LzzHuqMC5mx3Gkb9L6XcfvEcAc62uRN7abj+WsXt
ovA57q+479d1gAb19KBA4aJC1Mz8ZfTqMA1esUaqBicK8Ut6E/9uAA1nNngf
ci0vFOuz1PzTQTSUumtP+yT3ApuaB4/uOEfDz+xFTwrcX+Bkmf0SsxAa2vhd
TstLXyA1NbNP+bJ4/1M1JGkWifXbaKEwkoYPe0/4Dp4vwuBhx5P10TTk9bBD
L7CKxHouz+JRHA3XZo222LsWY4vVxODVOzTsab9z73pTsVjfufzn84CGcWcv
ny3bS5AhVXB2bRoNQkHv56yWErHek7KelU1D/NKm8kd7SzHyxe3v+CMaHhw3
u7R/oBSGpYWvO5+K8YgRfm2N/g/bk+VCXhbREFTXVyazuEysB72QVEbDivlG
7aJvZcjxK5U4VUFD39IFTWFhL/F1m1KVUxUNHmuWHyxZVo4xC5/Lph9pkDed
/+JYXzkW6L1aN/UzDbN/derfKXwFZ0k1GUETDSf9KzQUz70W60e/j3XfaZgb
MVb4ZEMFHjdUXsv9QcNf7w8Mu2lv8L1Iyy6iR8znf5Ex5QNvIHH/6JT9DBpM
RT65Nc2VWBRa/ZlwaTAv8bN4sOctdvnqxcwQ0XD84XL4Nr0V683A7WP9NOw/
dS81c+M7PDWrU/kxTEMnc2bL0nfv0KEzq/m/MRoUuF1LBauqMHnidHyiJB17
DwXfeVReBVNmw46TMnQMJmJgjfV77Kk31HKcQkfg5Bevb7x6L9anF9pMVOhw
7x0O8bSpxouk5ruKmnRU1Qg/R1dVoyvYyI2nS8dl7fhG7sYPkPMJ1audQYd6
puLExsYPYv3a9jN7Dh3GQUP7z+2sgZepSerlBXRkjyTUbO+qEevZCK99i+l4
+zBVlHzgI0rGOmfBjA4ha3u3meijWN+a0aZb0cF+bq3DPF0LxbqozNGVdOzL
LE+ImKgV612KTzuhQzV4/hxOZB28E63mla6nI8H5Yw5N+RNiLsSw4+3osM7K
oW1J+oSX+5h5J7bTIdnQajumXy/Ww6sOb99Bx/xLrmGNmfVQMYk3XrybjuJy
jlXags9YqcETKHjSEc1nzt2W/xm+o+Qpx5uOSE5w/EuTBtymJAXUHKRDRHpi
ap81oKJGZJp1hI7cr1yLvUsawclf3x92go4F35yaDxU0QiM+ucjrNB3PZpj5
txh9Ac4NBK2+QMerJTczY7O+4LCXnaVeKB03rE+b1E5twp316cMjV+h44ewf
4GvXhHfGI2WtUXT08tUwM6IJAtXt54tj6FhpqxXc/6YJOiPZK2/H07Gus2Ua
dbgJtt1jYwF36dD9su6zcMlXHKt2frM1hY4jh15L6h/8ivuPH18yzqDDTftq
d1DKV3yIlVwjn0uHZojdovHmr+g77TqJ/YQOixqfLZWyzZju8ex99XM6zMsv
X6xZ2YyNtjIRGSV0BKybxZkR0IxAI48NoeV0UKiFmd/Tm5GqXCzrWUnHbPtz
//58a0bdoELdymo6GnYo/nsg/Q2/O/dd162jw5ntn/fZ8htmVpVtGW6gw0Dl
Bj3l4DdsyVNW+t5Mx9YDWXkGd7/hdIxv44s2OmpXLP1zrPYb0oMqbsX+pOO9
+ZmghJFv+Oym4XiMSseq8cXFjxa0YIT4q9mz6Hi36c3it64tmDO/6psRn46D
9Ogzwmst2KakmyjbR8f9S5XC9S9bcH4gwIX5Wxy/87djN7cF2R012u//iPuZ
GsaonfYdTZX6HWn/6Ij5cemsrv13jGUH3Q+RYuColvMTevB3zI+u3+Mux4Dy
4sB0y+ff4RRooG+txEBXxMpqQ/p3hLie69ZWY+DTirs332i14pFN08NBLQbW
/Tu8RX1LK1oM5+/7psfAoy1T1pmGtkJiSohB4SwGznnZSs4pbYXxrxZ6zFwG
+u70+g0LWuHSZpx9ZCEDB/7+rC4zbEN4Rbiv3RIGXLat5AV4tKEgs2P+AgsG
CucPt85NakN7lClXegUDRUOdetSvbZh8PPIxfTUD7keUTuYqtWOJS7f/u7UM
lCo1lQbbtcNt1bLFDzcysNdt1ly/a+24ahAtumgvzv/pcNOhj+0olKM/c3Nk
wOz1X4TLduCnaMWJ5S4MyJyWViza1AG577FmWnsYePdmFGPXO2D+ij0w4MUA
RT17pXtjBzzTbUq++jDwI/37gya1H4iKTDz97BAD38ePTN7l+gMlRwVWN48x
sNWxq0OQ+gMUZ9s/h08yYFOkZn6T9QNTrO+Xbzorxtd6+7jFkk5Yzvp1YV4w
A8ZJ8y92n+2Et8ym1ZPDGai2k1GPeN+Jm4LUf9Sr4udZcdsMlX+irHmwsvIG
A5u/xRSW7PkJRpl9WEosA/Xel3SXPfoJ5YeZay8kMuBcIpmcOvwT1hGjUrvv
M5AS3TCHu6ELvv6OHywfMlCx5K6ualIX4hzzrmpkMVDOOHhLjdOF11YTG/vz
xP1QsuwIb0U3OPou8k0FDOw7ZTvvdnQ31CcXfCp4wcD87Ump0pRu2PCkom/8
x0DdGq+INRY9ONzktvXQawZijP8dWhfVg8TSwqkb3zFwcM/BGoWeHrxNlmsy
rGGgFaozaqeJ55Rwr7hJ9QxwbjxZdHiDeI4+VOpE+cLAvHV/rx4OpGDtdiWN
Ny1iW9l7QV0qBceW+Xx/0MGAgfmFooh6Cu7pvbpzrpsBB9b1Nw/Fc021pJrr
LjoD/2prLmrPo6KP7ae7jCOu/8sZX6EzFXqNlT/UhAyk8qyOGoRTsaFYK7nv
l7jeO6E7/3su1tH3j3o0DjFwrWPHw4IeKlJCq2fk/2WA8fxgo7QyDbW+epQo
CSb8prtPrhLrot/2gekHpZnIfrJiAf0YDTPN67zXKzDBTAwr9X9Ig53uLMM5
ykyw56/V8xTfs6cmTjMlNJjwaDue8Vp8r6UzG3K6dZjgGV9+F2VOx+d6Q7/X
+kzYyn97UXuAjuHCC0b3DZho2L1840Xxe9HgbjPvzHzx+jH2+9x6OraFGOXv
XMTEfqnOgm0TdJzzCT1qvpSJbs0HdqfMGciyazNRtWRCdc9ut5l+DDSZmvSJ
rJmYd9Jot2MKA3+1Igo/gwmpb1eclb+JcR7vDHy8jgnW1lCKpzwTTnQzi2ub
mVDWcly8jjARXBc1eGAbE3bO/NsfzjCR94xSauvMxK2DM3ZwnjHRkmh1drYr
E1NbB8xfcJiYuBCzYsKdid/J9cTIgIWF3szRn/uYcJdw/+jszoLLplWvy32Z
4AYWbl+RxEKYSXzwXX8xfuZD7tRmFvI1eDanjzPxZ8W+LU7KbLSPEokdp8T+
9pOQeHs2pKhJ75aeZ6K+Y+RMwXU2TD6KwpUvMeF1bKnMozo23ArWrxNeFueB
u2ox8hxExCdL119jIq6RFnnAjoPn5wZq8m6K+Vxu8WR5NAc/veyuXb3NxPul
6FP+woHshvTNPklifgarjw+qcWG2aERhbbLYTovq69/Fhafa9s8z05noOTwj
WC2Vi2sj2TfHs8XxN//gejK5KO4e29b5WIzPbL9M6mIeKNXOKi/FOI11jizM
PsODwpPHX+8UM7H2wFf5kioeLOMk44NeivMZ+6M0XZkP7zOuO5zeMLGe1qrM
dOcj2uOZpul7Jk4HnKvUzeejzFamTamWidFU5+iaMT7oRh53+Z+ZmLUA04a3
CTBVpXh33Vcx/7rvTpVmCGA9pKCX28pExU1tD+URAQ783PfzSicTL40PvVTa
LkRsVVmKN4WJOVrnTN/kCvE6T9mLMJn4eb0qZ+EkEdgxvrNm8JiwHi6b4ukp
gtqpCupfEROzm547+7wWwWaPRmbHgJi/VqPuTdN7cWiNv89/I0wwZkx5px3S
i4T5VXMTx5koatVi/aD24q2SLjtwEgud/b8fNc7pA38gIM9BloXLMuUo2dUH
rR81h0wUWXAktYdzovuw9q2+saIqC1f9PBNyq/pwNCdIwNUU73cxZFf86cPd
6PqCj9NYUCX1x0VLf6E60CAgeyYLV4j6XBv/X+h1PWd62ZCFtD0Rxwqzf2Ea
mn7tNWJBWrX+8lbqL2yYO7/IxoSF6Q/yL2vN6MeJKSFB081ZeE0781fFvR/J
v1qWjVqx4Cl9oJk86Edtm/Fw2yoWXEUKEo87+zFQEV5WsoaF7pmn4KA/gBlZ
HefiN7DQt/KVheXeAdhdN115YgsLJRYK+V5ZAwg6Hjm2zYGFoI6O3kbuANJc
uisW7WThodu7C1dNf+PzqmWXFNxYGPfL+XPt7G8MGUQTjicLY6fL09ve/YaB
PF2yZr/43GivLjupOIhtvSveZ/qJ87nmedbTdRBnv8deCTvKwp+m9QuTsgeR
9Yq93iuQhUvBjvIzfg/iS7qN7OozLOwMCFYasB3CaGRi7bSLLEiqlu3XSBzC
vGOCqJFQFpzp2zeHsofguMN2S2sEC5V6Cg4WK4dx0fq+YvF1FjimWWaLY4eR
N+tXQ9wtFpamYP1B1jC+yWy6FZDAwqv+xlndq0fwT5DqsPUeC4d+/IyKvjOC
hd8GVY1TWfjtofPmSN8Idr60/yaXycIuzQ1Pz2z5g9CHmQmsXBZO3ksKycn9
g/yI0Z3V+Sw8s972om/yKNr8HbUzCllYYTPyz37/KCY55bVfKmVhY/mpKS+q
RmGyfOKexysWVt5eoao55y92z3DZs/ItC5kXEt4fvvIXVyYXTNf9wEKebOB4
DusvnvOkuofqWDhlzpWs2DyGzia3hy2NYv7LmMWpBWOQ+a9w74tvLOid+PBv
tdo4zFLkDGLbWZCbptB448w4PC570Y92sVC+KGziTNc4rh0qzdpCY6GRLlvb
b/sPxduVfI3Y4v466DDCe/wP3ct85ssKWPjKu2W7TW0CCtNfcRh9LKy38RlS
OD8By0lqj6sGWcgqiDNQpk1gL8fPP22UhY8r3BLmzJUg0Y2Vi0ImWGAvjZvu
sFuClBVrifZMZqP+lJXT5ZsShHb/6LMV8mw0jsbYF72TIFPDqo9rT2XjzUCV
fOugBFlxUM9sUI2NqcqfC6hGksRna+BAszYbqwYH3T97SJJY87ri59PF/tiL
3aPjJMkr3VmnY2azER2+d0T7gyRhTZy2OjKPjV4Jpv+BEUmixmoY2WzMxsf3
4/v9jSeR1Z8Ny+ebshFxVfvxLM9JxO/FhQvSy9gwOCq6ezF2Ekm427yKvoKN
vYtCbp2umkQqQ4z+vbVhY8fGyoUyvycRnk9oZaotGwEaP17OmStFtLa0hV7c
xMYr73Hl2p1SZM1Sk7VuW9ngXYw6IYiQIke0I6SWO7HRusbe+XqJFLk73lmt
uYuNLo//1JMZUuQ93ezqwB42ru3+aTVdfTIR1UVt/LqXDfdLebdl1kwm055T
5J4dYCN0rGjC5dhksv6O1afow2yo5tDnKTyYTI5fjLlxOICNTTkKOfofJ5Nk
b6b9piAxPgKD8lv9k8nHTaumzjvHhu+HKCcvfWnSbxL/RSqEjRF7z/4bG6XJ
DE1eLDWcjbWNGWzNE9Jk81/iVBnJRs/95Tn/7kmTIGqSekq0GC/vzW83VkmT
tI+ilvNx4nhD5bN+c6XJp4L1d1zvsFHAnpgrqypDhuKTd1k+YOOX+UvaFSsZ
YnB+QEcjjY2DJ6uCAj1kiP1eux+/sthIG1Ha+j1chpzdkP7gyyM2Mg+Oc4ty
ZUjWohH3gqdsnNApua35WYY0qm2fcaOIjdL9qWmSfTJkdCS7x6+MjddZdndD
1WXJ3J6xtA0VbPRPrL76wFKWOHxw9jasYuNS/KNbe3bLkotPHs+Z9JGNrdQt
9Z8uyJLcOElmT704v9YfPwdSZEnzGdeciiY2+oJnt1ArZck/j2cHH3xn48gZ
Kcs0qiwxWidjdO4HG18kGz5aS8mRHQs9eC49Yn81O3MrDOVIqErxEwsGG/5n
Pmkt2yBHngwpHFXjivcnCRkFB+VI6899Jn1CNlS+GRdbRMmRSe/Lehv6xfhV
/rej9bEcWfxIufDJMBvn72ypePhZjrje8g2MGmPD2/KSZqpIjlw5VWF+UJKD
HXetrnWryJNnezQG18lwcDGUlnPUXJ78WONfajCFA0PO8AlXF3kis6DqjIQK
B2E/s5c/OSdPlk7VXdGtwcHCNXFOgSnyxP13wOgrXQ7uyR8tfPlOnlz7UfPq
3gyxDtHeu/EmS54UvdUPPjOHAy/dqEUjUxRId06Qzc4FHIQKA09JmykQhZv1
E2aLObhfJvP7jasCsThp8E7FTOx/nekxk1AFsnf3uXCRJQe33r5Y75GnQKLR
ZPt5JQdmb1P+OX9VIKVz50s/Jhys1RYVT/urQGhTQmoi13Mwxx/RZXOnkKn9
Lf9XBxlPsh02d5xClrcbb7bdzkE7Jyr6dvAU4vMmXGH2Dg6yPZzOdzyeQm5l
ddT/c+Xg0G1Om2LHFFJ+3fTmTw/x8/OYTqZyioR1PHJbuTcH3GmZZzYsVySq
u7qV7x4U58ONrnA4pEhWrV729dQRDobXXjVzeKBI/OZE33Y+wcG1oos16xoV
Sbw83XnpaQ7y4v1nmkxSIm96V2gqXxD7b09/oGClRHjfY1sFlzh4b7K7qe2I
EtF8zU76dIWDgYLd4bczlQjJsNmdF8UBQ9bju2WnEjlyLXHa1RgOrG4z7N6q
TyVJxwSd++PF/PH32hltnUqqdtimrLnLQWxXsMg/cioRWd/3nJnCQYfr7Gdh
VVOJ7uxfM8fTOTjQ/U9l/7+pZJ3sJuqPHA7mZe32kFupTI4LUzPKnnCwbix7
yaGzyuTBt8H9d55zIFkbmHixVJnUvLSfG1TCgXtnd+aKQWXS/zCT5VjOwZDq
fIMt01SI/tXR3CWVHNg+5mKdtQrZdMTxkFI1BypJ3haX3VRIkFPeQn4tBy+d
LS9MuqBCHi6f4Nc2cKC2+uT31w9UyKcZLgU5zRwkL7v+J/+1ChmaXHDsSpuY
z/iQgw1dKmQWX8rU+ycH+LojUWdChdh/dfsFKgfmXGudqFmq5Ox/hS/0WeJ8
vz+8rLtWlWSkyAX95YntC0Hh1ftVSeNlr2UdvRy8mHPr3pUIVTJ6qHSo9DcH
ll8Fr3bkqhJDB6WyhD8c3Pk0q2RJnSpxsPQ5F/iPgxkKOcEqfFVyYforawcp
LlbrLXPvV1QjOZPUxhbLcSFrbXylyUSNNHP8KqYocZH1xt82x0GNjDdWhnBV
ueI59PTOgEA1sqBEi3zU4mLuGrmI+QlqZMeDo5LZelzofVKo/FSiRi6FVVeF
z+KCGy6xdGebGnl8UO/K3rlc1AwM670fUSOtWwPX2yzkIuXhIxXVaepE0qJO
ZvoSLniPgmpXrlQni6bNqv1jzoVvT/I04q5OXCXORLUt56Kvp1YwLVidXGY1
2JWs5iKp5l1YXYo6efrZUDF+LRecpArzzW/UyY8XFxqOb+Si9cb6g0nd6kT6
XnPMNnsulm17lVv4T52YXjJyWOTIRVzqvqbEGRrE/UCoqoILFyY3FyWusdEg
kVvamtluXCg+/8R84aFBXiw1SfjgxYXqjk2V7IsapFs7YmemDxePzE9pdT/Q
IPL/OrXCDnHxXT+nN75cg1gwzNo9j3Hxu9rnpmyHBtn7KereqpNcpPW3D1sO
a5Drzylu085yMRQyzWKWpiYpvWM1feQiF4FNNdfemWkS2sWYru9hXHyW6Pqp
46BJFPczU4uuclGysVbL8KgmWb551d64G1zckb68lhqlSXyWxM8OiOVi/K+y
/rYcTRKjyaPZJ3KR/WrbPr8qTVL+l2QtvM+F7gyP0sXdmoRJTTog95CLGZ/f
lD74o0lUakXzWJlivpafbH2moUVWPV3PeZ/Hhf4vu0UHl2iRgwnJj9ILuDD4
EvXjzWYtcvv8wOFLL7iwV1swVLRfi7zZa7fI4z8uXtwyOmYbrEW4G9KF1q+5
2PhCuf3QHS2isXjkqc47LqZlzU2d80yLEPXtx4c+cOGxfIbf0Y9axP9P9tKW
T1xYzZDztO3RInd6xvoLv3DxsSYuLX1Ii1R9cC6+1cKFTq2LyRUlbSJ88vjU
0Q4u7spGfGPN0SY6tyWttnSL8986c/uHFdpk3VnXkQV0Mf8XZ9jrbdcmAZ7P
XspwxP287fQJxn5tcn+dzAWGgIvRZWMK089qk5qFHquqfnHxYbdRcsUNbfJL
pXj84ZCY71vlt6pTtcn0YYXK4L9c8C3l5y4q1CabuvaF7pHg4cWCwA+9Vdrk
5PuyNSukeag39Hyv0KJNUh8pS2kr8CA7Y8aZswxt8umWb/XvqTzoDS64Y/Fb
mwyeqohoVuchddmvu9ZSOmSWu8bG5zo83JFarXJVVYfYr/WXi9Hn4czR3k61
mTrk9IKqOn8DHsxKr/T9NNYhGVN1b2yez8OyNkYixUqHNP4OsJ+/iIekvR+N
p9nqkJEfNUrSS3n4u7dk0dWtOsTwnf4X2jIeSo5lRM7epUMccoNi31rzEOm3
KoXrpUPO36x3TAUPn4oSWZ0HdUjOSQP1i+t4oAVeJ0PHdMjX3edadm/mwc/t
lcDylA4ZQ1Oi1TYeqOfUA5LP65AF8+bv0nTmwXOlEmPuJR3irBiiM7CLh5Cz
X783h+uQkP6WjiZ3Hi5O756eGaFDHrcbP3i6T1zv56jJSZE65PubcPdoXx6O
8+1OPLumQySyO/QP+/MwmmD0SCi2F90w7dl4nAevYe8UZ7G960Rk2txTYrxV
j4XSr+qQ8F3d+6TO8xDBi5mRdkWHPF29bA41hIflGzIro8N0SMecaMabyzzw
59stLAjWIZMV6NnJ13j4fMTzpPQ5HWLat+Lg+Zs8ZDhePXj/pA7Z0xq7wPU2
D7zwLOsTR3XI1dds7rIkHqSLGg/e8tUhLzJsnqgn8/Du9PSxUU8d0nUt8civ
NB72ltrtK3fRIXIBgsVfsnmoFO5yaRHjb7HTtjf/MQ8cvfvSDut0iNfK+8+v
P+Mh7fP+cgtrHXJ99q8TfsU8GNg8XX99iQ4pld1kvuElDwqVCyNcDXUIRZj6
e84bHgr2e5bk6ugQxZbBEsn3PCj2yEmGKuqQ5eX2Z3o+8nBliSGPO6FNvNMy
l1d85qH292+esF+bxFwd/XP/Kw/sZ0opCUxtUn7E8dXZVjGfXcwoVps2YTjl
XXTpFD8vMpQT1GkTlRUTqy0oPPiv33W64JU2WTnTZUKVyQOjP87UvECb+EoX
vO3l8tC3RNY2Qnw+bvOlwhtEPKycutr3yS1tUvHVzfbJAA+L3tjOKgjVJpz/
CidHjfBQtVAzKe6ENtFIlavxHefBPTc53ctbm+CKV+S6SXysb2x7rO+sTQ4f
Lt1kIMvH8cHxL19ttckdByUFCUU+ZiQe8Qmz0CbvLH3qu1T4MLrb7r10rjYR
TH8V/UqTD3sVOxuWpvh9IKW27d40PrK8HasyZbSJLddP+cxMPor3eDgdHdYi
x75UNu0w5ONO2/q49Rwtcr9E67aZER/WC4sPmnRokQ8PjjqrmPAx8MQJRp+0
SF9YtYbIjI9DNec6LF9pkel+eq31VnzIS2bY7crXIhu3BSY9WsWHqe6J5qgU
LRJoUecauYYP9kCsYUOMFkmdNmvagQ18vKgQms8M1SJ1Emc6127hI+FCVGjw
CS3ym9WQPMuBD6mTo88Z3lpkVoOh578dfPjeK3rtsEOLbCm6MPPnbj4mwu/t
rlivRU7fa6a89OSj46BH0FwrLZJxySgjaT8fy1U3kssLtMjnA6H7T/nxofS0
6laTrhYZ2dJm6HyUj0fPjt+XmaJFDM1MWKaBfFSxX+ybMaZJtulE5E49w8f5
tfX2KkJNcv5fp5/gAh8vox46tXRpkhyG2cJPoXz80ikw9W7UJE2fovi5EXyw
BndsKHyjScaeU/IjrvNRHsWqKHuqSeYnWR3bf4uP7e/q7gWkahKn4JglaxL4
MN83lPD5piYJ2c/sm3GPD01rzdCai5rk0eZVL8ZSxLbwao+zvyZpWRJ/8kcG
H+1jjSf9d2sSCS2eRVkuH19Xq9CkNmoS4zEylJgv5neeoqyGhSZxoSX9d7KQ
D62Sc99uz9Ik4bWis46lfKz6Un/0jKImKXi63nrJKz6sns/3fym+f9sTkv8q
vuXjwp4Hjg40DTL5wsBrXjUfLVOmbbf4rEGW7LMLqa3jY6f1vzqPEg3itjEd
OY180Cqjr31I0SBXF49IXPnGh+wOQ4kDERqkUH171b52PlLbP2hZHtEgP/9k
X0aXOJ7yPWVzJw0iRxlbp0/jIz3s4qxdVhrEvMZZ5i9LjBe/5HmKngbxzH/8
sZ3PR0rYRPOkCXVy/bZkVGkfH213Iy5fpqqTkrOudgmDYr6i/9rov1cnFM9n
UwJHxf1/OnZuY6Y6UVwv07B9go81GU76iZfViaWxR8ziyQKctBvIP+GtTrxV
i7dPkRfbtxvVfIg6iRlWUOUqCaDwXnbTUX11Uta1r7lGTYDsu//4MX/UCON9
WXyWtgCXhZ4B9S1qROWx8s7w6QJI7LAqmftMjVjH+mrtnS2Aze6qK+nX1Ijv
6Yq21fMEuLQlfIPtPjVy213jnp6xAA/+C2lTXqFGXq/1d/uzRIC4oa+diipq
hLOgSq/NQoC1HzzOE5YqUVfW7SpeIcBw5L8jha9Uic1gQOptGwEqSk7wfGNV
yeHOGq/jtgIYSM/+7OejShLf6c/etkmArceSllRaqZK3uUE0460C7HWJKwpU
UCWCm/WZ8k4CxCYyj0X/VCHaQQYH2C4C/OAOJWg+VSFr3c7N+7BHgKm/E7q1
L6mQY6SJnbFXAEMjW++U7Srk3rz5j0IPCFD8fPW85zNVSLViyGHPwwKEJmWV
FXcrk77+FuNVAQIcFl3dtTVYmeh1GAt1gwR4Z7NIDXrKZENl+NPhswLMmzPN
9mHZVBKY3RHwPViAr9m3cHnnVJJyw3RpUbgA0xx375ToVyK1JyL7YyMFeHJq
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
7F7UqamdOMgNwov6qFshj3v/9/uy/9/+HzKh1eE=
          "]]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.006944444444444445], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
X/6cmIQ27MxQfnZvJwPrO8w/Kbxow53ztV7hyQzcDszZde1dG9qr6mx3djNQ
rbeof+BzG8KlNi1ir2JC7UNGmHd1G2pnX/2x/CYT21wMjWmNbSj2fGdr84uJ
B31JX3aw2mCn5T8pO4OFlnB9j6ruNhTKrDsfcJiFmQseD68Zb0PNTh1eZg4L
+75pR72TbUfSsbuTQWMspB6IXbhQQ3RIRm6Iy9l2gCum8S1Rrx2RwatUloV1
YMHj8H1a80W82xksl2/owCkLysTdZe1ouB4rGzSTjdf1Ifcl17RDcmuffOJh
NoZ8pM0uOraD9ITyDr5iw1I5sEro0o7jfs7CH4Ns+GX8O3RgfzuWRCwOa1rN
wWe7y+JNJ9ph0vLP6O51DqQYQ4+cRYe2yXvya0cFBxv8zy4vC25HYUL+Eq4q
F6G6PTWW99pRqSWXFbuDi5/vjntnx7cjNN42recRF+rbeNLznreDNk63naBy
saP7UMKjvHaYn7lz9uNcHh6GMizVPrUD8Z7Tl3vx0GLkWX+joh3B/MxOr5c8
6Je1nByvb8el8KvWnr08HNi7S+E0TeQ/VzZed3kn0ibqk9n8dvS4XUpKvNgJ
XtwWuA+3w+pk1bKxwk5oPmIf44pTkfdamDpfjA8L7lzLZFkq2o30clbY8OG6
4oDsHiUqLqfXpRnd4ONKcGKdtgYVjdYlBVLf+Xjym/qsTouKXX2zHvxSFKB4
1syT4XpUvJz2YOyBkwC0k+5W/82hgvbKMX3PPQEkix7JS8+n4tT3vfMW1Qkw
l9L055MpFWPfnqyhaAph56qVfGkZFSMep4bEXIU48nyHz7JVVBS1PC/SeCzE
7cFo625Chemf5XGOVCFerPutmGlHRaBU0/S82V34EanWeNCRis9UiQ9Oh7vQ
RXVO1d9ChaTKYmfDzC6omYadaXahwuHnOLHp6oLZ1SoS6y7Kf8uAbb12N7ZV
Kihv3k9FkKXYsyVW3fDVtm9WPEpFMXKdCjy68eDwzedfT1BREvfzxemAbrx/
U3Yu4CwVPwNyctyTu9EsKWVjdYmKyC7yyK+8GxOb16oO+VNRqdOv/pfXDb2E
a605wVT8OXdScEy5B0RYlHHsDhUNjQn1MOvBPquJ84b3qChPLXTZuqMH12+v
sqXHUvHbYSww/VIPUv5eVH8cT8Uh/vmQdU97UD4vv90lkYqr+q8c55X2gHt2
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
Wwpx/bZh30CSSJc25YTOWE8hV6bdNM1OZyJM9e+YoT2FPDlQNu71igmxqEhn
OFBIca5kxdw3TPg3cxKPb6QQutja+9QCJp7a6G376Ewhks7XDjwqZmK1+GjR
yi0UMvdx0ZIdX5kQjHM9eNsoxK5z/J9qFRPkePXnFhcKOWKxqqqylon5FWZW
Orsp5PbNi3E3GkT+aas3ZXlQyIv6d4fWtIrw3V+ilbCPQqpnDy4dpzOxIvBt
//ghCunyMRd/x2Gi2Cqj4oc3hagVn672ETKxpHLr1uk+FGKmnPNoQT8T556I
m/f6Usg2t64j7BEmajSL4nZepRDfjIXLEyeZsBiqe7jzOoU8GPaWdJdm4Xb3
ltTROxRSYJdRo6nIAnP4+YhdNIU0R3Me/1JlIVHj9kHbxxQyQZ/nfXcaC8EX
A/UmUkX7a8nBlRumszDL7q7uuRwKIf5J0pIGLPgWDUXnFVLIvh+0Xx8NWbjS
1ype9I1CruvqJ1xYyML3ysCIuHoKST3qcXzpUhbm6D769x+DQsrfxVsKV4p0
vytpre+hEK50s2y6NQtERnXaanElorBNu37/Ohb2PCFbg9SUyIJEl0S9/1jI
YA+aZRgoEafumJONzixov9LwzjVXIqes66yit7OQdU/fNn69EokMVVdw3s3C
XucW88O7lUhe06YG+b0spPtl7VE7pUTqjcKTSw+xcEozTSIuWIkM+v7w8T/G
wnhP+sjoIyWiVaYIy9MsDGc5BC7NUyKWGv9RBs6zsOCQXvHqSiXitjek8dVV
Fi7ZvXWdwlQifq++pnoFsdCeuF88Z0KJPJ2QOjv3FgtHghvqKVrKpMTBZg01
jIWkuS6K+kuVCT0uQPlRNAsHtby06U7KRIrzqXn7QxYmvNK/2nsrk3nL/z1X
TWDhgqSF3cYQZbLhupVvZQoLPsyIRlqKMvH6dcnmRiYLcR7nlca/KJNQ/feq
a3JYqLWZWB1BVyZZJ4Zax96y4G4Uzb4nrkKqC5dlvi1kYYub9+x+fRXSrXD2
gs9nFtaevn4inagQ9V25tgu+sWBw2D8vyVOFmKd1q7N/sCDzet2numsqZMfA
Iuqz3yz4xzXzFj5TIRdsjme5NbKgMU1KIqFEhcTdy7yk2c5C0+dzBbp0FVLQ
zl3/i8nC6TLepw3iqqRlodHUuzwWzrG6Wi+oqZJ/lw/R13ezsKMmYUfsLFWi
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
Uj8scvf8Kb256///r5NbeSvcL+N/7P8Dcah2tw==
          "]]}}}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         FaceForm[
          Opacity[0.3]], 
         RGBColor[0.368417, 0.506779, 0.709798]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ7cablXeJ87U9AxTA+MKVi9Z6q82zR+Wvg/N1/9Qw
vMjaD+fH/nrGuDXsOJx/+suryKUXz8H5yRLr3haWX4bzZ7NcUDnocB3OnzVx
RYF59G04f+3ddemtSffh/L/W/ascJz2E89siF2lfmf0Y4R65V8v3NT2F8+MO
nfgpkvAczv+0jenav9SXcP7ioMK1Dp6v4fztdtb8YqFv4fxQrjlu4eHv4fyO
fTNsKmZ/gPMlFARn983/COebXVX+HjDpE8J9RikSsTM/I/z7P19l/uwvcL69
gpheb89XOF/k5cs/RyZ+g/MrWCNOrmj9DucvnDix4VDJDzj/99Eff1QrfsL5
T3x/lZlm/YLz/9dqbusr+A3n35dVeSBb9AfO9xXcyR6Z9BfOf7um+svdtH9w
vsycG/f4ov7D+e21DLesVBgcYHzJRm31yUsR/KJ1ysWOcoxw/pP1mxaKLETw
ZW/znbeVZoLzLfdd+Mg4GcHPK9X8/kqEGc7PCvP/rdmH4Ndz8zzqFWSB88sq
9Pb1TELwTfnlZj7kYoXzeauWhEX3Ivhr+H4IabOzwfm60RuPTK1D8I9XM0aq
MrDD+RrH5N5wVSL4Isn8Za17EHxIbuFwAADvOF8f
         "]]}}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, AxesOrigin -> {0.3910069763093964, 0}, 
     PlotRange -> {{0.4002155197810639, 0.9895623019677855}, {
       0, 6.133719103968582}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Dominant eigenvalue\"", TraditionalForm], None}, 
     AxesOrigin -> {0.3910069763093964, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{0.4002155197810639, 0.9895623019677855}, {
       0, 6.133719103968582}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Composite\"", "\"Average\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.125], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.006944444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.006944444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.654496955435972*^9, 3.654497022611085*^9, 3.654497231397155*^9, 
   3.654497340300375*^9, 3.654497388899076*^9, {3.654497450811182*^9, 
   3.6544974849194393`*^9}, {3.654497790502699*^9, 3.6544977924735603`*^9}, 
   3.654497965627451*^9, 3.6551279899504013`*^9, 3.65512808738251*^9, 
   3.655128186994864*^9, 3.655128369348722*^9, 3.655128401257647*^9, 
   3.655128534500538*^9, 3.655128599191131*^9, 3.655128659912484*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"more", " ", "stable", " ", "system"}], " ", "-", " ", 
      RowBox[{"avg", " ", 
       RowBox[{"v", ".", " ", "comp"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "1.", " ", "In", " ", "the", " ", "univariate", 
       " ", "case", " ", "we", " ", "saw", " ", "that", " ", "the", " ", 
       "averaging", " ", "method", " ", "did", " ", "less", " ", "bad", " ", 
       "when", " ", "the", " ", "underlying", " ", "system", " ", "was", " ", 
       "more", " ", "stable", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"smaller", " ", "b"}], ")"}], ".", "Play"}], " ", "around", 
       " ", "with", " ", "the", " ", "experiments", " ", "file", " ", "and", 
       " ", "see", " ", "if", " ", "this", " ", "is", " ", "true", " ", "for",
        " ", "the", " ", "multivariate", " ", 
       RowBox[{
       "case", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", "We"}], " ",
        "want", " ", "to", " ", "change", " ", "the", " ", "B", " ", "matrix",
        " ", "to", " ", "change", " ", "stability", "\[IndentingNewLine]", 
       "Start", " ", "by", " ", "only", " ", "changing", " ", "the", " ", 
       "diagonal", " ", "entries", " ", "because", " ", "they", " ", "are", 
       " ", "expected", " ", "to", " ", "have", " ", "the", " ", "biggest", 
       " ", "effect"}], " ", "-", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "B"}], "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{".3", ",", 
           RowBox[{"-", ".2"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", ".1"}], ",", ".4", ",", ".1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{".1", ",", "0", ",", ".2"}], "}"}]}], "}"}], 
       "\[IndentingNewLine]", "comp", " ", "still", " ", "seems", " ", "to", 
       " ", "be", " ", "a", " ", "better", " ", "estimate", " ", "of", " ", 
       "mean", " ", "and", " ", "spread", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "even", " ", "smaller", " ", "diagonal", " ", 
       "entries", "\[IndentingNewLine]", "B"}], "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{".1", ",", 
            RowBox[{"-", ".2"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", ".1"}], ",", ".1", ",", ".1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{".1", ",", "0", ",", ".1"}], "}"}]}], "}"}], 
        "\[IndentingNewLine]", "complex", " ", "eigenvalues", 
        "\[IndentingNewLine]", "average", " ", "and", " ", "comp", " ", 
        "pretty", " ", "close", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "change", " ", "off", " ", "diagonal", " ", "entries", 
        "\[IndentingNewLine]", "B"}], "=", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{".5", ",", ".2", ",", ".1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", ".9"}], ",", ".5", ",", ".1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", ".8"}], ",", ".3", ",", ".4"}], "}"}]}], "}"}], 
        "\[IndentingNewLine]", "complex", " ", "eigenvalues", 
        "\[IndentingNewLine]", "average", " ", "is", " ", "VERY", " ", 
        "close", " ", "to", " ", 
        RowBox[{"composite", "!"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "2.", " ", "Same", " ", "as", " ", "in", " ", 
        RowBox[{"(", "1", ")"}], " ", "but", " ", "now", " ", "look", " ", 
        "at", " ", "effects", " ", "of", " ", "variation", " ", "of", " ", 
        "other", " ", 
        RowBox[{"quantities", ":", 
         RowBox[{"number", " ", "of", " ", "tanks"}]}]}]}]}]}], ",", 
    RowBox[{"length", " ", "of", " ", "time", " ", "series"}], ",", " ", 
    RowBox[{
     RowBox[{
     "etc", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", "Change"}], 
     " ", "q", " ", "tanks"}], ",", " ", "finaltime", ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"A", " ", "starting", " ", 
       RowBox[{
       "abundances", "?", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "q"}]}], " ", "=", " ", 
      RowBox[{
       RowBox[{
       "50", "\[IndentingNewLine]", "average", " ", "is", " ", "pretty", " ", 
        "far", " ", "off", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "finaltime"}], " ", "=", " ", 
       RowBox[{
        RowBox[{
        "300", "\[IndentingNewLine]", "average", " ", "is", " ", "very", " ", 
         "similar", " ", "to", " ", 
         RowBox[{"composite", "!"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "A"}], " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"-", ".2"}], "}"}], ",", 
          RowBox[{"{", "1.0", "}"}], ",", 
          RowBox[{"{", ".5", "}"}]}], "}"}]}]}]}], ";", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", ".1", "}"}], ",", 
        RowBox[{"{", ".3", "}"}], ",", 
        RowBox[{"{", ".8", "}"}]}], "}"}], "\[IndentingNewLine]", "\t", "avg",
       " ", "seems", " ", "to", " ", "be", " ", "even", " ", "further", " ", 
      "off", " ", "\[IndentingNewLine]", "\t", "wider", " ", "spread", " ", 
      "overall", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "How", " ", "does", " ", 
      "changing", " ", "forcing", " ", "affect", " ", "the", " ", 
      RowBox[{"data", "?", "\[IndentingNewLine]", "1."}], " ", "Increase", 
      " ", "the", " ", "noise", " ", "overall", "\n", "\t", "noise", "*", "5",
       "\n", "\t", "Average", " ", "WAY", " ", "off", "\n", "\t", "composite",
       " ", "is", " ", "closer", " ", "but", " ", "still", " ", "not", " ", 
      "always", " ", "a", " ", "good", " ", "prediction", "\n", "\t", "var", 
      " ", "along", " ", "dom", " ", "eigvec", " ", "average", " ", 
      "predicts", " ", "mean", " ", "better", "\n", "\[IndentingNewLine]", 
      "2.", " ", "Change", " ", "SD", " ", "of", " ", "noise", "\n", "\t", 
      "was", " ", "SD", " ", "1"}]}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
      "what", " ", "happens", " ", "when", " ", "bump", " ", "that", " ", 
       RowBox[{"up", "?", "\[IndentingNewLine]", "noise"}]}], "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"RandomVariate", "[", 
         RowBox[{
          RowBox[{"NormalDistribution", "[", "]"}], ",", "p"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", 
          RowBox[{"time", "+", "1"}]}], "}"}]}], "]"}]}], ";", "\n", 
     RowBox[{"noise", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"RandomVariate", "[", 
         RowBox[{
          RowBox[{"NormalDistribution", "[", 
           RowBox[{"0", ",", "3"}], "]"}], ",", "p"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", 
          RowBox[{"time", "+", "1"}]}], "}"}]}], "]"}]}], ";", "\n", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"As", " ", "increase", " ", "SD"}]}], ",", " ", 
    RowBox[{
    "average", " ", "estimate", " ", "gets", " ", "worse", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "3.", " ", "Change", " ", 
     "noise", " ", "for", " ", "only", " ", "1", " ", 
     RowBox[{"species", "\[IndentingNewLine]", "\t", "?"}]}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "*)"}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJwdy00swgEAhvF8zCwdGCPSqo1O6NCmKWq1+Zg5WGWVzCxDKM2aLbQZXdhS
sUwKG6Nmc0G2dJAuKNPSIWzNzKEhF5s5mJn/2+HZ7/SwNAbpUC6JRKIRwY/T
B38lPyMeI/cF4XNs76eKkLt+kFXyWFZCI0zZ2EwYl+oYdMIXIa8WmkRPXHit
pfLhXCg92kW46LTooKG+wwxrKJYlWNEetUNRcn8NutneDdg8QtmBcXuhD15y
zIfQuyA8gmRNtR9ak50BGHy9C8KEopQ2TOh8d9HhRZFMAAd6lC3QbZ3qhSt/
CjVczR8fhDnlbUZoZIRm4Ze+ez7750VssEGmcsBGW50HmoK8XSiRWnzwmK48
gTObNwH42fR2BrcTvDCMT/RfwWI9JwbTYVcCRuXeJGQuq1OQylVNuwUZMetc
m/U+s3ULf+WRBJxMOsQewm9uQSv8B6KeyiQ=
  "]]
},
WindowSize->{652, 641},
WindowMargins->{{Automatic, 79}, {Automatic, 0}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 4, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 73, 1, 28, "Input"],
Cell[634, 23, 4548, 120, 586, "Input"],
Cell[5185, 145, 24552, 577, 2431, "Input"],
Cell[29740, 724, 916, 19, 221, "Input"],
Cell[CellGroupData[{
Cell[30681, 747, 4894, 133, 513, "Input"],
Cell[CellGroupData[{
Cell[35600, 884, 2235, 54, 54, "Print"],
Cell[37838, 940, 3348, 67, 108, "Print"],
Cell[41189, 1009, 1467, 28, 38, "Print"],
Cell[42659, 1039, 1054, 18, 22, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43762, 1063, 10871, 298, 1081, "Input"],
Cell[54636, 1363, 47743, 841, 204, "Output"],
Cell[102382, 2206, 47540, 840, 160, "Output"],
Cell[149925, 3048, 47925, 844, 185, "Output"]
}, Open  ]],
Cell[197865, 3895, 8174, 173, 1083, "Input"]
}
]
*)

(* End of internal cache information *)
